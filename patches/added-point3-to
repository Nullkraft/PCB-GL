Bottom: ff78c05762f29155edcc795b858a5682e3dadab6
Top:    478e399c869ee063b1e8056268be69db76d72d75
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 19:16:20 +0000

Added Point3 to AttachedLineType.. (making it an attached line-pair)


---

diff --git a/src/crosshair.c b/src/crosshair.c
index 06f77ae..ce5e2f5 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -742,7 +742,8 @@ DrawAttached (hidGC gc)
 	  if (PCB->Clipping && !TEST_FLAG (ALLDIRECTIONFLAG, PCB))
 	    XORDrawAttachedLine (gc, Crosshair.AttachedLine.Point2.X,
 	                             Crosshair.AttachedLine.Point2.Y,
-	                         Crosshair.X, Crosshair.Y,
+	                             Crosshair.AttachedLine.Point3.X,
+	                             Crosshair.AttachedLine.Point3.Y,
 	                         PCB->RatDraw ? 10 : Settings.LineThickness);
 	  if (TEST_FLAG (SHOWDRCFLAG, PCB))
 	    {
@@ -756,7 +757,8 @@ DrawAttached (hidGC gc)
 	      if (PCB->Clipping)
 		XORDrawAttachedLine (gc, Crosshair.AttachedLine.Point2.X,
 		                         Crosshair.AttachedLine.Point2.Y,
-		                     Crosshair.X, Crosshair.Y,
+		                         Crosshair.AttachedLine.Point3.X,
+		                         Crosshair.AttachedLine.Point3.Y,
 		                     PCB->RatDraw ? 10 : Settings.
 		                     LineThickness + 2 * (PCB->Bloat + 1));
 	      hid_draw_set_color (gc, Settings.CrosshairColor);
diff --git a/src/global.h b/src/global.h
index d5d2f82..d0b3f14 100644
--- a/src/global.h
+++ b/src/global.h
@@ -553,8 +553,9 @@ typedef struct			/* rubberband lines for element moves */
 
 typedef struct			/* current marked line */
 {
-  PointType Point1,		/* start- and end-position */
-    Point2;
+  PointType Point1;		/* start position */
+  PointType Point2;		/* middle position */
+  PointType Point3;		/* end position */
   long int State;
   bool draw;
 } AttachedLineType;
diff --git a/src/line.c b/src/line.c
index b8fbf18..57618cd 100644
--- a/src/line.c
+++ b/src/line.c
@@ -97,9 +97,12 @@ FortyFiveLine (AttachedLineType *Line)
   unsigned direction = 0;
   double m;
 
+  Line->Point3.X = Crosshair.X;
+  Line->Point3.Y = Crosshair.Y;
+
   /* first calculate direction of line */
-  dx = Crosshair.X - Line->Point1.X;
-  dy = Crosshair.Y - Line->Point1.Y;
+  dx = Line->Point3.X - Line->Point1.X;
+  dy = Line->Point3.Y - Line->Point1.Y;
 
   /* zero length line, don't draw anything */
   if (dx == 0 && dy == 0)
@@ -178,6 +181,9 @@ AdjustTwoLine (bool way)
   Coord dx, dy;
   AttachedLineType *line = &Crosshair.AttachedLine;
 
+  line->Point3.X = Crosshair.X;
+  line->Point3.Y = Crosshair.Y;
+
   if (Crosshair.AttachedLine.State == STATE_FIRST)
     return;
   /* don't draw outline when ctrl key is pressed */
@@ -190,26 +196,26 @@ AdjustTwoLine (bool way)
     line->draw = true;
   if (TEST_FLAG (ALLDIRECTIONFLAG, PCB))
     {
-      line->Point2.X = Crosshair.X;
-      line->Point2.Y = Crosshair.Y;
+      line->Point2.X = line->Point3.X;
+      line->Point2.Y = line->Point3.Y;
       return;
     }
   /* swap the modes if shift is held down */
   if (gui->shift_is_pressed ())
     way = !way;
-  dx = Crosshair.X - line->Point1.X;
-  dy = Crosshair.Y - line->Point1.Y;
+  dx = line->Point3.X - line->Point1.X;
+  dy = line->Point3.Y - line->Point1.Y;
   if (!way)
     {
       if (abs (dx) > abs (dy))
 	{
-	  line->Point2.X = Crosshair.X - SGN (dx) * abs (dy);
+	  line->Point2.X = line->Point3.X - SGN (dx) * abs (dy);
 	  line->Point2.Y = line->Point1.Y;
 	}
       else
 	{
 	  line->Point2.X = line->Point1.X;
-	  line->Point2.Y = Crosshair.Y - SGN (dy) * abs (dx);
+	  line->Point2.Y = line->Point3.Y - SGN (dy) * abs (dx);
 	}
     }
   else
@@ -217,11 +223,11 @@ AdjustTwoLine (bool way)
       if (abs (dx) > abs (dy))
 	{
 	  line->Point2.X = line->Point1.X + SGN (dx) * abs (dy);
-	  line->Point2.Y = Crosshair.Y;
+	  line->Point2.Y = line->Point3.Y;
 	}
       else
 	{
-	  line->Point2.X = Crosshair.X;
+	  line->Point2.X = line->Point3.X;
 	  line->Point2.Y = line->Point1.Y + SGN (dy) * abs (dx);;
 	}
     }
@@ -886,11 +892,14 @@ EnforceLineDRC (void)
     }
   END_LOOP;
 
-  rs.X = Crosshair.X;
-  rs.Y = Crosshair.Y;
+  Crosshair.AttachedLine.Point3.X = Crosshair.X;
+  Crosshair.AttachedLine.Point3.Y = Crosshair.Y;
+
+  rs.X = Crosshair.AttachedLine.Point3.X;
+  rs.Y = Crosshair.AttachedLine.Point3.Y;
 #if 1
-  r45.X = Crosshair.X;
-  r45.Y = Crosshair.Y;
+  r45.X = Crosshair.AttachedLine.Point3.X;
+  r45.Y = Crosshair.AttachedLine.Point3.Y;
 #endif
 
   if (!TEST_FLAG (AUTODRCFLAG, PCB))
@@ -906,8 +915,8 @@ EnforceLineDRC (void)
   if (TEST_FLAG (ALLDIRECTIONFLAG, PCB))
     {
       drc_line (&rs);
-      Crosshair.X = rs.X;
-      Crosshair.Y = rs.Y;
+      Crosshair.X = Crosshair.AttachedLine.Point3.X = rs.X;
+      Crosshair.Y = Crosshair.AttachedLine.Point3.Y = rs.Y;
     }
   else
     {
@@ -935,8 +944,8 @@ EnforceLineDRC (void)
 #else /* Fixed starting angle */
 //      drc_lines (&rs, (PCB->Clipping == 1) != gui->shift_is_pressed ());
       drc_lines (&rs, false);
-      Crosshair.X = rs.X;
-      Crosshair.Y = rs.Y;
+      Crosshair.X = Crosshair.AttachedLine.Point3.X = rs.X;
+      Crosshair.Y = Crosshair.AttachedLine.Point3.Y = rs.Y;
 #endif
     }
 }
