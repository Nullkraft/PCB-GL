Bottom: cd55feeac2aea07a9d2b47e439a6899364a15c24
Top:    c2cd4456216503968681031fe38f13049df60c3e
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-18 16:56:21 +0000

Update graphics API a little


---

diff --git a/src/crosshair.c b/src/crosshair.c
index 1d20765..5d50d23 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -66,7 +66,7 @@ thindraw_moved_pv (hidGC gc, PinType *pv, Coord x, Coord y)
   moved_pv.X += x;
   moved_pv.Y += y;
 
-  hid_draw_thin_pcb_pv (gc, gc, &moved_pv, true, false);
+  hid_draw__thin_pcb_pv (gc, gc, &moved_pv, true, false);
 }
 
 /* ---------------------------------------------------------------------------
@@ -233,7 +233,7 @@ XORDrawElement (hidGC gc, ElementType *Element, Coord DX, Coord DY)
         moved_pad.Point1.X += DX; moved_pad.Point1.Y += DY;
         moved_pad.Point2.X += DX; moved_pad.Point2.Y += DY;
 
-        hid_draw_thin_pcb_pad (gc, &moved_pad, false, false);
+        hid_draw__thin_pcb_pad (gc, &moved_pad, false, false);
       }
   }
   END_LOOP;
@@ -689,7 +689,7 @@ DrawAttached (hidGC gc)
         via.Mask = 0;
         via.Flags = NoFlags ();
 
-        hid_draw_thin_pcb_pv (gc, gc, &via, true, false);
+        hid_draw__thin_pcb_pv (gc, gc, &via, true, false);
 
         if (TEST_FLAG (SHOWDRCFLAG, PCB))
           {
diff --git a/src/draw_funcs.c b/src/draw_funcs.c
index 5b13d95..39f8d6f 100644
--- a/src/draw_funcs.c
+++ b/src/draw_funcs.c
@@ -10,42 +10,27 @@
 void ghid_set_lock_effects (hidGC gc, AnyObjectType *object);
 
 static void
-_draw_pv (PinType *pv, bool draw_hole)
-{
-  if (TEST_FLAG (THINDRAWFLAG, PCB))
-    hid_draw_thin_pcb_pv (Output.fgGC, Output.fgGC, pv, draw_hole, false);
-  else
-    hid_draw_fill_pcb_pv (Output.fgGC, Output.bgGC, pv, draw_hole, false);
-}
-
-static void
 draw_pin (PinType *pin, const BoxType *drawn_area, void *userdata)
 {
-  _draw_pv (pin, false);
+  hid_draw_pcb_pv (Output.fgGC, Output.bgGC, pin, false, false);
 }
 
 static void
 draw_pin_mask (PinType *pin, const BoxType *drawn_area, void *userdata)
 {
-  if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
-    hid_draw_thin_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
-  else
-    hid_draw_fill_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
+  hid_draw_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
 }
 
 static void
 draw_via (PinType *via, const BoxType *drawn_area, void *userdata)
 {
-  _draw_pv (via, false);
+  hid_draw_pcb_pv (Output.fgGC, Output.bgGC, via, false, false);
 }
 
 static void
 draw_via_mask (PinType *via, const BoxType *drawn_area, void *userdata)
 {
-  if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
-    hid_draw_thin_pcb_pv (Output.pmGC, Output.pmGC, via, false, true);
-  else
-    hid_draw_fill_pcb_pv (Output.pmGC, Output.pmGC, via, false, true);
+  hid_draw_pcb_pv (Output.pmGC, Output.pmGC, via, false, true);
 }
 
 static void
@@ -69,11 +54,7 @@ _draw_pad (hidGC gc, PadType *pad, bool clear, bool mask)
   if (clear && !mask && pad->Clearance <= 0)
     return;
 
-  if (TEST_FLAG (THINDRAWFLAG, PCB) ||
-      (clear && TEST_FLAG (THINDRAWPOLYFLAG, PCB)))
-    hid_draw_thin_pcb_pad (gc, pad, clear, mask);
-  else
-    hid_draw_fill_pcb_pad (gc, pad, clear, mask);
+  hid_draw_pcb_pad (gc, pad, clear, mask);
 }
 
 static void
diff --git a/src/hid/common/draw_helpers.c b/src/hid/common/draw_helpers.c
index 0bded43..8158fd0 100644
--- a/src/hid/common/draw_helpers.c
+++ b/src/hid/common/draw_helpers.c
@@ -261,9 +261,9 @@ common_gui_draw_pcb_polygon (hidGC gc, PolygonType *polygon, const BoxType *clip
     return;
 
   if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
-    hid_draw_thin_pcb_polygon (gc, polygon, clip_box);
+    hid_draw__thin_pcb_polygon (gc, polygon, clip_box);
   else
-    hid_draw_fill_pcb_polygon (gc, polygon, clip_box);
+    hid_draw__fill_pcb_polygon (gc, polygon, clip_box);
 
   /* If checking planes, thin-draw any pieces which have been clipped away */
   if (TEST_FLAG (CHECKPLANESFLAG, PCB) && !TEST_FLAG (FULLPOLYFLAG, polygon))
@@ -273,7 +273,7 @@ common_gui_draw_pcb_polygon (hidGC gc, PolygonType *polygon, const BoxType *clip
       for (poly.Clipped = polygon->Clipped->f;
            poly.Clipped != polygon->Clipped;
            poly.Clipped = poly.Clipped->f)
-        hid_draw_thin_pcb_polygon (gc, &poly, clip_box);
+        hid_draw__thin_pcb_polygon (gc, &poly, clip_box);
     }
 }
 
@@ -465,6 +465,15 @@ common_get_pad_polygon(Coord x[4], Coord y[4], const PadType *l, int w)
 }
 
 void
+common_gui_draw_pcb_pad (hidGC gc, PadType *pad, bool clip, bool mask)
+{
+  if (TEST_FLAG (THINDRAWFLAG, PCB))
+    hid_draw__thin_pcb_pad (gc, pad, clip, mask);
+  else
+    hid_draw__fill_pcb_pad (gc, pad, clip, mask);
+}
+
+void
 common_fill_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask)
 {
   Coord w = clear ? (mask ? pad->Mask
@@ -578,6 +587,15 @@ draw_octagon_poly (hidGC gc, Coord X, Coord Y,
 }
 
 void
+common_gui_draw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask)
+{
+  if (TEST_FLAG (THINDRAWFLAG, PCB))
+    hid_draw__thin_pcb_pv (fg_gc, fg_gc, pv, drawHole, mask); /* All thindraw callers used the same GC for fg and bg */
+  else
+    hid_draw__fill_pcb_pv (fg_gc, bg_gc, pv, drawHole, mask);
+}
+
+void
 common_fill_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask)
 {
   Coord w = mask ? pv->Mask : pv->Thickness;
@@ -675,17 +693,19 @@ common_thindraw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bo
 void
 common_draw_helpers_class_init (HID_DRAW_CLASS *klass)
 {
-  klass->draw_pcb_line        = common_draw_pcb_line;
-  klass->draw_pcb_arc         = common_draw_pcb_arc;
-  klass->draw_pcb_text        = common_draw_pcb_text;
-  klass->draw_pcb_polygon     = common_fill_pcb_polygon; /* Default is the non-GUI case */
-
-  klass->fill_pcb_polygon     = common_fill_pcb_polygon;
-  klass->thindraw_pcb_polygon = common_thindraw_pcb_polygon;
-  klass->fill_pcb_pad         = common_fill_pcb_pad;
-  klass->thindraw_pcb_pad     = common_thindraw_pcb_pad;
-  klass->fill_pcb_pv          = common_fill_pcb_pv;
-  klass->thindraw_pcb_pv      = common_thindraw_pcb_pv;
+  klass->draw_pcb_line         = common_draw_pcb_line;
+  klass->draw_pcb_arc          = common_draw_pcb_arc;
+  klass->draw_pcb_text         = common_draw_pcb_text;
+  klass->draw_pcb_polygon      = common_fill_pcb_polygon; /* Default is the non-GUI case */
+  klass->draw_pcb_pad          = common_fill_pcb_pad;     /* Default is the non-GUI case */
+  klass->draw_pcb_pv           = common_fill_pcb_pv;      /* Default is the non-GUI case */
+
+  klass->_fill_pcb_polygon     = common_fill_pcb_polygon;
+  klass->_thindraw_pcb_polygon = common_thindraw_pcb_polygon;
+  klass->_fill_pcb_pad         = common_fill_pcb_pad;
+  klass->_thindraw_pcb_pad     = common_thindraw_pcb_pad;
+  klass->_fill_pcb_pv          = common_fill_pcb_pv;
+  klass->_thindraw_pcb_pv      = common_thindraw_pcb_pv;
 }
 
 void
diff --git a/src/hid/common/draw_helpers.h b/src/hid/common/draw_helpers.h
index 5992887..fad2563 100644
--- a/src/hid/common/draw_helpers.h
+++ b/src/hid/common/draw_helpers.h
@@ -1,8 +1,10 @@
 void common_gui_draw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box);
 void common_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box);
 void common_thindraw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box);
+void common_gui_draw_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask);
 void common_fill_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask);
 void common_thindraw_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask);
+void common_gui_draw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
 void common_fill_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
 void common_thindraw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
 void common_draw_helpers_class_init (HID_DRAW_CLASS *klass);
diff --git a/src/hid/common/hidnogui.c b/src/hid/common/hidnogui.c
index a746411..622fb69 100644
--- a/src/hid/common/hidnogui.c
+++ b/src/hid/common/hidnogui.c
@@ -149,25 +149,13 @@ nogui_draw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 }
 
 static void
-nogui_fill_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask)
+nogui_draw_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask)
 {
   CRASH;
 }
 
 static void
-nogui_thindraw_pcb_pad (hidGC gc, PadType *pad, bool clear, bool mask)
-{
-  CRASH;
-}
-
-static void
-nogui_fill_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pad, bool drawHole, bool mask)
-{
-  CRASH;
-}
-
-static void
-nogui_thindraw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pad, bool drawHole, bool mask)
+nogui_draw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pad, bool drawHole, bool mask)
 {
   CRASH;
 }
@@ -497,10 +485,8 @@ common_nogui_graphics_class_init (HID_DRAW_CLASS *klass)
   klass->fill_rect =       nogui_fill_rect;
 
   klass->draw_pcb_polygon = nogui_draw_pcb_polygon;
-  klass->fill_pcb_pad =     nogui_fill_pcb_pad;
-  klass->thindraw_pcb_pad = nogui_thindraw_pcb_pad;
-  klass->fill_pcb_pv =      nogui_fill_pcb_pv;
-  klass->thindraw_pcb_pv =  nogui_thindraw_pcb_pv;
+  klass->draw_pcb_pad =     nogui_draw_pcb_pad;
+  klass->draw_pcb_pv =      nogui_draw_pcb_pv;
 }
 
 void
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 1fd999f..2100deb 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -897,7 +897,7 @@ ghid_thindraw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
   double old_alpha_mult = gtk_gc->alpha_mult;
   common_thindraw_pcb_polygon (gc, poly, clip_box);
   ghid_set_alpha_mult (gc, gtk_gc->alpha_mult * 0.25);
-  hid_draw_fill_pcb_polygon (gc, poly, clip_box);
+  hid_draw__fill_pcb_polygon (gc, poly, clip_box);
   ghid_set_alpha_mult (gc, old_alpha_mult);
 }
 
@@ -1107,8 +1107,8 @@ ghid_init_renderer (int *argc, char ***argv, GHidPort *port)
 
   /* Setup HID function pointers specific to the GL renderer*/
   ghid_graphics_class.end_layer = ghid_end_layer;
-  ghid_graphics_class.fill_pcb_polygon = ghid_fill_pcb_polygon;
-  ghid_graphics_class.thindraw_pcb_polygon = ghid_thindraw_pcb_polygon;
+  ghid_graphics_class._fill_pcb_polygon = ghid_fill_pcb_polygon;
+  ghid_graphics_class._thindraw_pcb_polygon = ghid_thindraw_pcb_polygon;
 }
 
 void
@@ -1286,9 +1286,9 @@ static void
 _draw_pv (PinType *pv, bool draw_hole)
 {
   if (TEST_FLAG (THINDRAWFLAG, PCB))
-    hid_draw_thin_pcb_pv (Output.fgGC, Output.fgGC, pv, draw_hole, false);
+    hid_draw__thin_pcb_pv (Output.fgGC, Output.fgGC, pv, draw_hole, false);
   else
-    hid_draw_fill_pcb_pv (Output.fgGC, Output.bgGC, pv, draw_hole, false);
+    hid_draw__fill_pcb_pv (Output.fgGC, Output.bgGC, pv, draw_hole, false);
 
   if (!TEST_FLAG (HOLEFLAG, pv) && TEST_FLAG (DISPLAYNAMEFLAG, pv))
     _draw_pv_name (pv);
@@ -1407,9 +1407,9 @@ _draw_pad (hidGC gc, PadType *pad, bool clear, bool mask)
 
   if (TEST_FLAG (THINDRAWFLAG, PCB) ||
       (clear && TEST_FLAG (THINDRAWPOLYFLAG, PCB)))
-    hid_draw_thin_pcb_pad (gc, pad, clear, mask);
+    hid_draw__thin_pcb_pad (gc, pad, clear, mask);
   else
-    hid_draw_fill_pcb_pad (gc, pad, clear, mask);
+    hid_draw__fill_pcb_pad (gc, pad, clear, mask);
 }
 
 static void
@@ -1575,9 +1575,9 @@ clearPin_callback (const BoxType * b, void *cl)
 {
   PinType *pin = (PinType *) b;
   if (TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG (THINDRAWPOLYFLAG, PCB))
-    hid_draw_thin_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
+    hid_draw__thin_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
   else
-    hid_draw_fill_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
+    hid_draw__fill_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
   return 1;
 }
 
@@ -1595,7 +1595,7 @@ static int
 clearPin_callback_solid (const BoxType * b, void *cl)
 {
   PinType *pin = (PinType *) b;
-  hid_draw_fill_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
+  hid_draw__fill_pcb_pv (Output.pmGC, Output.pmGC, pin, false, true);
   return 1;
 }
 
@@ -1605,7 +1605,7 @@ clearPad_callback_solid (const BoxType * b, void *cl)
   PadType *pad = (PadType *) b;
   int *side = cl;
   if (ON_SIDE (pad, *side) && pad->Mask)
-    hid_draw_fill_pcb_pad (Output.pmGC, pad, true, true);
+    hid_draw__fill_pcb_pad (Output.pmGC, pad, true, true);
   return 1;
 }
 
@@ -1635,7 +1635,7 @@ fill_board_outline (hidGC gc, const BoxType *drawn_area)
     polygon.BoundingBox = *drawn_area;
   polygon.Flags = NoFlags ();
   SET_FLAG (FULLPOLYFLAG, &polygon);
-  hid_draw_fill_pcb_polygon (gc, &polygon, drawn_area);
+  hid_draw__fill_pcb_polygon (gc, &polygon, drawn_area);
   poly_FreeContours (&polygon.NoHoles);
 }
 
@@ -1667,7 +1667,7 @@ fill_outline_hole_cb (PLINE *pl, void *user_data)
 
   /* XXX: For some reason, common_fill_pcb_polygon doesn't work for all contours here.. not sure why */
 //  common_fill_pcb_polygon (info->gc, &polygon, NULL);
-  hid_draw_fill_pcb_polygon (info->gc, &polygon, NULL);
+  hid_draw__fill_pcb_polygon (info->gc, &polygon, NULL);
 
   poly_FreeContours (&polygon.NoHoles);
 
@@ -1781,7 +1781,7 @@ GhidDrawMask (int side, BoxType * screen)
     polygon.BoundingBox = *screen;
   polygon.Flags = NoFlags ();
   SET_FLAG (FULLPOLYFLAG, &polygon);
-  hid_draw_fill_pcb_polygon (out->fgGC, &polygon, screen);
+  hid_draw__fill_pcb_polygon (out->fgGC, &polygon, screen);
   poly_FreeContours (&polygon.NoHoles);
 #endif
 
@@ -2328,7 +2328,7 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
      we can't use the hidgl polygon drawing routine */
   /* TODO: We could use the GLU tessellator though */
   if (hidgl_stencil_bits (priv->hidgl) == 0)
-    ghid_graphics_class.fill_pcb_polygon = common_fill_pcb_polygon;
+    ghid_graphics_class._fill_pcb_polygon = common_fill_pcb_polygon;
 
   glEnable (GL_BLEND);
   glBlendFunc (GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 763f493..846c997 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -2216,6 +2216,9 @@ hid_gtk_init ()
   ghid_graphics_class.fill_rect      = ghid_fill_rect;
 
   ghid_graphics_class.draw_pcb_polygon = common_gui_draw_pcb_polygon;
+  ghid_graphics_class.draw_pcb_pad     = common_gui_draw_pcb_pad;
+  ghid_graphics_class.draw_pcb_pv      = common_gui_draw_pcb_pv;
+
 
   ghid_graphics_class.gui = true;
 
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index c9eb567..6a56893 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -4134,6 +4134,8 @@ hid_lesstif_init ()
   lesstif_graphics_class.fill_rect      = lesstif_fill_rect;
 
   lesstif_graphics_class.draw_pcb_polygon = common_gui_draw_pcb_polygon;
+  lesstif_graphics_class.draw_pcb_pad     = common_gui_draw_pcb_pad;
+  lesstif_graphics_class.draw_pcb_pv      = common_gui_draw_pcb_pv;
 
   lesstif_graphics_class.can_draw_in_mask_clear = true;
 
diff --git a/src/hid_draw.h b/src/hid_draw.h
index 7cf8c84..407bba1 100644
--- a/src/hid_draw.h
+++ b/src/hid_draw.h
@@ -71,13 +71,16 @@ typedef struct hid_draw_class_st
   void (*draw_pcb_arc) (hidGC gc, ArcType *arc);
   void (*draw_pcb_text) (hidGC gc, TextType *, Coord);
   void (*draw_pcb_polygon) (hidGC gc, PolygonType *poly, const BoxType *clip_box);
+  void (*draw_pcb_pad) (hidGC gc, PadType *pad, bool clip, bool mask);
+  void (*draw_pcb_pv) (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
 
-  void (*fill_pcb_polygon) (hidGC gc, PolygonType *poly, const BoxType *clip_box);
-  void (*thindraw_pcb_polygon) (hidGC gc, PolygonType *poly, const BoxType *clip_box);
-  void (*fill_pcb_pad) (hidGC gc, PadType *pad, bool clip, bool mask);
-  void (*thindraw_pcb_pad) (hidGC gc, PadType *pad, bool clip, bool mask);
-  void (*fill_pcb_pv) (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
-  void (*thindraw_pcb_pv) (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
+  /* The following are not meant to be called outside of the GUI implementations of the above APIs */
+  void (*_fill_pcb_polygon) (hidGC gc, PolygonType *poly, const BoxType *clip_box);
+  void (*_thindraw_pcb_polygon) (hidGC gc, PolygonType *poly, const BoxType *clip_box);
+  void (*_fill_pcb_pad) (hidGC gc, PadType *pad, bool clip, bool mask);
+  void (*_thindraw_pcb_pad) (hidGC gc, PadType *pad, bool clip, bool mask);
+  void (*_fill_pcb_pv) (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
+  void (*_thindraw_pcb_pv) (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool drawHole, bool mask);
 
   /* draw.c currently uses this to shortcut and special-case certain rendering when displaying on-screen */
   bool gui;
@@ -241,39 +244,51 @@ hid_draw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
   gc->hid_draw->klass->draw_pcb_polygon (gc, poly, clip_box);
 }
 
+inline void
+hid_draw_pcb_pad (hidGC gc, PadType *pad, bool clip, bool mask)
+{
+  gc->hid_draw->klass->draw_pcb_pad (gc, pad, clip, mask);
+}
+
+inline void
+hid_draw_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool draw_hole, bool mask)
+{
+  fg_gc->hid_draw->klass->draw_pcb_pv (fg_gc, bg_gc, pv, draw_hole, mask);
+}
+
 
 inline void
-hid_draw_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
+hid_draw__fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 {
-  gc->hid_draw->klass->fill_pcb_polygon (gc, poly, clip_box);
+  gc->hid_draw->klass->_fill_pcb_polygon (gc, poly, clip_box);
 }
 
 inline void
-hid_draw_thin_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
+hid_draw__thin_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 {
-  gc->hid_draw->klass->thindraw_pcb_polygon (gc, poly, clip_box);
+  gc->hid_draw->klass->_thindraw_pcb_polygon (gc, poly, clip_box);
 }
 
 inline void
-hid_draw_fill_pcb_pad (hidGC gc, PadType *pad, bool clip, bool mask)
+hid_draw__fill_pcb_pad (hidGC gc, PadType *pad, bool clip, bool mask)
 {
-  gc->hid_draw->klass->fill_pcb_pad (gc, pad, clip, mask);
+  gc->hid_draw->klass->_fill_pcb_pad (gc, pad, clip, mask);
 }
 
 inline void
-hid_draw_thin_pcb_pad (hidGC gc, PadType *pad, bool clip, bool mask)
+hid_draw__thin_pcb_pad (hidGC gc, PadType *pad, bool clip, bool mask)
 {
-  gc->hid_draw->klass->thindraw_pcb_pad (gc, pad, clip, mask);
+  gc->hid_draw->klass->_thindraw_pcb_pad (gc, pad, clip, mask);
 }
 
 inline void
-hid_draw_fill_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool draw_hole, bool mask)
+hid_draw__fill_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool draw_hole, bool mask)
 {
-  fg_gc->hid_draw->klass->fill_pcb_pv (fg_gc, bg_gc, pv, draw_hole, mask);
+  fg_gc->hid_draw->klass->_fill_pcb_pv (fg_gc, bg_gc, pv, draw_hole, mask);
 }
 
 inline void
-hid_draw_thin_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool draw_hole, bool mask)
+hid_draw__thin_pcb_pv (hidGC fg_gc, hidGC bg_gc, PinType *pv, bool draw_hole, bool mask)
 {
-  fg_gc->hid_draw->klass->thindraw_pcb_pv (fg_gc, bg_gc, pv, draw_hole, mask);
+  fg_gc->hid_draw->klass->_thindraw_pcb_pv (fg_gc, bg_gc, pv, draw_hole, mask);
 }
