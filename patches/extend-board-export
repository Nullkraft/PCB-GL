Bottom: a51e4e412afdc7b8c14995cbf69996da59265b23
Top:    b45b6238003702e7cea33d22cbd4a38e309aa743
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-06 00:29:30 +0000

Extend board export

Include emission of soldermask etc..

V2: Apply the solder-mask on top of the board (core) thickness, don't shrink the core to account for it


---

diff --git a/src/hid/common/appearance.c b/src/hid/common/appearance.c
index 92790fcc..e557b43 100644
--- a/src/hid/common/appearance.c
+++ b/src/hid/common/appearance.c
@@ -23,3 +23,9 @@ appearance_set_color (appearance *appear, float r, float g, float b)
   appear->g = g;
   appear->b = b;
 }
+
+void
+appearance_set_appearance (appearance *appear, const appearance *from)
+{
+  *appear = *from;
+}
diff --git a/src/hid/common/appearance.h b/src/hid/common/appearance.h
index d4917d7..d2bf7b3 100644
--- a/src/hid/common/appearance.h
+++ b/src/hid/common/appearance.h
@@ -3,5 +3,6 @@ typedef struct {
 } appearance;
 
 appearance *make_appearance (void);
-void destroy_appearance (appearance *appearance);
-void appearance_set_color (appearance *appearance, float r, float g, float b);
+void destroy_appearance (appearance *appear);
+void appearance_set_color (appearance *appear, float r, float g, float b);
+void appearance_set_appearance (appearance *appear, const appearance *from);
diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index 55f8d5a..18424ed 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -5,6 +5,7 @@
 
 #include <glib.h>
 
+#include "data.h"
 #include "step_id.h"
 #include "quad.h"
 #include "vertex3d.h"
@@ -14,7 +15,9 @@
 #include "edge3d.h"
 #include "object3d.h"
 #include "polygon.h"
-#include "data.h"
+
+#include "rtree.h"
+#include "rotate.h"
 
 #include "pcb-printf.h"
 
@@ -233,14 +236,17 @@ get_contour_coord_n_in_step_mm (PLINE *contour, int n, double *x, double *y)
 }
 
 GList *
-object3d_from_board_outline (void)
+object3d_from_contours (const POLYAREA *contours,
+                        double zbot,
+                        double ztop,
+                        const appearance *master_object_appearance,
+                        const appearance *master_top_bot_appearance)
 {
   GList *objects = NULL;
   object3d *object;
-  appearance *board_appearance;
-  appearance *top_bot_appearance;
-  POLYAREA *board_outline;
-  POLYAREA *pa;
+  appearance *object_appearance = NULL;
+  appearance *top_bot_appearance = NULL;
+  const POLYAREA *pa;
   PLINE *contour;
   PLINE *ct;
   int ncontours;
@@ -253,13 +259,11 @@ object3d_from_board_outline (void)
   int offset_in_ct;
   int ct_npoints;
 
-  board_outline = board_outline_poly (true);
-
-  if (board_outline == NULL)
+  if (contours == NULL)
     return NULL;
 
   /* Loop over all board outline pieces */
-  pa = board_outline;
+  pa = contours;
   do
     {
 
@@ -276,12 +280,20 @@ object3d_from_board_outline (void)
         }
 
       object = make_object3d (PCB->Name);
-      board_appearance = make_appearance ();
-      top_bot_appearance = make_appearance ();
-      appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
-      appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
 
-      object3d_set_appearance (object, board_appearance);
+      if (master_object_appearance != NULL)
+        {
+          object_appearance = make_appearance ();
+          appearance_set_appearance (object_appearance, master_object_appearance);
+        }
+
+      if (master_top_bot_appearance != NULL)
+        {
+          top_bot_appearance = make_appearance ();
+          appearance_set_appearance (top_bot_appearance, master_top_bot_appearance);
+        }
+
+      object3d_set_appearance (object, object_appearance);
 
       vertices = malloc (sizeof (vertex3d *) * 2 * npoints); /* (n-bottom, n-top) */
       edges    = malloc (sizeof (edge_ref  ) * 3 * npoints); /* (n-bottom, n-top, n-sides) */
@@ -306,13 +318,8 @@ object3d_from_board_outline (void)
 
           get_contour_coord_n_in_step_mm (ct, offset_in_ct, &x1, &y1);
 
-#ifdef REVERSED_PCB_CONTOURS
-          vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS)); /* Bottom */
-          vertices[npoints + i] = make_vertex3d (x1, y1, 0);                                            /* Top */
-#else
-          vertices[i]           = make_vertex3d (x1, y1,  COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS) / 2.); /* Bottom */
-          vertices[npoints + i] = make_vertex3d (x1, y1, -COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS) / 2.); /* Top */
-#endif
+          vertices[i]           = make_vertex3d (x1, y1, COORD_TO_STEP_Z (PCB, zbot)); /* Bottom */
+          vertices[npoints + i] = make_vertex3d (x1, y1, COORD_TO_STEP_Z (PCB, ztop)); /* Top */
 
           object3d_add_vertex (object, vertices[i]);
           object3d_add_vertex (object, vertices[npoints + i]);
@@ -468,18 +475,18 @@ object3d_from_board_outline (void)
 
 #ifdef REVERSED_PCB_CONTOURS
               edge_info_set_round (UNDIR_DATA (edges[i]),
-                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), COORD_TO_STEP_Z (PCB, -HACK_BOARD_THICKNESS), /* Center of circle */
+                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), COORD_TO_STEP_Z (PCB, zbot), /* Center of circle */ /* BOTTOM */
                                    0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
               edge_info_set_round (UNDIR_DATA (edges[npoints + i]),
-                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), 0., /* Center of circle */
+                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), COORD_TO_STEP_Z (PCB, ztop), /* Center of circle */ /* TOP */
                                    0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
 #else
               edge_info_set_round (UNDIR_DATA (edges[i]),
-                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy),  COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS) / 2., /* Center of circle */ /* BOTTOM */
-                                   0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
+                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), COORD_TO_STEP_Z (PCB, zbot), /* Center of circle */ /* BOTTOM */
+                                   0., 0., -1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
               edge_info_set_round (UNDIR_DATA (edges[npoints + i]),
-                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), COORD_TO_STEP_Z (PCB, -HACK_BOARD_THICKNESS) / 2. , /* Center of circle */ /* TOP */
-                                   0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
+                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), COORD_TO_STEP_Z (PCB, ztop), /* Center of circle */ /* TOP */
+                                   0., 0., -1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
 #endif
               edge_info_set_stitch (UNDIR_DATA (edges[2 * npoints + i]));
             }
@@ -581,11 +588,42 @@ object3d_from_board_outline (void)
       objects = g_list_append (objects, object);
 
     }
-  while (pa = pa->f, pa != board_outline);
+  while (pa = pa->f, pa != contours);
+
+  return objects;
+}
+
+GList *
+object3d_from_board_outline (void)
+{
+  POLYAREA *board_outline = board_outline_poly (true);
+  appearance *board_appearance;
+  appearance *top_bot_appearance;
+  GList *objects;
+
+  board_appearance = make_appearance ();
+  top_bot_appearance = make_appearance ();
+  appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
+  appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
+
+  objects = object3d_from_contours (board_outline,
+#ifdef REVERSED_PCB_CONTOURS
+                                    -HACK_BOARD_THICKNESS, /* Bottom */
+                                    0                    ,  /* Top */
+#else
+                                     HACK_BOARD_THICKNESS / 2, /* Bottom */
+                                    -HACK_BOARD_THICKNESS / 2, /* Top */
+#endif
+                                    board_appearance,
+                                    top_bot_appearance);
+
+  destroy_appearance (board_appearance);
+  destroy_appearance (top_bot_appearance);
 
   poly_Free (&board_outline);
 
   return objects;
+#endif
 }
 
 void
diff --git a/src/hid/common/object3d.h b/src/hid/common/object3d.h
index b34c7b4..cf5657f 100644
--- a/src/hid/common/object3d.h
+++ b/src/hid/common/object3d.h
@@ -15,5 +15,6 @@ void object3d_set_appearance (object3d *object, appearance *appear);
 void object3d_add_edge (object3d *object, edge_ref edge);
 void object3d_add_vertex (object3d *object, vertex3d *vertex);
 void object3d_add_face (object3d *object, face3d *face);
+GList *object3d_from_contours (const POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance);
 GList *object3d_from_board_outline (void);
 void object3d_test_board_outline (void);
diff --git a/src/hid/step/object3d_step.c b/src/hid/step/object3d_step.c
index b49caba..829221b 100644
--- a/src/hid/step/object3d_step.c
+++ b/src/hid/step/object3d_step.c
@@ -5,6 +5,8 @@
 
 #include <glib.h>
 
+#include "data.h"
+
 #include "hid/common/step_id.h"
 #include "hid/common/quad.h"
 #include "hid/common/vertex3d.h"
@@ -98,26 +100,15 @@ finish_ap214_file (step_file *step)
 }
 
 static void
-object3d_to_step_fragment (step_file *step, object3d *object, char *part_id, char *part_name, char *part_description, char *body_name,
-                           step_id *shape_definition_representation, step_id *placement_axis)
+step_product_fragment (step_file *step, char *part_id, char *part_name, char *part_description,
+                       step_id *geometric_representation_context,
+                       step_id *product_definition_shape)
 {
   step_id application_context_identifier;
   step_id product_identifier;
   step_id product_definition_identifier;
   step_id product_definition_shape_identifier;
   step_id geometric_representation_context_identifier;
-  step_id shape_representation_identifier;
-  step_id brep_identifier;
-  step_id anchor_axis_identifier;
-  step_id pcb_shell_identifier;
-  step_id brep_style_identifier;
-  step_id shape_definition_representation_identifier;
-  GList *styled_item_identifiers = NULL;
-  GList *shell_face_list = NULL;
-  GList *face_iter;
-  GList *edge_iter;
-  GList *vertex_iter;
-  GList *contour_iter;
 
   /* Setup the context of the "product" we are defining", and that it is a 'part' */
   application_context_identifier = step_application_context (step, "automotive_design");
@@ -134,6 +125,29 @@ object3d_to_step_fragment (step_file *step, object3d *object, char *part_id, cha
 
   geometric_representation_context_identifier = make_3d_metric_step_geometric_representation_context (step);
 
+  if (geometric_representation_context != NULL)
+    *geometric_representation_context = geometric_representation_context_identifier;
+
+  if (product_definition_shape != NULL)
+    *product_definition_shape = product_definition_shape_identifier;
+}
+
+static void
+object3d_to_step_body_fragment (step_file *step,
+                                object3d *object,
+                                char *body_name,
+                                step_id *brep,
+                                step_id_list *styled_item_identifiers)
+{
+  step_id brep_identifier;
+  step_id pcb_shell_identifier;
+  step_id brep_style_identifier;
+  GList *shell_face_list = NULL;
+  GList *face_iter;
+  GList *edge_iter;
+  GList *vertex_iter;
+  GList *contour_iter;
+
 #define FWD 1
 #define REV 2
 #define ORIENTED_EDGE_IDENTIFIER(e) (((edge_info *)UNDIR_DATA (e))->edge_identifier + ((e & 2) ? REV : FWD))
@@ -308,7 +322,7 @@ object3d_to_step_fragment (step_file *step, object3d *object, char *part_id, cha
   brep_style_identifier = step_styled_item (step, "NONE", presentation_style_assignments_from_appearance (step, object->appear), brep_identifier);
   step_presentation_layer_assignment (step, "1", "Layer 1", make_step_id_list (1, brep_style_identifier));
 
-  styled_item_identifiers = g_list_append (styled_item_identifiers, GINT_TO_POINTER (brep_style_identifier));
+  *styled_item_identifiers = step_id_list_append (*styled_item_identifiers, brep_style_identifier);
 
   /* Face styles */
   for (face_iter = object->faces; face_iter != NULL; face_iter = g_list_next (face_iter))
@@ -320,14 +334,34 @@ object3d_to_step_fragment (step_file *step, object3d *object, char *part_id, cha
           step_id orsi = step_over_riding_styled_item (step, "NONE",
                                                        presentation_style_assignments_from_appearance (step, face->appear),
                                                        face->face_identifier, brep_style_identifier);
-          styled_item_identifiers = g_list_append (styled_item_identifiers, GINT_TO_POINTER (orsi));
+          *styled_item_identifiers = step_id_list_append (*styled_item_identifiers, orsi);
         }
     }
-
-  /* Emit references to the styled and over_ridden styled items */
-  step_mechanical_design_geometric_presentation_representation (step, "", styled_item_identifiers, geometric_representation_context_identifier);
 #endif
 
+  if (brep != NULL)
+    *brep = brep_identifier;
+
+#undef ORIENTED_EDGE_IDENTIFIER
+#undef FWD
+#undef REV
+}
+
+
+static void
+step_absr_fragment (step_file *step,
+                    step_id_list brep_list,
+                    step_id_list styled_item_list,
+                    step_id geometric_representation_context_identifier,
+                    step_id product_definition_shape_identifier,
+                    step_id *shape_representation,
+                    step_id *shape_definition_representation,
+                    step_id *placement_axis)
+{
+  step_id shape_representation_identifier;
+  step_id anchor_axis_identifier;
+  step_id shape_definition_representation_identifier;
+
   /* Need an anchor in 3D space to orient the shape */
   anchor_axis_identifier = step_axis2_placement_3d (step, "NONE",
                                                     step_cartesian_point (step, "NONE", 0.0, 0.0, 0.0),
@@ -336,20 +370,111 @@ object3d_to_step_fragment (step_file *step, object3d *object, char *part_id, cha
 
   shape_representation_identifier =
     step_advanced_brep_shape_representation (step, "test_pcb_absr_name",
-                                             make_step_id_list (2, brep_identifier, anchor_axis_identifier), geometric_representation_context_identifier);
+                                             step_id_list_append (brep_list, anchor_axis_identifier),
+                                             geometric_representation_context_identifier);
 
   shape_definition_representation_identifier =
   step_shape_definition_representation (step, product_definition_shape_identifier, shape_representation_identifier);
 
+  /* Emit references to the styled and over_ridden styled items */
+  step_mechanical_design_geometric_presentation_representation (step, "", styled_item_list, geometric_representation_context_identifier);
+
   if (shape_definition_representation != NULL)
     *shape_definition_representation = shape_definition_representation_identifier;
 
   if (placement_axis != NULL)
     *placement_axis = anchor_axis_identifier;
+}
 
-#undef ORIENTED_EDGE_IDENTIFIER
-#undef FWD
-#undef REV
+void
+object3d_list_export_to_step_part (GList *objects, const char *filename)
+{
+  step_file *step;
+  step_id geometric_representation_context;
+  step_id product_definition_shape;
+  step_id shape_representation;
+  step_id shape_definition_representation;
+  step_id placement_axis;
+  step_id comp_brep;
+  GList *object_iter;
+  int part;
+  bool multiple_bodies;
+  GString *part_id;
+  GString *part_name;
+  step_id_list breps;
+  step_id_list styled_items;
+
+  multiple_bodies = (g_list_next (objects) != NULL);
+
+  step = start_ap214_file (filename);
+
+  part_id   = g_string_new ("part id");
+  part_name = g_string_new ("part name");
+
+  step_product_fragment (step, part_id->str, part_name->str, "PCB model",
+                         &geometric_representation_context,
+                         &product_definition_shape);
+
+  g_string_free (part_id, true);
+  g_string_free (part_name, true);
+
+  breps = make_step_id_list (0);
+  styled_items = make_step_id_list (0);
+
+  for (object_iter = objects, part = 1;
+       object_iter != NULL;
+       object_iter = g_list_next (object_iter), part++)
+    {
+
+      object3d *object = object_iter->data;
+      GString *body_name;
+
+      body_name = g_string_new ("part body");
+      if (multiple_bodies)
+        g_string_append_printf (body_name, " - %i", part);
+
+      object3d_to_step_body_fragment (step, object, body_name->str, &comp_brep, &styled_items);
+
+      g_string_free (body_name, true);
+
+      breps = step_id_list_append (breps, comp_brep);
+    }
+
+  step_absr_fragment (step,
+                      breps,
+                      styled_items,
+                      geometric_representation_context,
+                      product_definition_shape,
+                      &shape_representation,
+                      &shape_definition_representation,
+                      &placement_axis);
+
+  finish_ap214_file (step);
+}
+
+static void
+object3d_to_step_fragment (step_file *step, object3d *object, char *part_id, char *part_name, char *part_description, char *body_name,
+                           step_id *shape_definition_representation, step_id *placement_axis)
+{
+  step_id product_definition_shape_identifier;
+  step_id geometric_representation_context_identifier;
+  step_id brep_identifier;
+  GList *styled_item_identifiers = NULL;
+
+  step_product_fragment (step, part_id, part_name, part_description,
+                         &geometric_representation_context_identifier,
+                         &product_definition_shape_identifier);
+
+  object3d_to_step_body_fragment (step, object, body_name, &brep_identifier, &styled_item_identifiers);
+
+  step_absr_fragment (step,
+                      make_step_id_list (1, brep_identifier),
+                      styled_item_identifiers,
+                      geometric_representation_context_identifier,
+                      product_definition_shape_identifier,
+                      NULL /* shape_representation */,
+                      shape_definition_representation,
+                      placement_axis);
 }
 
 void
diff --git a/src/hid/step/object3d_step.h b/src/hid/step/object3d_step.h
index 5dc6f4d..2860d9b 100644
--- a/src/hid/step/object3d_step.h
+++ b/src/hid/step/object3d_step.h
@@ -1,2 +1,3 @@
+void object3d_list_export_to_step_part (GList *objects, const char *filename);
 void object3d_list_export_to_step_assy (GList *objects, const char *filename);
 void object3d_export_to_step (object3d *object, const char *filename);
