Bottom: 4e6a95179ac7447a7b71f48187c59981a50490c7
Top:    91fc28614e8a39786bdcb28210e3cc976da7e333
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-18 20:37:43 +0000

Play with icons

TODO: Draw / export a nice set of icons, and setup PCB to install them
where the GTK icon factory can find them.


---

diff --git a/src/hid/gtk/gui-icons-mode-buttons.data b/src/hid/gtk/gui-icons-mode-buttons.data
index 19e9ce8..459a3e3 100644
--- a/src/hid/gtk/gui-icons-mode-buttons.data
+++ b/src/hid/gtk/gui-icons-mode-buttons.data
@@ -1,58 +1,3 @@
-/*
- *                            COPYRIGHT
- *
- *  PCB, interactive printed circuit board design
- *  Copyright (C) 1994,1995,1996 Thomas Nau
- *
- *  This program is free software; you can redistribute it and/or modify
- *  it under the terms of the GNU General Public License as published by
- *  the Free Software Foundation; either version 2 of the License, or
- *  (at your option) any later version.
- *
- *  This program is distributed in the hope that it will be useful,
- *  but WITHOUT ANY WARRANTY; without even the implied warranty of
- *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- *  GNU General Public License for more details.
- *
- *  You should have received a copy of the GNU General Public License
- *  along with this program; if not, write to the Free Software
- *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
- *
- */
-
-/* XPM */
-static char *arc[] = {
-/* columns rows colors chars-per-pixel */
-"21 21 4 1",
-"  c black",
-". c #4E85b7",
-"X c gray100",
-"o c None",
-/* pixels */
-"ooooo.ooooooooooooooo",
-"ooooo.ooooooooooooooo",
-"ooooo.ooooooooooooooo",
-"ooooo.ooooooooooooooo",
-"oooooo.oooooooooooooo",
-"oooooo.oooooooooooooo",
-"ooooooo.ooooooooooooo",
-"ooooooo..oooooooooooo",
-"oooooooo..ooooooooooo",
-"oooooooooo..ooooooooo",
-"oooooooooooo....ooooo",
-"ooooooooooooooooooooo",
-"ooo oooo    oooo   oo",
-"oo o ooo ooo oo ooo o",
-"oo o ooo ooo oo ooo o",
-"o ooo oo    ooo ooooo",
-"o     oo  ooooo ooooo",
-"o ooo oo o oooo ooooo",
-"o ooo oo oo ooo ooo o",
-"o ooo oo ooo ooo   oo",
-"ooooooooooooooooooooo"
-};
-
-
 /* XPM */
 static char *buf[] = {
 /* columns rows colors chars-per-pixel */
@@ -84,8 +29,6 @@ static char *buf[] = {
 "oo     ooo   oo ooooo",
 "ooooooooooooooooooooo"
 };
-
-
 /* XPM */
 static char *del[] = {
 /* columns rows colors chars-per-pixel */
@@ -116,8 +59,6 @@ static char *del[] = {
 "XXX XXX X XXXXX XXXXX",
 "XX     XX     X     X"
 };
-
-
 /* XPM */
 static char *ins[] = {
 /* columns rows colors chars-per-pixel */
@@ -149,8 +90,6 @@ static char *ins[] = {
 "oooo oo ooo ooooo ooo",
 "ooo   o ooo o    oooo"
 };
-
-
 /* XPM */
 static char *line[] = {
 /* columns rows colors chars-per-pixel */
@@ -183,8 +122,6 @@ static char *line[] = {
 "    O   O OOOO O    O",
 "OOOOOOOOOOOOOOOOOOOOO"
 };
-
-
 /* XPM */
 static char *lock[] = {
 /* columns rows colors chars-per-pixel */
@@ -215,8 +152,6 @@ static char *lock[] = {
 "XX XXX XX X XXX XX XX",
 "XX   XX  XXX  X XX XX"
 };
-
-#if 0
 /* XPM */
 static char *pan[] = {
 /* columns rows colors chars-per-pixel */
@@ -247,8 +182,105 @@ static char *pan[] = {
 "XXXX XXXX XX X XX  XX",
 "XXXX XXXX XX X XXX XX"
 };
-
-#endif
+/* XPM */
+static char * arc[] = {
+"22 22 47 1",
+" 	c None",
+".	c #5D8BB4",
+"+	c #5884AC",
+"@	c #000000",
+"#	c #699DCD",
+"$	c #6394C1",
+"%	c #6191BC",
+"&	c #6CA2D4",
+"*	c #6090BB",
+"=	c #6EA5D7",
+"-	c #5E8EBA",
+";	c #5782A9",
+">	c #5B88B2",
+",	c #5E8CB7",
+"'	c #6DA3D4",
+")	c #6395C1",
+"!	c #5F8FBB",
+"~	c #547DA2",
+"{	c #5C89B3",
+"]	c #6190BB",
+"^	c #6496C2",
+"/	c #5781A8",
+"(	c #5480A7",
+"_	c #689DCC",
+":	c #5D8BB6",
+"<	c #6496C3",
+"[	c #6292C0",
+"}	c #6091BC",
+"|	c #6598C6",
+"1	c #6597C4",
+"2	c #6192BD",
+"3	c #5783AA",
+"4	c #5C8BB4",
+"5	c #6EA4D6",
+"6	c #6294C0",
+"7	c #5580A7",
+"8	c #6394C0",
+"9	c #679BCA",
+"0	c #5D8CB8",
+"a	c #5A86AF",
+"b	c #547EA3",
+"c	c #5886AD",
+"d	c #5E8EB9",
+"e	c #5986AE",
+"f	c #5985AD",
+"g	c #5E8DB8",
+"h	c #5F90BA",
+"                      ",
+"                      ",
+" .+  @   @   @   @    ",
+" #$                   ",
+" %&                @  ",
+" *=                   ",
+" -=;                  ",
+" >=,                  ",
+"  ')               @  ",
+"  !=~                 ",
+"  {=]                 ",
+"   ^=/                ",
+"   (=_             @  ",
+"    :=<               ",
+"     [=}              ",
+"      |=1             ",
+"       2=_3        @  ",
+"        45=67         ",
+"          8==90ab     ",
+"           cd#===='e  ",
+"              fgh]*+  ",
+"                      "};
+/* XPM */
+static char * polyhole[] = {
+"21 21 3 1",
+" 	c None",
+".	c #6EA5D7",
+"+	c #000000",
+"        ..           ",
+"       ...           ",
+"      .....          ",
+"     .......         ",
+"    .........        ",
+"  ....+++++...       ",
+"  ....+   +....      ",
+"  ...+    +.....     ",
+"  ...++++++......    ",
+"  ................   ",
+"  .................  ",
+"                     ",
+"  +  +  ++  +   +++  ",
+"  +  + +  + +   +    ",
+"  +  + +  + +   +    ",
+"  ++++ +  + +   +++  ",
+"  +  + +  + +   +    ",
+"  +  + +  + +   +    ",
+"  +  + +  + +   +    ",
+"  +  +  ++  +++ +++  ",
+"                     "};
 /* XPM */
 static char *poly[] = {
 /* columns rows colors chars-per-pixel */
@@ -280,36 +312,6 @@ static char *poly[] = {
 "o oooooo   oo    o oo",
 "ooooooooooooooooooooo"
 };
-
-/* XPM */
-static char * polyhole[] = {
-"21 21 3 1",
-" 	c None",
-".	c #6EA5D7",
-"+	c #000000",
-"        ..           ",
-"       ...           ",
-"      .....          ",
-"     .......         ",
-"    .........        ",
-"  ....+++++...       ",
-"  ....+   +....      ",
-"  ...+    +.....     ",
-"  ...++++++......    ",
-"  ................   ",
-"  .................  ",
-"                     ",
-"  +  +  ++  +   +++  ",
-"  +  + +  + +   +    ",
-"  +  + +  + +   +    ",
-"  ++++ +  + +   +++  ",
-"  +  + +  + +   +    ",
-"  +  + +  + +   +    ",
-"  +  + +  + +   +    ",
-"  +  +  ++  +++ +++  ",
-"                     "
-};
-
 /* XPM */
 static char *rect[] = {
 /* columns rows colors chars-per-pixel */
@@ -341,8 +343,6 @@ static char *rect[] = {
 "o oo o    oo  oooo oo",
 "ooooooooooooooooooooo"
 };
-
-
 /* XPM */
 static char *rot[] = {
 /* columns rows colors chars-per-pixel */
@@ -374,8 +374,6 @@ static char *rot[] = {
 "ooo oo  o ooo ooo ooo",
 "ooo ooo oo   oooo ooo"
 };
-
-
 /* XPM */
 static char *sel[] = {
 /* columns rows colors chars-per-pixel */
@@ -407,8 +405,6 @@ static char *sel[] = {
 "oo ooo o ooooo oooooo",
 "ooo   oo     o     oo"
 };
-
-
 /* XPM */
 static char *text[] = {
 /* columns rows colors chars-per-pixel */
@@ -440,8 +436,6 @@ static char *text[] = {
 "oo ooo   o ooo ooo oo",
 "ooooooooooooooooooooo"
 };
-
-
 /* XPM */
 static char *thrm[] = {
 /* columns rows colors chars-per-pixel */
@@ -473,8 +467,6 @@ static char *thrm[] = {
 "oo ooo oo o oo o ooo ",
 "oo ooo oo o oo o ooo "
 };
-
-
 /* XPM */
 static char *via[] = {
 /* columns rows colors chars-per-pixel */
diff --git a/src/hid/gtk/gui-top-window.c b/src/hid/gtk/gui-top-window.c
index 316cb55..32708ad 100644
--- a/src/hid/gtk/gui-top-window.c
+++ b/src/hid/gtk/gui-top-window.c
@@ -114,7 +114,6 @@ a zoom in/out.
 #include "vendor.h"
 #include "free_atexit.h"
 
-#include "gui-icons-mode-buttons.data"
 #include "gui-icons-misc.data"
 #include "gui-trackball.h"
 #include "snavi.h"
@@ -957,41 +956,26 @@ typedef struct
   guint toolbar_button_cb_id;
   gchar *name;
   gint mode;
-  gchar **xpm;
   gchar *tooltip;
 }
 ModeButton;
 
 
 static ModeButton mode_buttons[] = {
-  {NULL, NULL, 0, 0, N_("via"), VIA_MODE, via,
-    N_("create vias with <select mouse button>")},
-  {NULL, NULL, 0, 0, N_("line"), LINE_MODE, line,
-    N_("create a line segment, toggle draw modes with '/' or '.'")},
-  {NULL, NULL, 0, 0, N_("arc"), ARC_MODE, arc,
-    N_("create an arc segment")},
-  {NULL, NULL, 0, 0, N_("text"), TEXT_MODE, text,
-    N_("create a text")},
-  {NULL, NULL, 0, 0, N_("rectangle"), RECTANGLE_MODE, rect,
-    N_("create a filled rectangle")},
-  {NULL, NULL, 0, 0, N_("polygon"), POLYGON_MODE, poly,
-    N_("create a polygon, <shift>-P for closing the polygon")},
-  {NULL, NULL, 0, 0, N_("polygonhole"), POLYGONHOLE_MODE, polyhole,
-    N_("create a hole into an existing polygon")},
-  {NULL, NULL, 0, 0, N_("buffer"), PASTEBUFFER_MODE, buf,
-    N_("paste the selection from buffer into the layout")},
-  {NULL, NULL, 0, 0, N_("remove"), REMOVE_MODE, del,
-    N_("remove objects under the cursor")},
-  {NULL, NULL, 0, 0, N_("rotate"), ROTATE_MODE, rot,
-    N_("rotate a selection or object CCW, hold the <shift> key to rotate CW")},
-  {NULL, NULL, 0, 0, N_("insertPoint"), INSERTPOINT_MODE, ins,
-    N_("add points into existing lines and polygons")},
-  {NULL, NULL, 0, 0, N_("thermal"), THERMAL_MODE, thrm,
-    N_("create thermals with <select mouse button>, toggle thermal style with <Shift> <select mouse button>")},
-  {NULL, NULL, 0, 0, N_("select"), ARROW_MODE, sel,
-    N_("select, deselect or move objects or selections")},
-  {NULL, NULL, 0, 0, N_("lock"), LOCK_MODE, lock,
-    N_("lock or unlock an object")}
+  {NULL, NULL, 0, 0, N_("via"),         VIA_MODE,         N_("create vias with <select mouse button>")},
+  {NULL, NULL, 0, 0, N_("line"),        LINE_MODE,        N_("create a line segment, toggle draw modes with '/' or '.'")},
+  {NULL, NULL, 0, 0, N_("arc"),         ARC_MODE,         N_("create an arc segment")},
+  {NULL, NULL, 0, 0, N_("text"),        TEXT_MODE,        N_("create a text")},
+  {NULL, NULL, 0, 0, N_("rectangle"),   RECTANGLE_MODE,   N_("create a filled rectangle")},
+  {NULL, NULL, 0, 0, N_("polygon"),     POLYGON_MODE,     N_("create a polygon, <shift>-P for closing the polygon")},
+  {NULL, NULL, 0, 0, N_("polygonhole"), POLYGONHOLE_MODE, N_("create a hole into an existing polygon")},
+  {NULL, NULL, 0, 0, N_("buffer"),      PASTEBUFFER_MODE, N_("paste the selection from buffer into the layout")},
+  {NULL, NULL, 0, 0, N_("remove"),      REMOVE_MODE,      N_("remove objects under the cursor")},
+  {NULL, NULL, 0, 0, N_("rotate"),      ROTATE_MODE,      N_("rotate a selection or object CCW, hold the <shift> key to rotate CW")},
+  {NULL, NULL, 0, 0, N_("insertPoint"), INSERTPOINT_MODE, N_("add points into existing lines and polygons")},
+  {NULL, NULL, 0, 0, N_("thermal"),     THERMAL_MODE,     N_("create thermals with <select mouse button>, toggle thermal style with <Shift> <select mouse button>")},
+  {NULL, NULL, 0, 0, N_("select"),      ARROW_MODE,       N_("select, deselect or move objects or selections")},
+  {NULL, NULL, 0, 0, N_("lock"),        LOCK_MODE,        N_("lock or unlock an object")}
 };
 
 static gint n_mode_buttons = G_N_ELEMENTS (mode_buttons);
@@ -1081,10 +1065,10 @@ make_mode_buttons_and_toolbar (GtkWidget **mode_frame,
   GtkToolItem *tool_item;
   GtkWidget *vbox, *hbox = NULL;
   GtkWidget *image;
-  GdkPixbuf *pixbuf;
   GSList *group = NULL;
   GSList *toolbar_group = NULL;
   ModeButton *mb;
+  char *icon_name;
   int i;
 
   *mode_toolbar = gtk_toolbar_new ();
@@ -1124,15 +1108,88 @@ make_mode_buttons_and_toolbar (GtkWidget **mode_frame,
       gtk_container_add (GTK_CONTAINER (tool_item), mb->toolbar_button);
       gtk_toolbar_insert (GTK_TOOLBAR (*mode_toolbar), tool_item, -1);
 
+#if 1
+      do {
+        GtkIconFactory *icon_factory;
+        GtkIconSet *icon_set;
+        GdkPixbuf *pixbuf;
+        GError *error = NULL;
+
+        icon_factory = gtk_icon_factory_new ();
+        gtk_icon_factory_add_default (icon_factory);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-arc.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-arc", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-buf.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-buffer", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-del.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-remove", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-ins.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-insertPoint", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-line.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-line", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-lock.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-lock", icon_set);
+
+//        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-pan.png", &error);
+//        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+//        gtk_icon_factory_add (icon_factory, "pcb-tool-pan", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-polyhole.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-polygonhole", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-poly.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-polygon", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-rect.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-rectangle", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-rot.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-rotate", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-sel.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-select", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-text.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-text", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-thrm.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-thermal", icon_set);
+
+        pixbuf = gdk_pixbuf_new_from_file ("/home/pcjc2/gedasrc/pcb/git/src/hid/gtk/icons/pcb-tool-via.png", &error);
+        icon_set = gtk_icon_set_new_from_pixbuf (pixbuf);
+        gtk_icon_factory_add (icon_factory, "pcb-tool-via", icon_set);
+
+      } while (0);
+#endif
+
       /* Load the image for the button, create GtkImage widgets for both
        * the grid button and the toolbar button, then pack into the buttons
        */
-      pixbuf = gdk_pixbuf_new_from_xpm_data ((const char **) mb->xpm);
-      image = gtk_image_new_from_pixbuf (pixbuf);
+      icon_name = g_strdup_printf ("pcb-tool-%s", mb->name);
+      image = gtk_image_new_from_stock (icon_name, GTK_ICON_SIZE_LARGE_TOOLBAR);
       gtk_container_add (GTK_CONTAINER (mb->button), image);
-      image = gtk_image_new_from_pixbuf (pixbuf);
+      image = gtk_image_new_from_stock (icon_name, GTK_ICON_SIZE_LARGE_TOOLBAR);
       gtk_container_add (GTK_CONTAINER (mb->toolbar_button), image);
-      g_object_unref (pixbuf);
+      g_free (icon_name);
 
       if (strcmp (mb->name, "select") == 0)
         {
@@ -1146,6 +1203,7 @@ make_mode_buttons_and_toolbar (GtkWidget **mode_frame,
       mb->toolbar_button_cb_id =
         g_signal_connect (mb->toolbar_button, "toggled",
                           G_CALLBACK (mode_toolbar_button_toggled_cb), mb);
+
     }
 }
