Bottom: 0cd0db5dd61ca81886c3c80c68803cceac1ced98
Top:    61f2ff8f275b4013bb1d309bf3a78ec10155a1bb
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 20:31:12 +0000

Apply modulo arithmetic when computing angles, so output stays user-friendly (and bounded)


---

diff --git a/src/buffer.c b/src/buffer.c
index c03c5d5..a359076 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -1315,6 +1315,7 @@ FreeRotateElementLowLevel (DataType *Data, ElementType *Element,
   /* XXX: Should parse a unit suffix, e.g. "degrees" */
   parse_numeric_attribute (Element, "PCB::rotation", &rotation);
   rotation += angle;
+  rotation = fmod (rotation, 360.L);
   value = g_strdup_printf ("%f degrees", rotation);
   AttributePutToList (&Element->Attributes, "PCB::rotation", value, true);
   g_free (value);
diff --git a/src/rotate.c b/src/rotate.c
index d477d79..789ff81 100644
--- a/src/rotate.c
+++ b/src/rotate.c
@@ -273,6 +273,7 @@ RotateElementLowLevel (DataType *Data, ElementType *Element,
   /* XXX: Should parse a unit suffix, e.g. "degrees" */
   parse_numeric_attribute (Element, "PCB::rotation", &rotation);
   rotation += Number * 90.;
+  rotation = fmod (rotation, 360.L);
   value = g_strdup_printf ("%f degrees", rotation);
   AttributePutToList (&Element->Attributes, "PCB::rotation", value, true);
   g_free (value);
