Bottom: 83d84a1a5b90b69f623b0b59c3ea26b8a395a421
Top:    bae9096f8c2b0b65c6449c976560f2261e7912ef
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-13 19:38:31 +0000

Allocate VNODE with g_slice_new0, rather than calloc

g_slice should be optimised for lots of small allocations - lets try this..


---

diff --git a/src/polygon1.c b/src/polygon1.c
index 75f1e7d..a9ebe9b 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -203,10 +203,10 @@ poly_CreateNodeFull (Vector v, bool is_round, double cx, double cy, double radiu
   Coord *c;
 
   assert (v);
-  res = (VNODE *) calloc (1, sizeof (VNODE));
+//  res = (VNODE *) calloc (1, sizeof (VNODE));
+  res = g_slice_new0 (VNODE);
   if (res == NULL)
     return NULL;
-  // bzero (res, sizeof (VNODE) - sizeof(Vector));
 
 #if 0
   if (is_round)
@@ -391,6 +391,7 @@ new_descriptor (VNODE * a, char poly, char side)
                 PREV_VERTEX (a)->cvc_prev = PREV_VERTEX (a)->cvc_next = NULL;
               poly_ExclVertex (PREV_VERTEX (a));
               vect_sub (v, PREV_VERTEX (a)->point, a->point);
+#warning DOES THIS LEAK A VERTEX?
             }
           else
             {
@@ -398,6 +399,7 @@ new_descriptor (VNODE * a, char poly, char side)
                 NEXT_VERTEX (a)->cvc_prev = NEXT_VERTEX (a)->cvc_next = NULL;
               poly_ExclVertex (NEXT_VERTEX (a));
               vect_sub (v, NEXT_VERTEX (a)->point, a->point);
+#warning DOES THIS LEAK A VERTEX?
             }
         }
 
@@ -3646,7 +3648,8 @@ poly_NewContour (VNODE *node)
   res->head.radius = node->radius;
 #warning THIS WILL BE BOGUS IF WE GET A CIRCULAR CONTOUR STARTING AT THE HEAD.. NEED 2ND POINT TO DETMERMINE BOUNDS
   cntrbox_adjust (res, res->head.point);
-  free (node);
+  g_slice_free (VNODE, node);
+//  free (node);
 
   return res;
 }
@@ -3660,7 +3663,8 @@ poly_ClrContour (PLINE * c)
   while ((cur = NEXT_EDGE (&c->head)) != &c->head)
     {
       poly_ExclVertex (cur);
-      free (cur);
+      g_slice_free (VNODE, cur);
+//      free (cur);
     }
   free (c->tristrip_vertices);
   c->tristrip_vertices = NULL;
@@ -3683,7 +3687,8 @@ poly_DelContour (PLINE ** c)
 	  free (cur->cvc_next);
 	  free (cur->cvc_prev);
 	}
-      free (cur);
+      g_slice_free (VNODE, cur);
+//      free (cur);
     }
   if ((*c)->head.cvc_next != NULL)
     {
@@ -3727,7 +3732,8 @@ poly_PreContour (PLINE * C, BOOLp optimize)
           if (0)
 	    {
 	      poly_ExclVertex (c);
-	      free (c);
+	      g_slice_free (VNODE, c);
+//	      free (c);
 	      c = p;
 	    }
 	}
@@ -4015,7 +4021,8 @@ poly_InclVertex (VNODE * after, VNODE * node)
       VNODE *t = PREV_VERTEX (node);
       NEXT_VERTEX (PREV_VERTEX (t)) = node;
       PREV_VERTEX (node) = PREV_VERTEX (t);
-      free (t);
+      g_slice_free (VNODE, t);
+      //free (t);
     }
 }
