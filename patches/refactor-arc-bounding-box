Bottom: 58ad1cb2a8ae747c81e8e2a4a810982c81017ddb
Top:    c17e26d6fc5e5d0430915fd5d9eca2c986f96291
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-17 20:03:31 +0000

Refactor arc bounding box calculations to separate out thin case

The thin-arc case will be useful for arc-segments within polycurves.


---

diff --git a/src/buffer.c b/src/buffer.c
index 4f98732..5de6542 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -1457,6 +1457,7 @@ MirrorBuffer (BufferType *Buffer)
     arc->Y = SWAP_Y (arc->Y);
     arc->StartAngle = SWAP_ANGLE (arc->StartAngle);
     arc->Delta = SWAP_DELTA (arc->Delta);
+    SetArcEndpoints (arc);
     SetArcBoundingBox (arc);
   }
   ENDALL_LOOP;
@@ -1522,6 +1523,7 @@ SwapBuffer (BufferType *Buffer)
     arc->Y = SWAP_Y (arc->Y);
     arc->StartAngle = SWAP_ANGLE (arc->StartAngle);
     arc->Delta = SWAP_DELTA (arc->Delta);
+    SetArcEndpoints (arc);
     SetArcBoundingBox (arc);
     r_insert_entry (layer->arc_tree, (BoxType *)arc, 0);
   }
diff --git a/src/create.c b/src/create.c
index 95044e8..51435f4 100644
--- a/src/create.c
+++ b/src/create.c
@@ -579,6 +579,7 @@ CreateNewArcOnLayer (LayerType *Layer,
   Arc->Height = height;
   Arc->StartAngle = sa;
   Arc->Delta = dir;
+  SetArcEndpoints (Arc);
   SetArcBoundingBox (Arc);
   if (!Layer->arc_tree)
     Layer->arc_tree = r_create_tree (NULL, 0, 0);
diff --git a/src/misc.c b/src/misc.c
index 545aaac..0cab234 100644
--- a/src/misc.c
+++ b/src/misc.c
@@ -78,6 +78,8 @@
 #include <dmalloc.h>
 #endif
 
+#define EPSILON (1e-8)
+
 /*	forward declarations	*/
 static char *BumpName (char *);
 static void GetGridLockCoordinates (int, void *, void *, void *,
@@ -1565,33 +1567,35 @@ GetObjectBoundingBox (int Type, void *Ptr1, void *Ptr2, void *Ptr3)
 /* ---------------------------------------------------------------------------
  * computes the bounding box of an arc
  */
-void
-SetArcBoundingBox (ArcType *Arc)
+BoxType
+calc_thin_arc_bounds (Coord cx, Coord cy, Coord rx, Coord ry, Angle start_angle, Angle delta_angle)
 {
+  BoxType bound;
   double ca1, ca2, sa1, sa2;
   double minx, maxx, miny, maxy;
   Angle ang1, ang2;
-  Coord width;
 
   /* first put angles into standard form:
    *  ang1 < ang2, both angles between 0 and 720 */
-  Arc->Delta = CLAMP (Arc->Delta, -360, 360);
+  delta_angle = CLAMP (delta_angle, -360, 360);
 
-  if (Arc->Delta > 0)
+  if (delta_angle > 0)
     {
-      ang1 = NormalizeAngle (Arc->StartAngle);
-      ang2 = NormalizeAngle (Arc->StartAngle + Arc->Delta);
+      ang1 = NormalizeAngle (start_angle);
+      ang2 = NormalizeAngle (start_angle + delta_angle);
     }
   else
     {
-      ang1 = NormalizeAngle (Arc->StartAngle + Arc->Delta);
-      ang2 = NormalizeAngle (Arc->StartAngle);
+      ang1 = NormalizeAngle (start_angle + delta_angle);
+      ang2 = NormalizeAngle (start_angle);
     }
   if (ang1 > ang2)
-    ang2 += 360;
+    ang2 += 360.;
+
   /* Make sure full circles aren't treated as zero-length arcs */
-  if (Arc->Delta == 360 || Arc->Delta == -360)
-    ang2 = ang1 + 360;
+  if (fabs (delta_angle - 360.) < EPSILON ||
+      fabs (delta_angle + 360.) < EPSILON);
+    ang2 = ang1 + 360.;
 
   /* calculate sines, cosines */
   sa1 = sin (M180 * ang1);
@@ -1599,10 +1603,10 @@ SetArcBoundingBox (ArcType *Arc)
   sa2 = sin (M180 * ang2);
   ca2 = cos (M180 * ang2);
 
-  minx = MIN (ca1, ca2);
-  maxx = MAX (ca1, ca2);
-  miny = MIN (sa1, sa2);
-  maxy = MAX (sa1, sa2);
+  bound.X1 = MIN (ca1, ca2);
+  bound.X2 = MAX (ca1, ca2);
+  bound.Y1 = MIN (sa1, sa2);
+  bound.Y2 = MAX (sa1, sa2);
 
   /* Check for extreme angles */
   if ((ang1 <= 0   && ang2 >= 0)   || (ang1 <= 360 && ang2 >= 360)) maxx = 1;
@@ -1611,11 +1615,26 @@ SetArcBoundingBox (ArcType *Arc)
   if ((ang1 <= 270 && ang2 >= 270) || (ang1 <= 630 && ang2 >= 630)) miny = -1;
 
   /* Finally, calcate bounds, converting sane geometry into pcb geometry */
-  Arc->BoundingBox.X1 = Arc->X - Arc->Width * maxx;
-  Arc->BoundingBox.X2 = Arc->X - Arc->Width * minx;
-  Arc->BoundingBox.Y1 = Arc->Y + Arc->Height * miny;
-  Arc->BoundingBox.Y2 = Arc->Y + Arc->Height * maxy;
+  bound.X1 = cx - rx * maxx;
+  bound.X2 = cx - rx * minx;
+  bound.Y1 = cy + ry * miny;
+  bound.Y2 = cy + ry * maxy;
+  close_box (&bound);
+
+  return bound;
+}
+
+/* ---------------------------------------------------------------------------
+ * computes the bounding box of an arc
+ */
+void
+SetArcBoundingBox (ArcType *Arc)
+{
+  Coord width;
+
+  Arc->BoundingBox = calc_thin_arc_bounds (Arc->X, Arc->Y, Arc->Width, Arc->Height, Arc->StartAngle, Arc->Delta);
 
+  /* Now add the additional thickness of the arc */
   width = (Arc->Thickness + Arc->Clearance) / 2;
 
   /* Adjust for our discrete polygon approximation */
@@ -1626,12 +1645,36 @@ SetArcBoundingBox (ArcType *Arc)
   Arc->BoundingBox.Y1 -= width;
   Arc->BoundingBox.Y2 += width;
   close_box(&Arc->BoundingBox);
+}
+
+/* ---------------------------------------------------------------------------
+ * computes the endpoints an arc
+ */
+void
+SetArcEndpoints (ArcType *Arc)
+{
+  Angle ang1, ang2;
+
+  /* first put angles into standard form:
+   *  ang1 < ang2, both angles between 0 and 720 */
+  Arc->Delta = CLAMP (Arc->Delta, -360, 360);
+
+  if (Arc->Delta > 0)
+    {
+      ang1 = Arc->StartAngle;
+      ang2 = Arc->StartAngle + Arc->Delta;
+    }
+  else
+    {
+      ang1 = Arc->StartAngle + Arc->Delta;
+      ang2 = Arc->StartAngle;
+    }
 
   /* Update the arc end-points */
-  Arc->Point1.X = Arc->X - (double)Arc->Width  * ca1;
-  Arc->Point1.Y = Arc->Y + (double)Arc->Height * sa1;
-  Arc->Point2.X = Arc->X - (double)Arc->Width  * ca2;
-  Arc->Point2.Y = Arc->Y + (double)Arc->Height * sa2;
+  Arc->Point1.X = Arc->X - (double)Arc->Width  * cos (M180 * ang1);
+  Arc->Point1.Y = Arc->Y + (double)Arc->Height * sin (M180 * ang1);
+  Arc->Point2.X = Arc->X - (double)Arc->Width  * cos (M180 * ang2);
+  Arc->Point2.Y = Arc->Y + (double)Arc->Height * sin (M180 * ang2);
 }
 
 /* ---------------------------------------------------------------------------
diff --git a/src/misc.h b/src/misc.h
index 85178db..860cfa7 100644
--- a/src/misc.h
+++ b/src/misc.h
@@ -47,7 +47,9 @@ Angle  NormalizeAngle (Angle a);
 
 void r_delete_element (DataType *, ElementType *);
 void SetLineBoundingBox (LineType *);
+BoxType calc_thin_arc_bounds (Coord cx, Coord cy, Coord rx, Coord ry, Angle start_angle, Angle delta_angle);
 void SetArcBoundingBox (ArcType *);
+void SetArcEndpoints (ArcType *);
 void SetPointBoundingBox (PointType *);
 void SetPinBoundingBox (PinType *);
 void SetPadBoundingBox (PadType *);
diff --git a/src/undo.c b/src/undo.c
index ca41c74..085fde6 100644
--- a/src/undo.c
+++ b/src/undo.c
@@ -394,6 +394,7 @@ UndoChangeAngles (UndoListType *Entry)
 	EraseObject (type, Layer, a);
       a->StartAngle = Entry->Data.Move.DX;
       a->Delta = Entry->Data.Move.DY;
+      SetArcEndpoints (a);
       SetArcBoundingBox (a);
       r_insert_entry (Layer->arc_tree, (BoxType *) a, 0);
       Entry->Data.Move.DX = old_sa;
