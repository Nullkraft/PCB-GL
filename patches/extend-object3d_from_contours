Bottom: dd9271c25558beeddf1e74cd7755290f3ed67080
Top:    eb57c7503a80717e9e8a8a7828deb19849a6ac4c
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-06 00:53:36 +0000

Extend object3d_from_contours() to have an option to produce an inverted shell contour

This will be useful when extruding voids within objects during 3D export.


---

diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index e252ff1..0f8efa2 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -329,7 +329,8 @@ object3d_from_contours (const POLYAREA *contours,
                         double zbot,
                         double ztop,
                         const appearance *master_object_appearance,
-                        const appearance *master_top_bot_appearance)
+                        const appearance *master_top_bot_appearance,
+                        bool extrude_inverted)
 {
   GList *objects = NULL;
   object3d *object;
@@ -352,9 +353,9 @@ object3d_from_contours (const POLYAREA *contours,
   double nx, ny;
 
 #ifdef REVERSED_PCB_CONTOURS
-  invert_face_normals = true;
+  invert_face_normals = extrude_inverted ? false : true;
 #else
-  invert_face_normals = false;
+  invert_face_normals = extrude_inverted ? true : false;
 #endif
 
   if (contours == NULL)
@@ -438,7 +439,10 @@ object3d_from_contours (const POLYAREA *contours,
 
           object3d_add_face (object, faces[i]);
           /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
-          face3d_add_contour (faces[i], make_contour3d (edges[2 * npoints + i]));
+          if (!extrude_inverted)
+            face3d_add_contour (faces[i], make_contour3d (edges[2 * npoints + i]));
+          else
+            face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
         }
 
       faces[npoints    ] = make_face3d (); /* bottom_face */
@@ -459,8 +463,16 @@ object3d_from_contours (const POLYAREA *contours,
       object3d_add_face (object, faces[npoints + 1]);
 
       /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
-      face3d_add_contour (faces[npoints    ], make_contour3d (edges[0]));
-      face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(edges[npoints])));
+      if (!extrude_inverted)
+        {
+          face3d_add_contour (faces[npoints    ], make_contour3d (edges[0]));
+          face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(edges[npoints])));
+        }
+      else
+        {
+          face3d_add_contour (faces[npoints    ], make_contour3d (SYM(edges[0])));
+          face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints]));
+        }
 
       ct = contour;
       start_of_ct = 0;
@@ -481,8 +493,17 @@ object3d_from_contours (const POLYAREA *contours,
               ct_npoints = get_contour_npoints (ct);
 
               /* If there is more than one contour, it will be an inner contour of the bottom and top faces. Refer to it here */
-              face3d_add_contour (faces[npoints    ], make_contour3d (edges[i]));
-              face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(edges[npoints + i])));
+              /* XXX: Haven't properly thought through how (if) inverting works with multiple contours */
+              if (!extrude_inverted)
+                {
+                  face3d_add_contour (faces[npoints    ], make_contour3d (edges[i]));
+                  face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(edges[npoints + i])));
+                }
+              else
+                {
+                  face3d_add_contour (faces[npoints    ], make_contour3d (SYM(edges[i])));
+                  face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints + i]));
+                }
             }
 
           next_i_around_ct = start_of_ct + (offset_in_ct + 1) % ct_npoints;
@@ -524,17 +545,26 @@ object3d_from_contours (const POLYAREA *contours,
 
               get_contour_edge_n_round_geometry_in_step_mm (ct, offset_in_ct, &cx, &cy, &radius, &cw);
 
+              /* NOTE: Axis directon not depend on whether we invert the top/bot contour.. the edge loop is appropriate already */
               face3d_set_cylindrical (faces[i], cx, cy, 0., /* A point on the axis of the cylinder */
                                                 0., 0., 1., /* Direction of the cylindrical axis */ /* XXX HAD THIS AT -1 when last testing with Solidworks? */
                                                 radius);
 
-              /* XXX: DEPENDS ON INSIDE / OUTSIDE CORNER!! */
-              if (ct->Flags.orient == PLF_INV)
+              /* NOTE: Surface orientation is only fixed up during emission if we flag the need here..
+               *       cylindrical surface orientation is always pointing outward from its axis, so
+               *       orientation reversed is used for holes
+               */
+              /* XXX: DEPENDS ON INSIDE / OUTSIDE CORNER!! - THIS IS NOT EXACTLY CORRECT!.. NEEDS TO TAKE ACOUNT FOR cw / ccw WHEN DEALING WITH ARC CONTOUR SEGMENTS */
+              if ((ct->Flags.orient == PLF_INV) != extrude_inverted)
                 face3d_set_surface_orientation_reversed (faces[i]);
 
               face3d_set_normal (faces[i], 1., 0., 0.);  /* A normal to the axis direction */
                                         /* XXX: ^^^ Could line this up with the direction to the vertex in the corresponding circle edge */
 
+              /* DOES NOT DEPEND ON WHETHER WE INVERT THE CONTOUR.. THE EDGE TRAVERSAL IS REVERSED DURING EMISSION.
+               * Only depends on the coordinate system transform, and what Z values it requires to create a
+               * clockwise / counterclockwise circular edge consistent with the the polygon data.
+               */
 #ifdef REVERSED_PCB_CONTOURS
               normal_z = cw ? 1. : -1.; /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
 #else
@@ -557,19 +587,38 @@ object3d_from_contours (const POLYAREA *contours,
            *     edges[2*npoints-3*npoints-1] are the upright edges, oriented from bottom to top
            */
 
-          RDATA (edges[              i]) = faces[i];
-          LDATA (edges[              i]) = faces[npoints];
-          RDATA (edges[1 * npoints + i]) = faces[npoints + 1];
-          LDATA (edges[1 * npoints + i]) = faces[i];
-          RDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
-          LDATA (edges[2 * npoints + i]) = faces[i];
-
-          /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
-          splice (SYM(edges[prev_i_around_ct]), edges[2 * npoints + i]);
-          splice (edges[2 * npoints + i], edges[i]);
-          /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
-          splice (edges[npoints + i], SYM(edges[2 * npoints + i]));
-          splice (SYM(edges[2 * npoints + i]), SYM(edges[npoints + prev_i_around_ct]));
+          if (extrude_inverted)
+            {
+              LDATA (edges[              i]) = faces[i];
+              RDATA (edges[              i]) = faces[npoints];
+              LDATA (edges[1 * npoints + i]) = faces[npoints + 1];
+              RDATA (edges[1 * npoints + i]) = faces[i];
+              LDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
+              RDATA (edges[2 * npoints + i]) = faces[i];
+
+              /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
+              splice (SYM(edges[prev_i_around_ct]), edges[i]);
+              splice (edges[i], edges[2 * npoints + i]);
+              /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
+              splice (edges[npoints + i], SYM(edges[npoints + prev_i_around_ct]));
+              splice (SYM(edges[npoints + prev_i_around_ct]), SYM(edges[2 * npoints + i]));
+            }
+          else
+            {
+              RDATA (edges[              i]) = faces[i];
+              LDATA (edges[              i]) = faces[npoints];
+              RDATA (edges[1 * npoints + i]) = faces[npoints + 1];
+              LDATA (edges[1 * npoints + i]) = faces[i];
+              RDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
+              LDATA (edges[2 * npoints + i]) = faces[i];
+
+              /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
+              splice (SYM(edges[prev_i_around_ct]), edges[2 * npoints + i]);
+              splice (edges[2 * npoints + i], edges[i]);
+              /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
+              splice (edges[npoints + i], SYM(edges[2 * npoints + i]));
+              splice (SYM(edges[2 * npoints + i]), SYM(edges[npoints + prev_i_around_ct]));
+            }
         }
 
       if (0)
@@ -687,23 +736,33 @@ object3d_from_contours (const POLYAREA *contours,
           next_i_around_ct = start_of_ct + (offset_in_ct + 1) % ct_npoints;
           prev_i_around_ct = start_of_ct + (offset_in_ct + ct_npoints - 1) % ct_npoints;
 
-          g_assert (RDATA (edges[              i]) == faces[i]);
-          g_assert (LDATA (edges[              i]) == faces[npoints]);
-          g_assert (RDATA (edges[1 * npoints + i]) == faces[npoints + 1]);
-          g_assert (LDATA (edges[1 * npoints + i]) == faces[i]);
-          g_assert (RDATA (edges[2 * npoints + i]) == faces[prev_i_around_ct]);
-          g_assert (LDATA (edges[2 * npoints + i]) == faces[i]);
-
-          g_assert (              ONEXT (edges[              i])   == SYM (edges[prev_i_around_ct]));
-          g_assert (       ONEXT (ONEXT (edges[              i]))  == edges[2 * npoints + i]);
-          g_assert (ONEXT (ONEXT (ONEXT (edges[              i]))) ==      edges[              i]);
-          g_assert (              ONEXT (edges[1 * npoints + i])   == SYM (edges[2 * npoints + i]));
-          g_assert (       ONEXT (ONEXT (edges[1 * npoints + i]))  == SYM (edges[1 * npoints + prev_i_around_ct]));
-          g_assert (ONEXT (ONEXT (ONEXT (edges[1 * npoints + i]))) ==      edges[1 * npoints + i]);
-
-          g_assert (LNEXT (edges[              i]) ==      edges[0 * npoints + next_i_around_ct]);
-          g_assert (LNEXT (edges[1 * npoints + i]) == SYM (edges[2 * npoints + next_i_around_ct]));
-          g_assert (LNEXT (edges[2 * npoints + i]) ==      edges[1 * npoints + i]);
+          if (!extrude_inverted)
+            {
+              g_assert (RDATA (edges[              i]) == faces[i]);
+              g_assert (LDATA (edges[              i]) == faces[npoints]);
+              g_assert (RDATA (edges[1 * npoints + i]) == faces[npoints + 1]);
+              g_assert (LDATA (edges[1 * npoints + i]) == faces[i]);
+              g_assert (RDATA (edges[2 * npoints + i]) == faces[prev_i_around_ct]);
+              g_assert (LDATA (edges[2 * npoints + i]) == faces[i]);
+
+              g_assert (              ONEXT (edges[              i])   == SYM (edges[prev_i_around_ct]));
+              g_assert (       ONEXT (ONEXT (edges[              i]))  == edges[2 * npoints + i]);
+              g_assert (ONEXT (ONEXT (ONEXT (edges[              i]))) ==      edges[              i]);
+              g_assert (              ONEXT (edges[1 * npoints + i])   == SYM (edges[2 * npoints + i]));
+              g_assert (       ONEXT (ONEXT (edges[1 * npoints + i]))  == SYM (edges[1 * npoints + prev_i_around_ct]));
+              g_assert (ONEXT (ONEXT (ONEXT (edges[1 * npoints + i]))) ==      edges[1 * npoints + i]);
+
+              g_assert (LNEXT (edges[              i]) ==      edges[0 * npoints + next_i_around_ct]);
+              g_assert (LNEXT (edges[1 * npoints + i]) == SYM (edges[2 * npoints + next_i_around_ct]));
+              g_assert (LNEXT (edges[2 * npoints + i]) ==      edges[1 * npoints + i]);
+            }
+          else
+            {
+              /* XXX: No debug checks for this yet. LDATA and RDATA should be swapped from the
+               *      above case, and ONEXT order should be reversed. It works, so have not
+               *      written in the debug checks.
+               */
+            }
         }
 #endif
 
@@ -741,7 +800,8 @@ object3d_from_board_outline (void)
                                     -HACK_BOARD_THICKNESS / 2, /* Top */
 #endif
                                     board_appearance,
-                                    top_bot_appearance);
+                                    top_bot_appearance,
+                                    false); /* Don't invert */
 
   destroy_appearance (board_appearance);
   destroy_appearance (top_bot_appearance);
@@ -1005,7 +1065,8 @@ object3d_from_soldermask_within_area (POLYAREA *area, int side)
                                     (side == TOP_SIDE) ? -HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS - HACK_MASK_THICKNESS : HACK_BOARD_THICKNESS / 2 + HACK_COPPER_THICKNESS, /* Top */
 #endif
                                     mask_appearance,
-                                    NULL);
+                                    NULL,
+                                    false); /* Don't invert */
 
   destroy_appearance (mask_appearance);
 
@@ -1316,7 +1377,8 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
                                 -depth - HACK_COPPER_THICKNESS, /* Top */
 #endif
                                 copper_appearance,
-                                NULL));
+                                NULL,
+                                false)); /* Don't invert */
     }
 
 
diff --git a/src/hid/common/object3d.h b/src/hid/common/object3d.h
index 0e679ab..13a42c9 100644
--- a/src/hid/common/object3d.h
+++ b/src/hid/common/object3d.h
@@ -15,7 +15,7 @@ void object3d_set_appearance (object3d *object, appearance *appear);
 void object3d_add_edge (object3d *object, edge_ref edge);
 void object3d_add_vertex (object3d *object, vertex3d *vertex);
 void object3d_add_face (object3d *object, face3d *face);
-GList *object3d_from_contours (const POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance);
+GList *object3d_from_contours (const POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance, bool extrude_inverted);
 GList *object3d_from_board_outline (void);
 GList *object3d_from_soldermask_within_area (POLYAREA *area, int side);
 GList *object3d_from_copper_layers_within_area (POLYAREA *area);
