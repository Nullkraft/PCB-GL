Bottom: af22e747bb1058ebe4cc589debe5389226692e5e
Top:    105c49b5300b2817df1a16cc6241849e6a08bf19
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-18 16:15:34 +0000

Attempt to fix bad rtree usage in polygon code

We need to delete the rtree entry before updating any bounds, otherwise
bad things might happen (and certainly, with NDEBUG undefined, we may
get asserts firing in rtree.c)

To avoid computational expense deleting and removing from the rtree in
the general case (where we wouldn't expect bounds to change), a new
test function has been added which determines whether the contour bounds
will be updated or not.


---

diff --git a/src/polygon1.c b/src/polygon1.c
index 6b2d9a0..2a8c669 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -493,6 +493,15 @@ add_descriptors (PLINE * pl, char poly, CVCList * list)
   return list;
 }
 
+static bool
+cntrbox_check (PLINE * c, Vector p)
+{
+  return (p[0]     < c->xmin ||
+          p[0] + 1 > c->xmax ||
+          p[1]     < c->ymin ||
+          p[1] + 1 > c->ymax);
+}
+
 static inline void
 cntrbox_adjust (PLINE * c, Vector p)
 {
@@ -899,7 +908,16 @@ intersect_impl (jmp_buf * jb, POLYAREA * b, POLYAREA * a, int add)
       EDGE_FORWARD_VERTEX (task->node_seg->v) = task->new_node;
       task->node_seg->p->Count++;
 
-      cntrbox_adjust (task->node_seg->p, task->new_node->point);
+      if (cntrbox_check (task->node_seg->p, task->new_node->point))
+        {
+          /* First delete the contour from the contour r-tree, as its bounds
+           * may be adjusted whilst inserting nodes
+           */
+          r_delete_entry (b->contour_tree, (const BoxType *) task->node_seg->p);
+          cntrbox_adjust (task->node_seg->p, task->new_node->point);
+          r_insert_entry (b->contour_tree, (const BoxType *) task->node_seg->p, 0);
+        }
+
       if (adjust_tree (task->node_seg->p->tree, task->node_seg))
 	assert (0); /* XXX: Memory allocation failure */
