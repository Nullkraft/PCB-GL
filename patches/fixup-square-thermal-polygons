Bottom: 0af6320e3d3fda58b6af0a8381874c348d3675a0
Top:    c4294285fd6d79d07d320d188701be946aa37df3
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 20:31:11 +0000

Fixup square thermal polygons to use frac_circle2

The main adjustment is that callers need to add their own last vertex
in order to avoid an extraneous edge marked as being round.

XXX: Might be neater to fix this by having frac_circle just not set
the round flag on the last vertex added... we can extend the checking
code to re-use vertices if the next edge added is to be round.


---

diff --git a/src/polygon.c b/src/polygon.c
index f587028..420772b 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -558,7 +558,7 @@ frac_circle (PLINE * c, Coord X, Coord Y, Vector v, int fraction)
  * 2 for a half circle
  * or 4 for a quarter circle
  */
-static void
+void
 frac_circle2 (PLINE * c, Coord X, Coord Y, Vector v, int fraction)
 {
   double e1, e2, t1;
diff --git a/src/polygon.h b/src/polygon.h
index 0847e8a..f5ae0b3 100644
--- a/src/polygon.h
+++ b/src/polygon.h
@@ -94,6 +94,7 @@ POLYAREA * PinPoly(PinType *l, Coord thick);
 POLYAREA * BoxPolyBloated (BoxType *box, Coord radius);
 POLYAREA * PadPoly (PadType *pad, Coord size);
 void frac_circle (PLINE *, Coord, Coord, Vector, int);
+void frac_circle2 (PLINE *, Coord, Coord, Vector, int);
 int InitClip(DataType *d, LayerType *l, PolygonType *p);
 void RestoreToPolygon(DataType *, int, void *, void *);
 void ClearFromPolygon(DataType *, int, void *, void *);
diff --git a/src/thermal.c b/src/thermal.c
index 8980836..098fbd1 100644
--- a/src/thermal.c
+++ b/src/thermal.c
@@ -121,9 +121,26 @@ diag_line (Coord X, Coord Y, Coord l, Coord w, bool rt)
 }
 
 static POLYAREA *
+M_Poly_prepend (POLYAREA *a, POLYAREA *b)
+{
+  if (a == NULL)
+    return b;
+
+  if (b == NULL)
+    return a;
+
+  a->f->b = b->b;
+  b->b->f = a->f;
+  a->f = b;
+  b->b = a;
+
+  return a;
+}
+
+static POLYAREA *
 square_therm (PinType *pin, Cardinal style)
 {
-  POLYAREA *p, *p2;
+  POLYAREA *p;
   PLINE *c;
   Vector v;
   Coord d, in, out;
@@ -159,9 +176,7 @@ square_therm (PinType *pin, Cardinal style)
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       v[1] = pin->Y + out - d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
-      p2 = ContourToPoly (c);
-      p->f = p2;
-      p2->b = p;
+      p = M_Poly_prepend (p, ContourToPoly (c));
       /* left */
       v[0] = pin->X - in;
       v[1] = pin->Y - in + d;
@@ -174,9 +189,7 @@ square_therm (PinType *pin, Cardinal style)
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       v[1] = pin->Y - out + d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
-      p2 = ContourToPoly (c);
-      p->f->f = p2;
-      p2->b = p->f;
+      p = M_Poly_prepend (p, ContourToPoly (c));
       /* bottom (actually top since +y is down) */
       v[0] = pin->X + in - d;
       v[1] = pin->Y - in;
@@ -189,11 +202,7 @@ square_therm (PinType *pin, Cardinal style)
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       v[0] = pin->X + out - d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
-      p2 = ContourToPoly (c);
-      p->f->f->f = p2;
-      p2->f = p;
-      p2->b = p->f->f;
-      p->b = p2;
+      p = M_Poly_prepend (p, ContourToPoly (c));
       return p;
     case 4:
       {
@@ -211,25 +220,17 @@ square_therm (PinType *pin, Cardinal style)
         l.Point1.X = l.Point2.X = pin->X + out;
         l.Point1.Y = pin->Y - d;
         l.Point2.Y = pin->Y + d;
-        p2 = LinePoly (&l, in, NULL);
-        p->f = p2;
-        p2->b = p;
+        p = M_Poly_prepend (p, LinePoly (&l, in, NULL));
         /* bottom */
         l.Point1.X = pin->X - d;
         l.Point2.Y = l.Point1.Y = pin->Y - out;
         l.Point2.X = pin->X + d;
-        p2 = LinePoly (&l, in, NULL);
-        p->f->f = p2;
-        p2->b = p->f;
+        p = M_Poly_prepend (p, LinePoly (&l, in, NULL));
         /* left */
         l.Point1.X = l.Point2.X = pin->X - out;
         l.Point1.Y = pin->Y - d;
         l.Point2.Y = pin->Y + d;
-        p2 = LinePoly (&l, in, NULL);
-        p->f->f->f = p2;
-        p2->b = p->f->f;
-        p->b = p2;
-        p2->f = p;
+        p = M_Poly_prepend (p, LinePoly (&l, in, NULL));
         return p;
       }
     default:                   /* style 2 and 5 */
@@ -251,11 +252,20 @@ square_therm (PinType *pin, Cardinal style)
           poly_InclVertex (c->head.prev, poly_CreateNode (v));
         }
       else
-        frac_circle (c, v[0] + pin->Clearance / 4, v[1], v, 2);
+        {
+          frac_circle2 (c, v[0] + pin->Clearance / 4, v[1], v, 2);
+          v[0] = pin->X + out;
+          v[1] = pin->Y + d;
+          poly_InclVertex (c->head.prev, poly_CreateNode (v));
+        }
       v[1] = pin->Y + in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       /* pivot 1/4 circle to next point */
-      frac_circle (c, pin->X + in, pin->Y + in, v, 4);
+      frac_circle2 (c, pin->X + in, pin->Y + in, v, 4);
+      v[0] = pin->X + in;
+      v[1] = pin->Y + out;
+      poly_InclVertex (c->head.prev, poly_CreateNode (v));
+
       v[0] = pin->X + d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       if (style == 2)
@@ -265,7 +275,12 @@ square_therm (PinType *pin, Cardinal style)
           poly_InclVertex (c->head.prev, poly_CreateNode (v));
         }
       else
-        frac_circle (c, v[0], v[1] - pin->Clearance / 4, v, 2);
+        {
+          frac_circle2 (c, v[0], v[1] - pin->Clearance / 4, v, 2);
+          v[0] = pin->X + d;
+          v[1] = pin->Y + in;
+          poly_InclVertex (c->head.prev, poly_CreateNode (v));
+        }
       p = ContourToPoly (c);
       /* bottom right */
       v[0] = pin->X + in;
@@ -282,18 +297,29 @@ square_therm (PinType *pin, Cardinal style)
           poly_InclVertex (c->head.prev, poly_CreateNode (v));
         }
       else
-        frac_circle (c, v[0], v[1] - pin->Clearance / 4, v, 2);
+        {
+          frac_circle2 (c, v[0], v[1] - pin->Clearance / 4, v, 2);
+          v[0] = pin->X + d;
+          v[1] = pin->Y - out;
+          poly_InclVertex (c->head.prev, poly_CreateNode (v));
+        }
       v[0] = pin->X + in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       /* pivot 1/4 circle to next point */
-      frac_circle (c, pin->X + in, pin->Y - in, v, 4);
+      frac_circle2 (c, pin->X + in, pin->Y - in, v, 4);
+      v[0] = pin->X + out;
+      v[1] = pin->Y - in;
+      poly_InclVertex (c->head.prev, poly_CreateNode (v));
       v[1] = pin->Y - d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       if (style == 5)
-        frac_circle (c, v[0] - pin->Clearance / 4, v[1], v, 2);
-      p2 = ContourToPoly (c);
-      p->f = p2;
-      p2->b = p;
+        {
+          frac_circle2 (c, v[0] - pin->Clearance / 4, v[1], v, 2);
+          v[0] = pin->X + in;
+          v[1] = pin->Y - d;
+          poly_InclVertex (c->head.prev, poly_CreateNode (v));
+        }
+      p = M_Poly_prepend (p, ContourToPoly (c));
       /* bottom left */
       v[0] = pin->X - d;
       v[1] = pin->Y - in;
@@ -309,18 +335,29 @@ square_therm (PinType *pin, Cardinal style)
           poly_InclVertex (c->head.prev, poly_CreateNode (v));
         }
       else
-        frac_circle (c, v[0] - pin->Clearance / 4, v[1], v, 2);
+        {
+          frac_circle2 (c, v[0] - pin->Clearance / 4, v[1], v, 2);
+          v[0] = pin->X - out;
+          v[1] = pin->Y - d;
+          poly_InclVertex (c->head.prev, poly_CreateNode (v));
+        }
       v[1] = pin->Y - in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       /* pivot 1/4 circle to next point */
-      frac_circle (c, pin->X - in, pin->Y - in, v, 4);
+      frac_circle2 (c, pin->X - in, pin->Y - in, v, 4);
+      v[0] = pin->X - in;
+      v[1] = pin->Y - out;
+      poly_InclVertex (c->head.prev, poly_CreateNode (v));
       v[0] = pin->X - d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       if (style == 5)
-        frac_circle (c, v[0], v[1] + pin->Clearance / 4, v, 2);
-      p2 = ContourToPoly (c);
-      p->f->f = p2;
-      p2->b = p->f;
+        {
+          frac_circle2 (c, v[0], v[1] + pin->Clearance / 4, v, 2);
+          v[0] = pin->X - d;
+          v[1] = pin->Y - in;
+          poly_InclVertex (c->head.prev, poly_CreateNode (v));
+        }
+      p = M_Poly_prepend (p, ContourToPoly (c));
       /* top left */
       v[0] = pin->X - d;
       v[1] = pin->Y + out;
@@ -329,7 +366,10 @@ square_therm (PinType *pin, Cardinal style)
       v[0] = pin->X - in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       /* pivot 1/4 circle to next point (x-out, y+in) */
-      frac_circle (c, pin->X - in, pin->Y + in, v, 4);
+      frac_circle2 (c, pin->X - in, pin->Y + in, v, 4);
+      v[0] = pin->X - out;
+      v[1] = pin->Y + in;
+      poly_InclVertex (c->head.prev, poly_CreateNode (v));
       v[1] = pin->Y + d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       if (style == 2)
@@ -338,18 +378,19 @@ square_therm (PinType *pin, Cardinal style)
           poly_InclVertex (c->head.prev, poly_CreateNode (v));
         }
       else
-        frac_circle (c, v[0] + pin->Clearance / 4, v[1], v, 2);
+        {
+          frac_circle2 (c, v[0] + pin->Clearance / 4, v[1], v, 2);
+          v[0] = pin->X - in;
+          v[1] = pin->Y + d;
+          poly_InclVertex (c->head.prev, poly_CreateNode (v));
+        }
       v[1] = pin->Y + in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       v[0] = pin->X - d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
       if (style == 5)
-        frac_circle (c, v[0], v[1] + pin->Clearance / 4, v, 2);
-      p2 = ContourToPoly (c);
-      p->f->f->f = p2;
-      p2->f = p;
-      p2->b = p->f->f;
-      p->b = p2;
+        frac_circle2 (c, v[0], v[1] + pin->Clearance / 4, v, 2);
+      p = M_Poly_prepend (p, ContourToPoly (c));
       return p;
     }
 }
