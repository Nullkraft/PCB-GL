Bottom: b0395f1ebd3b7b9dcc4a409683cf9e4bf964b7a5
Top:    e8fe1ddc5cda3ad8b864e4a5b81bc090138408b0
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 19:24:13 +0000

Add HID_DRAW* parameter to (HID_DRAW *)->{start,end}_layer() functions


---

diff --git a/src/hid/batch/batch.c b/src/hid/batch/batch.c
index c924dcb..13973b5 100644
--- a/src/hid/batch/batch.c
+++ b/src/hid/batch/batch.c
@@ -160,7 +160,7 @@ batch_invalidate_all (void)
 }
 
 static int
-batch_set_layer (const char *name, int idx, int empty)
+batch_set_layer (HID_DRAW *hid_draw, const char *name, int idx, int empty)
 {
   return 0;
 }
diff --git a/src/hid/common/extents.c b/src/hid/common/extents.c
index 0a33bf3..3838864 100644
--- a/src/hid/common/extents.c
+++ b/src/hid/common/extents.c
@@ -29,7 +29,7 @@ typedef struct extents_gc_struct
 } *extentsGC;
 
 static int
-extents_set_layer (const char *name, int group, int empty)
+extents_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
   int idx = group;
   if (idx >= 0 && idx < max_group)
diff --git a/src/hid/common/hidnogui.c b/src/hid/common/hidnogui.c
index ac9e2ed..2821695 100644
--- a/src/hid/common/hidnogui.c
+++ b/src/hid/common/hidnogui.c
@@ -54,14 +54,14 @@ nogui_invalidate_all (void)
 }
 
 static int
-nogui_set_layer (const char *name, int idx, int empty)
+nogui_set_layer (HID_DRAW *hid_draw, const char *name, int idx, int empty)
 {
   CRASH;
   return 0;
 }
 
 static void
-nogui_end_layer (void)
+nogui_end_layer (HID_DRAW *hid_draw)
 {
 }
 
diff --git a/src/hid/gcode/gcode.c b/src/hid/gcode/gcode.c
index ea49a45..c261ef4 100644
--- a/src/hid/gcode/gcode.c
+++ b/src/hid/gcode/gcode.c
@@ -1141,7 +1141,7 @@ gcode_do_export (HID_Attr_Val * options)
 /* *** PNG export (slightly modified code from PNG export HID) ************* */
 
 static int
-gcode_set_layer (const char *name, int group, int empty)
+gcode_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
   int idx = (group >= 0 && group < max_group) ?
     PCB->LayerGroups.Entries[group][0] : group;
diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index a556034..707c905 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -47,7 +47,6 @@
 static HID_Attribute * gerber_get_export_options (int *n);
 static void gerber_do_export (HID_Attr_Val * options);
 static void gerber_parse_arguments (int *argc, char ***argv);
-static int gerber_set_layer (const char *name, int group, int empty);
 static hidGC gerber_make_gc (void);
 static void gerber_destroy_gc (hidGC gc);
 static void gerber_set_color (hidGC gc, const char *name);
@@ -717,7 +716,7 @@ drill_sort (const void *va, const void *vb)
 }
 
 static int
-gerber_set_layer (const char *name, int group, int empty)
+gerber_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
   int want_outline;
   char *cp;
diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index 8024e84..5fac157 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -137,7 +137,7 @@ is_layer_group_visible (int group)
 }
 
 int
-ghid_set_layer (const char *name, int group, int empty)
+ghid_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
   if (group >= 0 && group < max_group)
     return is_layer_group_visible (group);
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index e8e9119..1582c25 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -301,7 +301,7 @@ is_layer_group_visible (int group)
 }
 
 int
-ghid_set_layer (const char *name, int group, int empty)
+ghid_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
   render_priv *priv = gport->render_priv;
   hidgl_instance *hidgl = priv->hidgl;
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index 65c876a..c8c5b02 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -477,7 +477,7 @@ void ghid_logv (const char *fmt, va_list args);
 void ghid_pinout_window_show (GHidPort *out, ElementType *Element);
 
 /* gtkhid-gdk.c AND gtkhid-gl.c */
-int ghid_set_layer (const char *name, int group, int empty);
+int ghid_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty);
 hidGC ghid_make_gc (void);
 void ghid_destroy_gc (hidGC);
 void ghid_use_mask (HID_DRAW *hid_draw, enum mask_mode mode);
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index 0191370..eaeed07 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -3004,7 +3004,7 @@ lesstif_notify_mark_change (bool changes_complete)
 }
 
 static int
-lesstif_set_layer (const char *name, int group, int empty)
+lesstif_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
   int idx = group;
   if (idx >= 0 && idx < max_group)
diff --git a/src/hid/nelma/nelma.c b/src/hid/nelma/nelma.c
index 5597471..755ccbc 100644
--- a/src/hid/nelma/nelma.c
+++ b/src/hid/nelma/nelma.c
@@ -729,7 +729,7 @@ nelma_do_export(HID_Attr_Val * options)
 /* *** PNG export (slightly modified code from PNG export HID) ************* */
 
 static int 
-nelma_set_layer(const char *name, int group, int empty)
+nelma_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
 	int             idx = (group >= 0 && group < max_group) ?
 	PCB->LayerGroups.Entries[group][0] : group;
diff --git a/src/hid/png/png.c b/src/hid/png/png.c
index b2ea870..89c948b 100644
--- a/src/hid/png/png.c
+++ b/src/hid/png/png.c
@@ -1200,7 +1200,7 @@ static int is_drill;
 static int is_copper;
 
 static int
-png_set_layer (const char *name, int group, int empty)
+png_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
   int idx = (group >= 0
 	     && group <
diff --git a/src/hid/ps/eps.c b/src/hid/ps/eps.c
index 91ab387..e7e964d 100644
--- a/src/hid/ps/eps.c
+++ b/src/hid/ps/eps.c
@@ -33,7 +33,6 @@
 static HID_Attribute * eps_get_export_options (int *n);
 static void eps_do_export (HID_Attr_Val * options);
 static void eps_parse_arguments (int *argc, char ***argv);
-static int eps_set_layer (const char *name, int group, int empty);
 static hidGC eps_make_gc (void);
 static void eps_destroy_gc (hidGC gc);
 static void eps_set_color (hidGC gc, const char *name);
@@ -363,7 +362,7 @@ static int is_paste;
 static int is_drill;
 
 static int
-eps_set_layer (const char *name, int group, int empty)
+eps_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
   int idx = (group >= 0
 	     && group <
diff --git a/src/hid/ps/ps.c b/src/hid/ps/ps.c
index b8f5c06..d911315 100644
--- a/src/hid/ps/ps.c
+++ b/src/hid/ps/ps.c
@@ -32,7 +32,7 @@
 
 #define CRASH fprintf(stderr, "HID error: pcb called unimplemented PS function %s.\n", __FUNCTION__); abort()
 
-static int ps_set_layer (const char *name, int group, int empty);
+static int ps_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty);
 static void use_gc (hidGC gc);
 
 typedef struct ps_gc_struct
@@ -675,7 +675,7 @@ ps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 
   global.linewidth = -1;
   /* reset static vars */
-  ps_set_layer (NULL, 0, -1);
+  ps_set_layer (&ps_graphics, NULL, 0, -1);
   use_gc (NULL);
 
   global.region.X1 = 0;
@@ -699,7 +699,7 @@ ps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 
   global.pagecount = 1; /* Reset 'pagecount' if single file */
   global.doing_toc = 0;
-  ps_set_layer (NULL, 0, -1);  /* reset static vars */
+  ps_set_layer (&ps_graphics, NULL, 0, -1);  /* reset static vars */
   hid_expose_callback (&ps_graphics, &global.region, 0);
 
   if (the_file)
@@ -786,7 +786,7 @@ corner (FILE *fh, Coord x, Coord y, int dx, int dy)
 }
 
 static int
-ps_set_layer (const char *name, int group, int empty)
+ps_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
   static int lastgroup = -1;
   time_t currenttime;
diff --git a/src/hid_draw.h b/src/hid_draw.h
index 6b07d3a..d59b0da 100644
--- a/src/hid_draw.h
+++ b/src/hid_draw.h
@@ -20,10 +20,10 @@ typedef struct hid_draw_class_st
      layer groups, you may pass NULL for name to have a name fetched
      from the PCB struct.  The EMPTY argument is a hint - if set, the
      layer is empty, if zero it may be non-empty.  */
-  int (*set_layer) (const char *name_, int group_, int _empty);
+  int (*set_layer) (HID_DRAW *hid_draw, const char *name_, int group_, int _empty);
 
   /* Tell the GUI the layer last selected has been finished with */
-  void (*end_layer) (void);
+  void (*end_layer) (HID_DRAW *hid_draw);
 
   /* Drawing Functions.  Coordinates and distances are ALWAYS in PCB's
      default coordinates (1 nm at the time this comment was written).
@@ -129,13 +129,13 @@ hid_draw_can_draw_in_mask_clear (HID_DRAW *hid_draw)
 inline int
 hid_draw_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 {
-  return hid_draw->klass->set_layer (name, group, empty);
+  return hid_draw->klass->set_layer (hid_draw, name, group, empty);
 }
 
 inline void
 hid_draw_end_layer (HID_DRAW *hid_draw)
 {
-  hid_draw->klass->end_layer ();
+  hid_draw->klass->end_layer (hid_draw);
 }
 
 inline hidGC
