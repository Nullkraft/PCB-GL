Bottom: 00768cdfb9852f828a9c25cbc71425b8a07f7e84
Top:    d3ec7e0fcef813336671bcbbbc6529e61de98b65
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-07 23:10:32 +0000

Figure out netnames for exported copper


---

diff --git a/src/hid/common/face3d.c b/src/hid/common/face3d.c
index 5f1df0a..cf59b95 100644
--- a/src/hid/common/face3d.c
+++ b/src/hid/common/face3d.c
@@ -8,11 +8,12 @@
 #include "face3d.h"
 
 face3d *
-make_face3d (void)
+make_face3d (char *name)
 {
   face3d *face;
 
   face = g_new0 (face3d, 1);
+  face->name = g_strdup (name);
 
   return face;
 }
@@ -21,6 +22,7 @@ void
 destroy_face3d (face3d *face)
 {
   g_list_free_full (face->contours, (GDestroyNotify)destroy_contour3d);
+  g_free (face->name);
   g_free (face);
 }
 
diff --git a/src/hid/common/face3d.h b/src/hid/common/face3d.h
index 1ca9eb4..ddec03f 100644
--- a/src/hid/common/face3d.h
+++ b/src/hid/common/face3d.h
@@ -2,6 +2,7 @@ typedef struct {
   double nx, ny, nz; /* Face normal?*/
   bool surface_orientation_reversed;
   GList *contours;
+  char *name;
 
   /* For cylindrical surfaces */
   bool is_cylindrical;
@@ -17,7 +18,7 @@ typedef struct {
   step_id face_bound_identifier;
 } face3d;
 
-face3d *make_face3d (void);
+face3d *make_face3d (char *name);
 void destroy_face3d (face3d *face);
 void face3d_add_contour (face3d *face, contour3d *contour);
 void face3d_set_appearance (face3d *face, appearance *appear);
diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index 13abf64..e25eef7 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -23,6 +23,7 @@
 #include "edge3d.h"
 #include "object3d.h"
 #include "polygon.h"
+#include "rats.h"
 
 #include "rtree.h"
 #include "rotate.h"
@@ -94,7 +95,7 @@ make_object3d (char *name)
 
   object = g_new0 (object3d, 1);
   object->id = object3d_count++;
-  name = g_strdup (name);
+  object->name = g_strdup (name);
 
   return object;
 }
@@ -333,6 +334,22 @@ get_contour_edge_n_round_geometry_in_step_mm (PLINE *contour, int n, double *cx,
   *cw = (compare_ccw_cw (EDGE_BACKWARD_VERTEX (edge)->point, center, EDGE_FORWARD_VERTEX (edge)->point) > 0);
 }
 
+static char *
+make_object_name (char *base_name, char *suffix_name)
+{
+  if (base_name == NULL)
+    {
+      return g_strdup (suffix_name);
+    }
+  else
+    {
+      if (suffix_name == NULL)
+        return g_strdup (base_name);
+      else
+        return g_strdup_printf ("%s - %s", base_name, suffix_name);
+    }
+}
+
 typedef struct
 {
   object3d *object;
@@ -350,14 +367,15 @@ object3d_from_contours (POLYAREA *contours,
                         double ztop,
                         const appearance *master_object_appearance,
                         const appearance *master_top_bot_appearance,
-                        bool extrude_inverted)
+                        bool extrude_inverted,
+                        char *base_name)
 {
   GList *objects = NULL;
   object3d *object;
   appearance *object_appearance = NULL;
   appearance *top_bot_appearance = NULL;
   POLYAREA *pa;
-  PLINE *contour;
+  PLINE *outer_contour;
   PLINE *ct;
   int ncontours;
   int npoints;
@@ -372,6 +390,7 @@ object3d_from_contours (POLYAREA *contours,
   bool invert_face_normals;
   double length;
   double nx, ny;
+  char *object_name;
 
 #ifdef REVERSED_PCB_CONTOURS
   invert_face_normals = extrude_inverted ? false : true;
@@ -387,18 +406,20 @@ object3d_from_contours (POLYAREA *contours,
   do
     {
 
-      contour = pa->contours;
+      outer_contour = pa->contours;
       ncontours = 0;
       npoints = 0;
 
-      ct = contour;
+      ct = outer_contour;
       while (ct != NULL) {
         ncontours ++;
         npoints += get_contour_npoints (ct);
         ct = ct->next;
       }
 
-      object = make_object3d (PCB->Name);
+      object_name = make_object_name (base_name, pa->contours->name);
+      object = make_object3d (object_name);
+      g_free (object_name);
 
 #if 0
       /* XXX: REF-COUNTING WOULD BE WAY BETTER! */
@@ -426,7 +447,7 @@ object3d_from_contours (POLYAREA *contours,
       faces    = malloc (sizeof (face3d *) * (npoints + 2)); /* (n-sides, 1-bottom, 1-top */
 
       /* Define the vertices */
-      ct = contour;
+      ct = outer_contour;
       offset_in_ct = 0;
       ct_npoints = get_contour_npoints (ct);
 
@@ -462,7 +483,7 @@ object3d_from_contours (POLYAREA *contours,
       /* Define the faces */
       for (i = 0; i < npoints; i++)
         {
-          faces[i] = make_face3d ();
+          faces[i] = make_face3d (NULL);
 
           object3d_add_face (object, faces[i]);
           /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
@@ -472,8 +493,8 @@ object3d_from_contours (POLYAREA *contours,
             face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
         }
 
-      faces[npoints    ] = make_face3d (); /* bottom_face */
-      faces[npoints + 1] = make_face3d (); /* top_face */
+      faces[npoints    ] = make_face3d ("Bottom"); /* bottom_face */
+      faces[npoints + 1] = make_face3d ("Top");    /* top_face */
       if (invert_face_normals)
         {
           face3d_set_normal (faces[npoints    ], 0., 0., -1.); /* bottom_face */
@@ -501,7 +522,7 @@ object3d_from_contours (POLYAREA *contours,
           face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints]));
         }
 
-      ct = contour;
+      ct = outer_contour;
       start_of_ct = 0;
       offset_in_ct = 0;
       ct_npoints = get_contour_npoints (ct);
@@ -741,7 +762,8 @@ object3d_from_board_outline (void)
 #endif
                                     board_appearance,
                                     top_bot_appearance,
-                                    false); /* Don't invert */
+                                    false, /* Don't invert */
+                                    PCB->Name);
 
 //  destroy_appearance (board_appearance); /* XXX: HANGING ON TO THIS FOR NOW */
 //  destroy_appearance (top_bot_appearance); /* XXX: HANGING ON TO THIS FOR NOW */
@@ -1023,8 +1045,9 @@ object3d_from_soldermask_within_area (POLYAREA *area, int side)
                                     (side == TOP_SIDE) ? -HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS - HACK_MASK_THICKNESS : HACK_BOARD_THICKNESS / 2 + HACK_COPPER_THICKNESS, /* Top */
 #endif
                                     mask_appearance,
-                                    NULL,
-                                    false); /* Don't invert */
+                                    NULL,  /* top_bot_appearance */
+                                    false, /* Don't invert */
+                                    (side == TOP_SIDE) ? "Top soldermask" : "Bottom soldermask"); /* Name */
 
 //  destroy_appearance (mask_appearance); /* XXX: HANGING ON TO THIS FOR NOW */
 
@@ -1186,12 +1209,75 @@ polygon_copper_callback (const BoxType * b, void *cl)
   return 1;
 }
 
+static
+char *netname_from_connection_name (int type, ElementType *ele, void *ptr2)
+{
+  char *netname = NULL;
+  char *connection_name;
+
+  if (ele == NULL || NAMEONPCB_NAME (ele) == NULL)
+    return NULL;
+
+  connection_name = ConnectionName (type, ele, ptr2);
+
+  /* ConnectionName uses a static buffer - URGH!! */
+  /*
+   * if (connection_name == NULL)
+   *   return NULL;
+   */
+
+  /* Find netlist entry */
+  MENU_LOOP (&PCB->NetlistLib);
+  {
+    if (!menu->Name)
+    continue;
+
+    ENTRY_LOOP (menu);
+    {
+      if (!entry->ListEntry)
+        continue;
+
+      if (strcmp (entry->ListEntry, connection_name) == 0) {
+        netname = g_strdup (menu->Name);
+        /* For some reason, the netname has spaces in front of it, strip them */
+        g_strstrip (netname);
+        break;
+      }
+    }
+    END_LOOP;
+
+    if (netname != NULL)
+      break;
+  }
+  END_LOOP;
+
+  /* ConnectionName uses a static buffer - URGH!! */
+  /*
+   * free (connection_name);
+   */
+
+  return netname;
+}
+
+static
+char *netname_from_pin (PinType *pin)
+{
+  return netname_from_connection_name (PIN_TYPE, pin->Element, pin);
+}
+
+static
+char *netname_from_pad (PadType *pad)
+{
+  return netname_from_connection_name (PAD_TYPE, pad->Element, pad);
+}
+
 static int
 pad_copper_callback (const BoxType * b, void *cl)
 {
   PadType *pad = (PadType *) b;
   struct copper_info *info = (struct copper_info *) cl;
   POLYAREA *np, *res;
+  char *netname;
 
   if (XOR (TEST_FLAG (ONSOLDERFLAG, pad), (info->side == BOTTOM_SIDE)))
     return 0;
@@ -1199,6 +1285,11 @@ pad_copper_callback (const BoxType * b, void *cl)
   if (!(np = PadPoly (pad, pad->Thickness)))
     return 0;
 
+  netname = netname_from_pad (pad);
+  if (netname != NULL)
+    fprintf (stderr, "Accumulating pad from net %s\n", netname);
+  g_free (netname);
+
   poly_Boolean_free (info->poly, np, &res, PBO_UNITE);
   info->poly = res;
 
@@ -1211,10 +1302,16 @@ pv_copper_callback (const BoxType * b, void *cl)
   PinType *pv = (PinType *)b;
   struct copper_info *info = cl;
   POLYAREA *np, *res;
+  char *netname;
 
   if (!(np = PinPoly (pv, PIN_SIZE (pv))))
     return 0;
 
+  netname = netname_from_pin (pv);
+  if (netname != NULL)
+    fprintf (stderr, "Accumulating pv from net %s\n", netname);
+  g_free (netname);
+
   poly_Boolean_free (info->poly, np, &res, PBO_UNITE);
   info->poly = res;
 
@@ -1385,8 +1482,9 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
                                 -depth - HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS, /* Top */
 #endif
                                 copper_appearance,
-                                NULL,
-                                false)); /* Don't invert */
+                                NULL,  /* top_bot_appearance */
+                                false, /* Don't invert */
+                                "Net")); /* Name */
 
       group_m_polyarea[group] = info.poly;
     }
@@ -1449,8 +1547,9 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
                                                -top_depth    - HACK_BOARD_THICKNESS / 2,                         /* Top */
 #endif
                                                copper_appearance,
-                                               NULL,
-                                               false); /* Don't invert */
+                                               NULL,  /* top_bot_appearance */
+                                               false, /* Don't invert */
+                                               NULL); /* Name */
 
 /* Connect the via barrels in this block of code */
 #if 1
@@ -1599,8 +1698,9 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
                                               -top_depth    - HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS, /* Top */
 #endif
                                               copper_appearance,
-                                              NULL,
-                                              true); /* Invert */
+                                              NULL,  /* top_bot_appearance */
+                                              true,  /* Invert */
+                                              NULL); /* Name */
 
 /* Connect the via drill holes in this block of code */
 #if 1
diff --git a/src/hid/common/object3d.h b/src/hid/common/object3d.h
index 82b69fd5..edf4d4c 100644
--- a/src/hid/common/object3d.h
+++ b/src/hid/common/object3d.h
@@ -15,7 +15,7 @@ void object3d_set_appearance (object3d *object, appearance *appear);
 void object3d_add_edge (object3d *object, edge_ref edge);
 void object3d_add_vertex (object3d *object, vertex3d *vertex);
 void object3d_add_face (object3d *object, face3d *face);
-GList *object3d_from_contours (POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance, bool extrude_inverted);
+GList *object3d_from_contours (POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance, bool extrude_inverted, char *base_name);
 GList *object3d_from_board_outline (void);
 GList *object3d_from_soldermask_within_area (POLYAREA *area, int side);
 GList *object3d_from_copper_layers_within_area (POLYAREA *area);
diff --git a/src/hid/step/object3d_step.c b/src/hid/step/object3d_step.c
index 01404dc..6f67e90 100644
--- a/src/hid/step/object3d_step.c
+++ b/src/hid/step/object3d_step.c
@@ -302,6 +302,7 @@ object3d_to_step_body_fragment (step_file *step,
       face3d *face = face_iter->data;
       bool outer_contour = true;
       step_id_list face_contour_list = NULL;
+      char *face_name;
 
       for (contour_iter = face->contours;
            contour_iter != NULL;
@@ -331,7 +332,8 @@ object3d_to_step_body_fragment (step_file *step,
         }
 
       face_contour_list = g_list_reverse (face_contour_list);
-      face->face_identifier = step_advanced_face (step, "NONE", face_contour_list, face->surface_identifier, !face->surface_orientation_reversed);
+      face_name = (face->name != NULL) ? face->name : "NONE";
+      face->face_identifier = step_advanced_face (step, face_name, face_contour_list, face->surface_identifier, !face->surface_orientation_reversed);
       shell_face_list = g_list_prepend (shell_face_list, GINT_TO_POINTER (face->face_identifier));
     }
 
@@ -455,9 +457,16 @@ object3d_list_export_to_step_part (GList *objects, const char *filename)
       object3d *object = object_iter->data;
       GString *body_name;
 
-      body_name = g_string_new ("part body");
-      if (multiple_bodies)
-        g_string_append_printf (body_name, " - %i", part);
+      if (object->name != NULL)
+        {
+          body_name = g_string_new (object->name);
+        }
+      else
+        {
+          body_name = g_string_new ("part body");
+          if (multiple_bodies)
+            g_string_append_printf (body_name, " - %i", part);
+        }
 
       object3d_to_step_body_fragment (step, object, body_name->str, &comp_brep, &styled_items, appear_hash);
 
@@ -535,10 +544,21 @@ object3d_list_export_to_step_assy (GList *objects, const char *filename)
       part_name = g_string_new ("PCB board");
       body_name = g_string_new ("PCB board body");
 
+      if (object->name != NULL)
+        {
+          part_name = g_string_new (object->name);
+        }
+      else
+        {
+          part_name = g_string_new ("part");
+          if (multiple_parts)
+            g_string_append_printf (body_name, " - %i", part);
+        }
+
       if (multiple_parts)
         {
           g_string_append_printf (part_id, "-%i", part);
-          g_string_append_printf (part_name, " - %i", part);
+//          g_string_append_printf (part_name, " - %i", part);
           g_string_append_printf (body_name, " - %i", part);
         }
 
diff --git a/src/hid/step/step.c b/src/hid/step/step.c
index 47499ce..a79b3c2 100644
--- a/src/hid/step/step.c
+++ b/src/hid/step/step.c
@@ -210,8 +210,8 @@ step_do_export (HID_Attr_Val * options)
   } while ((piece = piece->f) != board_outline);
   poly_Free (&board_outline);
 
-  object3d_list_export_to_step_part (board_outline_list, temp_pcb_filename);
-//  object3d_list_export_to_step_assy (board_outline_list, temp_pcb_filename);
+//  object3d_list_export_to_step_part (board_outline_list, temp_pcb_filename);
+  object3d_list_export_to_step_assy (board_outline_list, temp_pcb_filename);
   g_list_free_full (board_outline_list, (GDestroyNotify)destroy_object3d);
 
   if (0) {
