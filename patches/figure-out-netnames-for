Bottom: a3d68b5056afc3a158ce400e1210547224321869
Top:    bb71cb35888af3d44aeb3d1b7459352a934ee933
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 19:24:32 +0000

Figure out netnames for exported copper, and update STEP output to include various names


---

diff --git a/src/hid/common/face3d.c b/src/hid/common/face3d.c
index 5f1df0a..cf59b95 100644
--- a/src/hid/common/face3d.c
+++ b/src/hid/common/face3d.c
@@ -8,11 +8,12 @@
 #include "face3d.h"
 
 face3d *
-make_face3d (void)
+make_face3d (char *name)
 {
   face3d *face;
 
   face = g_new0 (face3d, 1);
+  face->name = g_strdup (name);
 
   return face;
 }
@@ -21,6 +22,7 @@ void
 destroy_face3d (face3d *face)
 {
   g_list_free_full (face->contours, (GDestroyNotify)destroy_contour3d);
+  g_free (face->name);
   g_free (face);
 }
 
diff --git a/src/hid/common/face3d.h b/src/hid/common/face3d.h
index 1ca9eb4..ddec03f 100644
--- a/src/hid/common/face3d.h
+++ b/src/hid/common/face3d.h
@@ -2,6 +2,7 @@ typedef struct {
   double nx, ny, nz; /* Face normal?*/
   bool surface_orientation_reversed;
   GList *contours;
+  char *name;
 
   /* For cylindrical surfaces */
   bool is_cylindrical;
@@ -17,7 +18,7 @@ typedef struct {
   step_id face_bound_identifier;
 } face3d;
 
-face3d *make_face3d (void);
+face3d *make_face3d (char *name);
 void destroy_face3d (face3d *face);
 void face3d_add_contour (face3d *face, contour3d *contour);
 void face3d_set_appearance (face3d *face, appearance *appear);
diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index 415cb9dc..d38cdb3 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -23,6 +23,7 @@
 #include "edge3d.h"
 #include "object3d.h"
 #include "polygon.h"
+#include "rats.h"
 
 #include "rtree.h"
 #include "rotate.h"
@@ -94,7 +95,7 @@ make_object3d (char *name)
 
   object = g_new0 (object3d, 1);
   object->id = object3d_count++;
-  name = g_strdup (name);
+  object->name = g_strdup (name);
 
   return object;
 }
@@ -333,6 +334,22 @@ get_contour_edge_n_round_geometry_in_step_mm (PLINE *contour, int n, double *cx,
   *cw = (compare_ccw_cw (EDGE_BACKWARD_VERTEX (edge)->point, center, EDGE_FORWARD_VERTEX (edge)->point) > 0);
 }
 
+static char *
+make_object_name (char *base_name, char *suffix_name)
+{
+  if (base_name == NULL)
+    {
+      return g_strdup (suffix_name);
+    }
+  else
+    {
+      if (suffix_name == NULL)
+        return g_strdup (base_name);
+      else
+        return g_strdup_printf ("%s - %s", base_name, suffix_name);
+    }
+}
+
 typedef struct
 {
   object3d *object;
@@ -350,14 +367,15 @@ object3d_from_contours (POLYAREA *contours,
                         double ztop,
                         const appearance *master_object_appearance,
                         const appearance *master_top_bot_appearance,
-                        bool extrude_inverted)
+                        bool extrude_inverted,
+                        char *base_name)
 {
   GList *objects = NULL;
   object3d *object;
   appearance *object_appearance = NULL;
   appearance *top_bot_appearance = NULL;
   POLYAREA *pa;
-  PLINE *contour;
+  PLINE *outer_contour;
   PLINE *ct;
   int ncontours;
   int npoints;
@@ -372,6 +390,7 @@ object3d_from_contours (POLYAREA *contours,
   bool invert_face_normals;
   double length;
   double nx, ny;
+  char *object_name;
 
 #ifdef REVERSED_PCB_CONTOURS
   invert_face_normals = extrude_inverted ? false : true;
@@ -387,18 +406,20 @@ object3d_from_contours (POLYAREA *contours,
   do
     {
 
-      contour = pa->contours;
+      outer_contour = pa->contours;
       ncontours = 0;
       npoints = 0;
 
-      ct = contour;
+      ct = outer_contour;
       while (ct != NULL) {
         ncontours ++;
         npoints += get_contour_npoints (ct);
         ct = ct->next;
       }
 
-      object = make_object3d (PCB->Name);
+      object_name = make_object_name (base_name, pa->contours->name);
+      object = make_object3d (object_name);
+      g_free (object_name);
 
 #if 0
       /* XXX: REF-COUNTING WOULD BE WAY BETTER! */
@@ -426,7 +447,7 @@ object3d_from_contours (POLYAREA *contours,
       faces    = malloc (sizeof (face3d *) * (npoints + 2)); /* (n-sides, 1-bottom, 1-top */
 
       /* Define the vertices */
-      ct = contour;
+      ct = outer_contour;
       offset_in_ct = 0;
       ct_npoints = get_contour_npoints (ct);
 
@@ -462,7 +483,7 @@ object3d_from_contours (POLYAREA *contours,
       /* Define the faces */
       for (i = 0; i < npoints; i++)
         {
-          faces[i] = make_face3d ();
+          faces[i] = make_face3d (NULL);
 
           object3d_add_face (object, faces[i]);
           /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
@@ -472,8 +493,8 @@ object3d_from_contours (POLYAREA *contours,
             face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
         }
 
-      faces[npoints    ] = make_face3d (); /* bottom_face */
-      faces[npoints + 1] = make_face3d (); /* top_face */
+      faces[npoints    ] = make_face3d ("Bottom"); /* bottom_face */
+      faces[npoints + 1] = make_face3d ("Top");    /* top_face */
       if (invert_face_normals)
         {
           face3d_set_normal (faces[npoints    ], 0., 0., -1.); /* bottom_face */
@@ -501,7 +522,7 @@ object3d_from_contours (POLYAREA *contours,
           face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints]));
         }
 
-      ct = contour;
+      ct = outer_contour;
       start_of_ct = 0;
       offset_in_ct = 0;
       ct_npoints = get_contour_npoints (ct);
@@ -718,11 +739,25 @@ GList *
 object3d_from_board_outline (void)
 {
   POLYAREA *board_outline = board_outline_poly (true);
+  POLYAREA *pa;
 
 #if 0
   return object3d_from_soldermask_within_area (board_outline, TOP_SIDE);
 #else
 
+  if (board_outline == NULL)
+    return NULL;
+
+  /* Erase outer contour naming from the polygon - we don't want all the
+   * hole names that get combined into the outer name! */
+  pa = board_outline;
+  do
+    {
+      free (pa->contours->name);
+      pa->contours->name = NULL;
+    }
+  while ((pa = pa->f) != board_outline);
+
   appearance *board_appearance;
   appearance *top_bot_appearance;
   GList *objects;
@@ -741,7 +776,8 @@ object3d_from_board_outline (void)
 #endif
                                     board_appearance,
                                     top_bot_appearance,
-                                    false); /* Don't invert */
+                                    false, /* Don't invert */
+                                    PCB->Name);
 
 //  destroy_appearance (board_appearance); /* XXX: HANGING ON TO THIS FOR NOW */
 //  destroy_appearance (top_bot_appearance); /* XXX: HANGING ON TO THIS FOR NOW */
@@ -991,6 +1027,7 @@ object3d_from_soldermask_within_area (POLYAREA *area, int side)
   struct mask_info info;
   BoxType bounds;
   LayerType *layer;
+  POLYAREA *pa;
 
   poly_Copy0 (&info.poly, area);
   info.side = side;
@@ -1011,6 +1048,19 @@ object3d_from_soldermask_within_area (POLYAREA *area, int side)
   r_search (PCB->Data->pin_tree, &bounds, NULL, pv_mask_callback, &info);
   r_search (PCB->Data->via_tree, &bounds, NULL, pv_mask_callback, &info);
 
+  if (info.poly == NULL)
+    return NULL;
+
+  /* Erase outer contour naming from the polygon - we don't want all the
+   * hole names that get combined into the outer name! */
+  pa = info.poly;
+  do
+    {
+      free (pa->contours->name);
+      pa->contours->name = NULL;
+    }
+  while ((pa = pa->f) != info.poly);
+
   mask_appearance = make_appearance ();
   appearance_set_color (mask_appearance, 0.2, 0.8, 0.2);
 
@@ -1023,8 +1073,9 @@ object3d_from_soldermask_within_area (POLYAREA *area, int side)
                                     (side == TOP_SIDE) ? -HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS - HACK_MASK_THICKNESS : HACK_BOARD_THICKNESS / 2 + HACK_COPPER_THICKNESS, /* Top */
 #endif
                                     mask_appearance,
-                                    NULL,
-                                    false); /* Don't invert */
+                                    NULL,  /* top_bot_appearance */
+                                    false, /* Don't invert */
+                                    (side == TOP_SIDE) ? "Top soldermask" : "Bottom soldermask"); /* Name */
 
 //  destroy_appearance (mask_appearance); /* XXX: HANGING ON TO THIS FOR NOW */
 
@@ -1168,6 +1219,7 @@ polygon_copper_callback (const BoxType * b, void *cl)
   PolygonType *poly = (PolygonType *) b;
   struct mask_info *info = (struct mask_info *) cl;
   POLYAREA *np, *res;
+  POLYAREA *pa;
 
   if (poly->Clipped == NULL)
     {
@@ -1180,18 +1232,94 @@ polygon_copper_callback (const BoxType * b, void *cl)
   else
     poly_Copy0 (&np, poly->Clipped); /* Just copy the first polygon piece */
 
+  if (np == NULL)
+    return 0;
+
+  /* Erase outer contour naming from the polygon - we don't want all the
+   * hole names that get combined into the outer name! */
+  pa = np;
+  do
+    {
+      free (pa->contours->name);
+      pa->contours->name = NULL;
+    }
+  while ((pa = pa->f) != np);
+
   poly_Boolean_free (info->poly, np, &res, PBO_UNITE);
   info->poly = res;
 
   return 1;
 }
 
+static
+char *netname_from_connection_name (int type, ElementType *ele, void *ptr2)
+{
+  char *netname = NULL;
+  char *connection_name;
+
+  if (ele == NULL || NAMEONPCB_NAME (ele) == NULL)
+    return NULL;
+
+  connection_name = ConnectionName (type, ele, ptr2);
+
+  /* ConnectionName uses a static buffer - URGH!! */
+  /*
+   * if (connection_name == NULL)
+   *   return NULL;
+   */
+
+  /* Find netlist entry */
+  MENU_LOOP (&PCB->NetlistLib);
+  {
+    if (!menu->Name)
+    continue;
+
+    ENTRY_LOOP (menu);
+    {
+      if (!entry->ListEntry)
+        continue;
+
+      if (strcmp (entry->ListEntry, connection_name) == 0) {
+        netname = g_strdup (menu->Name);
+        /* For some reason, the netname has spaces in front of it, strip them */
+        g_strstrip (netname);
+        break;
+      }
+    }
+    END_LOOP;
+
+    if (netname != NULL)
+      break;
+  }
+  END_LOOP;
+
+  /* ConnectionName uses a static buffer - URGH!! */
+  /*
+   * free (connection_name);
+   */
+
+  return netname;
+}
+
+static
+char *netname_from_pin (PinType *pin)
+{
+  return netname_from_connection_name (PIN_TYPE, pin->Element, pin);
+}
+
+static
+char *netname_from_pad (PadType *pad)
+{
+  return netname_from_connection_name (PAD_TYPE, pad->Element, pad);
+}
+
 static int
 pad_copper_callback (const BoxType * b, void *cl)
 {
   PadType *pad = (PadType *) b;
   struct copper_info *info = (struct copper_info *) cl;
   POLYAREA *np, *res;
+  char *netname;
 
   if (XOR (TEST_FLAG (ONSOLDERFLAG, pad), (info->side == BOTTOM_SIDE)))
     return 0;
@@ -1199,6 +1327,13 @@ pad_copper_callback (const BoxType * b, void *cl)
   if (!(np = PadPoly (pad, pad->Thickness)))
     return 0;
 
+  netname = netname_from_pad (pad);
+  if (netname != NULL)
+    {
+      np->contours->name = strdup (netname);
+      g_free (netname);
+    }
+
   poly_Boolean_free (info->poly, np, &res, PBO_UNITE);
   info->poly = res;
 
@@ -1211,10 +1346,18 @@ pv_copper_callback (const BoxType * b, void *cl)
   PinType *pv = (PinType *)b;
   struct copper_info *info = cl;
   POLYAREA *np, *res;
+  char *netname;
 
   if (!(np = PinPoly (pv, PIN_SIZE (pv))))
     return 0;
 
+  netname = netname_from_pin (pv);
+  if (netname != NULL)
+    {
+      np->contours->name = strdup (netname);
+      g_free (netname);
+    }
+
   poly_Boolean_free (info->poly, np, &res, PBO_UNITE);
   info->poly = res;
 
@@ -1267,6 +1410,27 @@ update_object_pointers (POLYAREA **group_m_poly, object3d *old_object, object3d
     }
 }
 
+/* Returns a string allocated with g_malloc family of functions */
+static char *
+merge_contour_name (char *old, const char *new)
+{
+  char *combined;
+
+  if (old == NULL)
+    return g_strdup (new);
+
+  if (new == NULL)
+    return old;
+
+  if (strcmp (old, new) == 0)
+    return old;
+
+  combined = g_strdup_printf ("%s_%s", old, new);
+  g_free (old);
+
+  return combined;
+}
+
 GList *
 object3d_from_copper_layers_within_area (POLYAREA *area)
 {
@@ -1375,6 +1539,17 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
           continue;
         }
 
+      if (1)
+        {
+          POLYAREA *pa = info.poly;
+          do
+            {
+              printf ("Polygon piece with outer contour named %s\n",
+                      pa->contours->name == NULL ? "NULL" : pa->contours->name);
+            }
+          while ((pa = pa->f) != info.poly);
+        }
+
       group_objects = g_list_concat (group_objects,
         object3d_from_contours (info.poly,
 #ifdef REVERSED_PCB_CONTOURS
@@ -1385,8 +1560,9 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
                                 -depth - HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS, /* Top */
 #endif
                                 copper_appearance,
-                                NULL,
-                                false)); /* Don't invert */
+                                NULL,  /* top_bot_appearance */
+                                false, /* Don't invert */
+                                "Net")); /* Name */
 
       group_m_polyarea[group] = info.poly;
     }
@@ -1449,8 +1625,9 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
                                                -top_depth    - HACK_BOARD_THICKNESS / 2,                         /* Top */
 #endif
                                                copper_appearance,
-                                               NULL,
-                                               false); /* Don't invert */
+                                               NULL,  /* top_bot_appearance */
+                                               false, /* Don't invert */
+                                               NULL); /* Name */
 
 /* Connect the via barrels in this block of code */
 #if 1
@@ -1562,6 +1739,9 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
               /* Steal the data from the old bottom object */
               steal_object_geometry (top_group_object, bottom_group_object);
 
+              printf ("Merging object with name %s and %s\n", top_group_object->name, bottom_group_object->name);
+              top_group_object->name = merge_contour_name (top_group_object->name, bottom_group_object->name);
+
               /* Delete the old bottom object */
               destroy_object3d (bottom_group_object);
             }
@@ -1599,8 +1779,9 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
                                               -top_depth    - HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS, /* Top */
 #endif
                                               copper_appearance,
-                                              NULL,
-                                              true); /* Invert */
+                                              NULL,  /* top_bot_appearance */
+                                              true,  /* Invert */
+                                              NULL); /* Name */
 
 /* Connect the via drill holes in this block of code */
 #if 1
diff --git a/src/hid/common/object3d.h b/src/hid/common/object3d.h
index 82b69fd5..edf4d4c 100644
--- a/src/hid/common/object3d.h
+++ b/src/hid/common/object3d.h
@@ -15,7 +15,7 @@ void object3d_set_appearance (object3d *object, appearance *appear);
 void object3d_add_edge (object3d *object, edge_ref edge);
 void object3d_add_vertex (object3d *object, vertex3d *vertex);
 void object3d_add_face (object3d *object, face3d *face);
-GList *object3d_from_contours (POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance, bool extrude_inverted);
+GList *object3d_from_contours (POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance, bool extrude_inverted, char *base_name);
 GList *object3d_from_board_outline (void);
 GList *object3d_from_soldermask_within_area (POLYAREA *area, int side);
 GList *object3d_from_copper_layers_within_area (POLYAREA *area);
diff --git a/src/hid/step/object3d_step.c b/src/hid/step/object3d_step.c
index 01404dc..6f67e90 100644
--- a/src/hid/step/object3d_step.c
+++ b/src/hid/step/object3d_step.c
@@ -302,6 +302,7 @@ object3d_to_step_body_fragment (step_file *step,
       face3d *face = face_iter->data;
       bool outer_contour = true;
       step_id_list face_contour_list = NULL;
+      char *face_name;
 
       for (contour_iter = face->contours;
            contour_iter != NULL;
@@ -331,7 +332,8 @@ object3d_to_step_body_fragment (step_file *step,
         }
 
       face_contour_list = g_list_reverse (face_contour_list);
-      face->face_identifier = step_advanced_face (step, "NONE", face_contour_list, face->surface_identifier, !face->surface_orientation_reversed);
+      face_name = (face->name != NULL) ? face->name : "NONE";
+      face->face_identifier = step_advanced_face (step, face_name, face_contour_list, face->surface_identifier, !face->surface_orientation_reversed);
       shell_face_list = g_list_prepend (shell_face_list, GINT_TO_POINTER (face->face_identifier));
     }
 
@@ -455,9 +457,16 @@ object3d_list_export_to_step_part (GList *objects, const char *filename)
       object3d *object = object_iter->data;
       GString *body_name;
 
-      body_name = g_string_new ("part body");
-      if (multiple_bodies)
-        g_string_append_printf (body_name, " - %i", part);
+      if (object->name != NULL)
+        {
+          body_name = g_string_new (object->name);
+        }
+      else
+        {
+          body_name = g_string_new ("part body");
+          if (multiple_bodies)
+            g_string_append_printf (body_name, " - %i", part);
+        }
 
       object3d_to_step_body_fragment (step, object, body_name->str, &comp_brep, &styled_items, appear_hash);
 
@@ -535,10 +544,21 @@ object3d_list_export_to_step_assy (GList *objects, const char *filename)
       part_name = g_string_new ("PCB board");
       body_name = g_string_new ("PCB board body");
 
+      if (object->name != NULL)
+        {
+          part_name = g_string_new (object->name);
+        }
+      else
+        {
+          part_name = g_string_new ("part");
+          if (multiple_parts)
+            g_string_append_printf (body_name, " - %i", part);
+        }
+
       if (multiple_parts)
         {
           g_string_append_printf (part_id, "-%i", part);
-          g_string_append_printf (part_name, " - %i", part);
+//          g_string_append_printf (part_name, " - %i", part);
           g_string_append_printf (body_name, " - %i", part);
         }
 
diff --git a/src/hid/step/step.c b/src/hid/step/step.c
index 47499ce..a79b3c2 100644
--- a/src/hid/step/step.c
+++ b/src/hid/step/step.c
@@ -210,8 +210,8 @@ step_do_export (HID_Attr_Val * options)
   } while ((piece = piece->f) != board_outline);
   poly_Free (&board_outline);
 
-  object3d_list_export_to_step_part (board_outline_list, temp_pcb_filename);
-//  object3d_list_export_to_step_assy (board_outline_list, temp_pcb_filename);
+//  object3d_list_export_to_step_part (board_outline_list, temp_pcb_filename);
+  object3d_list_export_to_step_assy (board_outline_list, temp_pcb_filename);
   g_list_free_full (board_outline_list, (GDestroyNotify)destroy_object3d);
 
   if (0) {
diff --git a/src/polyarea.h b/src/polyarea.h
index bcb2152..2d9d868 100644
--- a/src/polyarea.h
+++ b/src/polyarea.h
@@ -71,10 +71,12 @@ enum
 
 typedef struct CVCList CVCList;
 typedef struct VNODE VNODE;
+typedef struct PLINE PLINE;
 struct CVCList
 {
     double angle;
     VNODE *parent;
+    PLINE *parent_contour;
     CVCList *prev, *next, *head;
     char poly, side;
     bool skip_me;
@@ -94,7 +96,6 @@ struct VNODE
     Coord radius;
 };
 
-typedef struct PLINE PLINE;
 struct PLINE
 {
     Coord xmin, ymin, xmax, ymax;
diff --git a/src/polygon1.c b/src/polygon1.c
index efece45..a084876 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -262,7 +262,7 @@ new_descriptor
   (C) 2006 harry eaton
 */
 static CVCList *
-new_descriptor (VNODE * a, char poly, char side)
+new_descriptor (VNODE * a, PLINE *pl, char poly, char side)
 {
   CVCList *l = (CVCList *) malloc (sizeof (CVCList));
   Vector v;
@@ -272,6 +272,7 @@ new_descriptor (VNODE * a, char poly, char side)
     return NULL;
   l->head = NULL;
   l->parent = a;
+  l->parent_contour = pl;
   l->poly = poly;
   l->side = side;
   l->next = l->prev = l;
@@ -352,11 +353,11 @@ insert_descriptor
    argument start is the head of the list of cvclists
 */
 static CVCList *
-insert_descriptor (VNODE * a, char poly, char side, CVCList * start)
+insert_descriptor (VNODE * a, PLINE *pl, char poly, char side, CVCList * start)
 {
   CVCList *l, *newone, *big, *small;
 
-  if (!(newone = new_descriptor (a, poly, side)))
+  if (!(newone = new_descriptor (a, pl, poly, side)))
     return NULL;
   /* search for the CVCList for this point */
   if (!start)
@@ -648,10 +649,10 @@ add_descriptors (PLINE * pl, char poly, CVCList * list)
 	{
 	  assert (node->cvc_prev == (CVCList *) - 1
 		  && node->cvc_next == (CVCList *) - 1);
-	  list = node->cvc_prev = insert_descriptor (node, poly, 'P', list);
+	  list = node->cvc_prev = insert_descriptor (node, pl, poly, 'P', list);
 	  if (!node->cvc_prev)
 	    return NULL;
-	  list = node->cvc_next = insert_descriptor (node, poly, 'N', list);
+	  list = node->cvc_next = insert_descriptor (node, pl, poly, 'N', list);
 	  if (!node->cvc_next)
 	    return NULL;
 	}
@@ -1526,6 +1527,28 @@ find_inside (const BoxType * b, void *cl)
   return 0;
 }
 
+/* Returns a string allocated with g_malloc family of functions */
+static char *
+merge_contour_name (char *old, const char *new)
+{
+  char *combined;
+
+  if (old == NULL)
+    return g_strdup (new);
+
+  if (new == NULL)
+    return old;
+
+  if (strcmp (old, new) == 0)
+    return old;
+
+  /* XXX: BUG.. AS SOON AS WE GET A NAME CLASH, WE KEEP APPENDING ALL NEW NET-NAMES WE ENCOUNTER.... WE SHOULD ACTUALLY GATHER A LIST OF NAMES USED, THEN COLLATE AT THE END */
+  combined = g_strdup_printf ("%s_%s", old, new);
+  g_free (old);
+
+  return combined;
+}
+
 static void
 InsertHoles (jmp_buf * e, POLYAREA * dest, PLINE ** src)
 {
@@ -1673,6 +1696,9 @@ InsertHoles (jmp_buf * e, POLYAREA * dest, PLINE ** src)
 	  container->next = curh;
 	  r_insert_entry (pa_info->pa->contour_tree, (BoxType *) curh, 0);
 
+	  /* Merge hole names into the outer contour name */
+	  container->name = merge_contour_name (container->name, curh->name);
+
 	}
     }
   r_destroy_tree (&tree);
@@ -1758,7 +1784,7 @@ SubJ_Rule (char p, VNODE *e, DIRECTION * cdir)
  */
 /* *curv is considered a vertex */
 static int
-jump (VNODE **curv, DIRECTION *cdir, J_Rule j_rule)
+jump (VNODE **curv, DIRECTION *cdir, J_Rule j_rule, char **contour_name)
 {
   CVCList *d, *start, *incoming;
   VNODE *e; /* e is considered an edge */
@@ -1797,6 +1823,7 @@ jump (VNODE **curv, DIRECTION *cdir, J_Rule j_rule)
 #endif
 	      *curv = d->parent;
 	      *cdir = newone;
+	      *contour_name = merge_contour_name (*contour_name, d->parent_contour->name);
 	      return TRUE;
 	    }
 	}
@@ -1823,6 +1850,7 @@ jump (VNODE **curv, DIRECTION *cdir, J_Rule j_rule)
 #endif
 	      *curv = d->parent;
 	      *cdir = newone;
+	      *contour_name = merge_contour_name (*contour_name, d->parent_contour->name);
 	      return TRUE;
 	    }
 	}
@@ -1833,7 +1861,7 @@ jump (VNODE **curv, DIRECTION *cdir, J_Rule j_rule)
 
 /* start is considered a vertex */
 static int
-Gather (VNODE *startv, PLINE **result, J_Rule j_rule, DIRECTION initdir)
+Gather (VNODE *startv, PLINE **result, J_Rule j_rule, DIRECTION initdir, char **contour_name)
 {
   VNODE *curv = startv; /* curv is considered a vertex */
   VNODE *newn;
@@ -1875,21 +1903,31 @@ Gather (VNODE *startv, PLINE **result, J_Rule j_rule, DIRECTION initdir)
       curv = (dir == FORW) ? NEXT_VERTEX (curv) : PREV_VERTEX (curv);
 
       /* see where to go next */
-      if (!jump (&curv, &dir, j_rule))
+      if (!jump (&curv, &dir, j_rule, contour_name))
 	break;
     }
   while (1);
+
+  if (*contour_name != NULL)
+    {
+      fprintf (stderr, "Setting contour name on intersected contour as %s\n", *contour_name);
+      (*result)->name = strdup (*contour_name);
+    }
+
+  g_free (*contour_name);
+  *contour_name = NULL;
+
   return err_ok;
 }				/* Gather */
 
 /* curv is considered a vertex */
 static void
 Collect1 (jmp_buf *e, VNODE *curv, DIRECTION dir, POLYAREA **contours,
-          PLINE **holes, J_Rule j_rule)
+          PLINE **holes, J_Rule j_rule, char **contour_name)
 {
   PLINE *p = NULL;		/* start making contour */
   int errc = err_ok;
-  if ((errc = Gather (curv, &p, j_rule, dir)) != err_ok)
+  if ((errc = Gather (curv, &p, j_rule, dir, contour_name)) != err_ok)
     {
       if (p != NULL)
 	poly_DelContour (&p);
@@ -1921,6 +1959,7 @@ Collect (char poly, jmp_buf * e, PLINE * a, POLYAREA ** contours, PLINE ** holes
          J_Rule j_rule)
 {
   VNODE *cure; /* cure is considered an edge */
+  char *contour_name = merge_contour_name (NULL, a->name);
   DIRECTION dir = UNINITIALISED;
 
   cure = (&a->head);
@@ -1939,7 +1978,7 @@ Collect (char poly, jmp_buf * e, PLINE * a, POLYAREA ** contours, PLINE ** holes
       if (j_rule (poly, cure, &dir) && cure->Flags.mark == 0)
         Collect1 (e, (dir == FORW) ? EDGE_BACKWARD_VERTEX (cure) :
                                      EDGE_FORWARD_VERTEX (cure),
-                  dir, contours, holes, j_rule);
+                  dir, contours, holes, j_rule, &contour_name);
     }
   while ((cure = NEXT_EDGE (cure)) != &a->head);
 }				/* Collect */
@@ -2070,6 +2109,8 @@ M_B_AREA_Collect (jmp_buf * e, POLYAREA * bfst, POLYAREA ** contours,
 		PutContour (e, tmp, contours, holes, b, NULL, NULL);
 		break;
 	      case PBO_UNITE:
+                if ((*cur)->name != NULL)
+                  printf ("XXX: Dropping named contour %s during UNITE operation... name shold be merged into containing contour!!\n", (*cur)->name);
 		break;		/* nothing to do - already included */
 	      }
 	  else if ((*cur)->Flags.status == OUTSIDE)
@@ -2157,6 +2198,8 @@ M_POLYAREA_separate_isected (jmp_buf * e, POLYAREA ** pieces,
 	  int is_first = contour_is_first (a, curc);
 	  int is_last = contour_is_last (curc);
 	  int isect_contour = (curc->Flags.status == ISECTED);
+          if (isect_contour && curc->name != NULL)
+            printf ("A contour with name %s was ISECTED\n", curc->name);
 
 	  next = curc->next;
 
@@ -2308,6 +2351,8 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
 
 	      /* Delete the outer contour */
 	      curc = a->contours;
+              if (curc->name != NULL)
+                printf ("XXX: Dropping named contour %s during operation (1)... name shold be merged into containing contour??\n", curc->name);
 	      remove_contour (a, NULL, curc, FALSE);	/* Rtree deleted in poly_Free below */
 	      /* a->contours now points to the remaining holes */
 	      poly_DelContour (&curc);
@@ -2319,6 +2364,8 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
 		  while (curc->next != NULL)
 		    curc = curc->next;
 
+                  if (curc->name != NULL)
+                    printf ("XXX: Placing holes after deleted outer contour into the holes list\n");
 		  /* Take the holes and prepend to the holes queue */
 		  curc->next = *holes;
 		  *holes = a->contours;
@@ -2366,6 +2413,8 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
 		}
 
 	      /* Remove hole from the contour */
+              if (info.result->name != NULL)
+                printf ("XXX: Dropping named contour %s during operation (2)... name shold be merged into containing contour??\n", info.result->name);
 	      remove_contour (a, prev, info.result, TRUE);
 	      poly_DelContour (&info.result);
 	    }
@@ -2421,10 +2470,14 @@ M_POLYAREA_update_primary (jmp_buf * e, POLYAREA ** pieces,
 	      if (del_contour)
 		{
 		  /* Delete the contour */
+                  if (curc->name != NULL)
+                    printf ("XXX: Dropping named contour %s during operation (3)... name shold be merged into containing contour??\n", curc->name);
 		  poly_DelContour (&curc);	/* NB: Sets curc to NULL */
 		}
 	      else if (hole_contour)
 		{
+                  if (curc->name != NULL)
+                    printf ("XXX: Placing named contour %s into the holes list\n", curc->name);
 		  /* Link into the list of holes */
 		  curc->next = *holes;
 		  *holes = curc;
@@ -2535,12 +2588,12 @@ add_dummy_descriptors_at_point_from_pline (Vector point, PLINE * pl, char poly,
         {
           if (node->cvc_prev == NULL)
             {
-              list = node->cvc_prev = insert_descriptor (node, poly, 'P', list);
+              list = node->cvc_prev = insert_descriptor (node, pl, poly, 'P', list);
               g_return_val_if_fail (node->cvc_prev != NULL, NULL);
             }
           if (node->cvc_next == NULL)
             {
-              list = node->cvc_next = insert_descriptor (node, poly, 'N', list);
+              list = node->cvc_next = insert_descriptor (node, pl, poly, 'N', list);
               g_return_val_if_fail (node->cvc_next != NULL, NULL);
             }
         }
@@ -3488,6 +3541,9 @@ poly_CopyContour (PLINE ** dst, PLINE * src)
   (*dst)->cy = src->cy;
   (*dst)->radius = src->radius;
 
+  if (src->name != NULL)
+    (*dst)->name = strdup (src->name);
+
   for (cur = NEXT_EDGE (&src->head); cur != &src->head; cur = NEXT_VERTEX (cur))
     {
       if ((newnode = poly_CreateNodeFull (cur->point, cur->is_round, cur->cx, cur->cy, cur->radius)) == NULL)
