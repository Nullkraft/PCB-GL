Bottom: 8a0953edc93717637febf4a393b2d481e3a9f608
Top:    81bebf78d78cca8304a3d476e9c6866a341b1c21
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-05-08 20:06:08 +0100

Catch incomplete step data without crashing

XXX: May be plenty of other cases where we assume certain data is present!


---

diff --git a/src/hid/step/utils.cpp b/src/hid/step/utils.cpp
index ea90a52..e44b78a 100644
--- a/src/hid/step/utils.cpp
+++ b/src/hid/step/utils.cpp
@@ -70,7 +70,15 @@ find_all_pd_with_sdr (InstMgr *instance_list, pd_list *pd_list)
     {
       SdaiRepresented_definition *sdr_definition = sdr->definition_ ();
       SdaiProduct_definition_shape *pds = (SdaiProduct_definition_shape *)(SdaiProperty_definition_ptr)(*sdr_definition);
-      SdaiProduct_definition *pd = *(SdaiCharacterized_product_definition_ptr)(*pds->definition_ ());
+      SdaiProduct_definition *pd;
+
+      if (pds == NULL)
+        {
+          fprintf (stderr, "pds == NULL in find_all_pd_with_sdr\n");
+          return;
+        }
+
+      pd = *(SdaiCharacterized_product_definition_ptr)(*pds->definition_ ());
 
       pd_list->push_back (pd);
 
diff --git a/src/netlist.c b/src/netlist.c
index a8f5286..73dd42e 100644
--- a/src/netlist.c
+++ b/src/netlist.c
@@ -251,7 +251,7 @@ netlist_netclass (LibraryMenuType *net, const char *netclass)
 /* The primary purpose of this action is to rebuild a netlist from a
    script, in conjunction with the clear action above.  */
 static int
-netlist_add (const char *netname, const char *pinname, const char *netclass)
+netlist_add (const char *netname, const char *pinname)
 {
   int ni, pi;
   LibraryType *netlist = &PCB->NetlistLib;
@@ -266,12 +266,7 @@ netlist_add (const char *netname, const char *pinname, const char *netclass)
       }
   if (net == NULL)
     {
-      net = CreateNewNet (netlist, (char *)netname, NULL, (char *)netclass); /* XXX: Only takes class from the first net */
-    }
-  else
-    {
-      if (netclass != NULL && strcmp (net->Netclass, netclass) != 0)
-        g_warning ("Netclass '%s' different to initial '%s'... being ignored", netclass, net->Netclass);
+      net = CreateNewNet (netlist, (char *)netname, NULL, NULL);
     }
 
   for (pi=0; pi<net->EntryN; pi++)
@@ -401,7 +396,7 @@ Netlist (int argc, char **argv, Coord x, Coord y)
   else if (strcasecmp (argv[0], "add") == 0)
     {
       /* Add is different, because the net/pin won't already exist.  */
-      return netlist_add (ARG(1), ARG(2), NULL); /* Net class? */
+      return netlist_add (ARG(1), ARG(2)); /* Net class? */
     }
   else if (strcasecmp (argv[0], "sort") == 0)
     {
diff --git a/tools/gnet-pcbfwd.scm b/tools/gnet-pcbfwd.scm
index e225704..9067978 100644
--- a/tools/gnet-pcbfwd.scm
+++ b/tools/gnet-pcbfwd.scm
@@ -57,8 +57,8 @@
 (define (pcbfwd:each-net netnames port)
   (if (not (null? netnames))
       (let ((netname (car netnames)))
-	(pcbfwd:net-class netname port)
 	(pcbfwd:each-pin netname (gnetlist:get-all-connections netname) port)
+	(pcbfwd:net-class netname port)
 	(pcbfwd:each-net (cdr netnames) port))))
 
 (define (pcbfwd:each-attr refdes attrs port)
