Bottom: 5223f5616d2326630f23af6fcde7ec59127fe87c
Top:    0adb2e7a2b09a6b308abfe5fbf618d5b92328f22
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 20:31:11 +0000

More changes...


---

diff --git a/src/polygon1.c b/src/polygon1.c
index d4ec9ae..cb7f62a 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -1072,7 +1072,7 @@ vertex_in_seg_rounded (const BoxType * b, void *cl)
     longjmp (*i->touch, TOUCHES);
 
 //  i->s->p->Flags.status = ISECTED; /* XXX */
-  s->p->Flags.status = ISECTED;
+//  s->p->Flags.status = ISECTED;
 
   new_node = node_add_single_point (s->v, i->v->point);
   if (new_node != NULL)
@@ -1374,6 +1374,29 @@ intersect (jmp_buf * jb, POLYAREA * b, POLYAREA * a, int add)
 }
 
 static void
+intersect_rounded_self (jmp_buf * e, POLYAREA *pfst)
+{
+  POLYAREA *p, *p2;
+
+  p = pfst;
+  do
+    {
+      p2 = p->f;
+      for (p2 = p->f; p2 != p; p2 = p2->f)
+        {
+          if (p->contours->xmax >= p2->contours->xmin &&
+              p->contours->ymax >= p2->contours->ymin &&
+              p->contours->xmin <= p2->contours->xmax &&
+              p->contours->ymin <= p2->contours->ymax)
+            {
+              intersect_rounded (e, p, p2, true);
+            }
+        }
+    }
+  while ((p = p->f) != pfst);
+}
+
+static void
 M_POLYAREA_intersect (jmp_buf * e, POLYAREA * afst, POLYAREA * bfst, int add, CVCList **list_out)
 {
   POLYAREA *a = afst, *b = bfst;
@@ -1383,9 +1406,14 @@ M_POLYAREA_intersect (jmp_buf * e, POLYAREA * afst, POLYAREA * bfst, int add, CV
   if (a == NULL || b == NULL)
     error (err_bad_parm);
 
-  if (1)
+  if (add)
     {
-#if 1
+      /* Intersect all a outer contours against all other piece outer + inner contours (and vice-versa) */
+      /* Intersect all b outer contours against all other piece outer + inner contours (and vice-versa) */
+      intersect_rounded_self (e, a);
+      intersect_rounded_self (e, b);
+
+#if 0
       do
         {
           do
@@ -1603,7 +1631,7 @@ label_contour (PLINE * a)
         }
       else
         {
-          g_warning ("Walked entire contour and couldn't find anything we could label - it is either all SHARED OR SHARED2");
+          g_info ("Walked entire contour and couldn't find anything we could label - it is either all SHARED OR SHARED2");
           /* Head was marked, so presumably the entire contour is either SHARED or SHARED2 */
         }
     }
@@ -2192,7 +2220,7 @@ Gather (VNODE *startv, PLINE **result, J_Rule j_rule, DIRECTION initdir, char **
 
   if (*contour_name != NULL)
     {
-      fprintf (stderr, "Setting contour name on intersected contour as %s\n", *contour_name);
+//      fprintf (stderr, "Setting contour name on intersected contour as %s\n", *contour_name);
       (*result)->name = strdup (*contour_name);
     }
 
@@ -2480,8 +2508,8 @@ M_POLYAREA_separate_isected (jmp_buf * e, POLYAREA ** pieces,
 	  int is_first = contour_is_first (a, curc);
 	  int is_last = contour_is_last (curc);
 	  int isect_contour = (curc->Flags.status == ISECTED);
-          if (isect_contour && curc->name != NULL)
-            printf ("A contour with name %s was ISECTED\n", curc->name);
+//          if (isect_contour && curc->name != NULL)
+//            printf ("A contour with name %s was ISECTED\n", curc->name);
 
 	  next = curc->next;
 
@@ -3367,6 +3395,10 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
       /* intersect needs to make a list of the contours in a and b which are intersected */
       M_POLYAREA_intersect (&e, a, b, TRUE, &the_list);
 
+      /* XXX - Need to loop the intersection routines until the geometry stabalises???
+       */
+//      M_POLYAREA_intersect (&e, a, b, TRUE, &the_list);
+
 #if 1
       M_POLYAREA_check_hairline_edges (the_list, a);
       M_POLYAREA_check_hairline_edges (the_list, b);
