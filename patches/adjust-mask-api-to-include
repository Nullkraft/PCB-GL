Bottom: 9d1890097b92f06a3ca0a0e01f5953c0fdc8d2ff
Top:    f829363eafd25f329ee83b947669cb51748cb774
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-01-07 01:33:23 +0000

Adjust mask API to include a HID_DRAW pointer


---

diff --git a/src/hid/batch/batch.c b/src/hid/batch/batch.c
index 9d3adaf..c924dcb 100644
--- a/src/hid/batch/batch.c
+++ b/src/hid/batch/batch.c
@@ -177,7 +177,7 @@ batch_destroy_gc (hidGC gc)
 }
 
 static void
-batch_use_mask (enum mask_mode mode)
+batch_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
 }
 
diff --git a/src/hid/common/extents.c b/src/hid/common/extents.c
index bc92bdc..0a33bf3 100644
--- a/src/hid/common/extents.c
+++ b/src/hid/common/extents.c
@@ -70,7 +70,7 @@ extents_destroy_gc (hidGC gc)
 }
 
 static void
-extents_use_mask (enum mask_mode mode)
+extents_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
 }
 
diff --git a/src/hid/common/hidnogui.c b/src/hid/common/hidnogui.c
index e7867de..ac9e2ed 100644
--- a/src/hid/common/hidnogui.c
+++ b/src/hid/common/hidnogui.c
@@ -77,7 +77,7 @@ nogui_destroy_gc (hidGC gc)
 }
 
 static void
-nogui_use_mask (enum mask_mode mode)
+nogui_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
   CRASH;
 }
diff --git a/src/hid/gcode/gcode.c b/src/hid/gcode/gcode.c
index 02bdff8..ea49a45 100644
--- a/src/hid/gcode/gcode.c
+++ b/src/hid/gcode/gcode.c
@@ -1202,7 +1202,7 @@ gcode_destroy_gc (hidGC gc)
 }
 
 static void
-gcode_use_mask (enum mask_mode mode)
+gcode_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
   /* does nothing */
 }
diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index 519264e..a556034 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -50,7 +50,6 @@ static void gerber_parse_arguments (int *argc, char ***argv);
 static int gerber_set_layer (const char *name, int group, int empty);
 static hidGC gerber_make_gc (void);
 static void gerber_destroy_gc (hidGC gc);
-static void gerber_use_mask (enum mask_mode mode);
 static void gerber_set_color (hidGC gc, const char *name);
 static void gerber_set_line_cap (hidGC gc, EndCapStyle style);
 static void gerber_set_line_width (hidGC gc, Coord width);
@@ -957,7 +956,7 @@ gerber_destroy_gc (hidGC gc)
 }
 
 static void
-gerber_use_mask (enum mask_mode mode)
+gerber_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
   current_mask = mode;
 }
diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index 1c8e814..8024e84 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -324,7 +324,7 @@ ghid_draw_bg_image (void)
 #define WHICH_GC(gtk_gc) (cur_mask == HID_MASK_CLEAR ? priv->mask_gc : (gtk_gc)->gdk_gc)
 
 void
-ghid_use_mask (enum mask_mode mode)
+ghid_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
   static int mask_seq_id = 0;
   GdkColor color;
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index ef8774b..98e02ad 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -541,7 +541,7 @@ ghid_draw_bg_image (void)
 }
 
 void
-ghid_use_mask (enum mask_mode mode)
+ghid_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
   render_priv *priv = gport->render_priv;
   hidgl_instance *hidgl = priv->hidgl;
diff --git a/src/hid/gtk/gui.h b/src/hid/gtk/gui.h
index de062d8..65c876a 100644
--- a/src/hid/gtk/gui.h
+++ b/src/hid/gtk/gui.h
@@ -480,7 +480,7 @@ void ghid_pinout_window_show (GHidPort *out, ElementType *Element);
 int ghid_set_layer (const char *name, int group, int empty);
 hidGC ghid_make_gc (void);
 void ghid_destroy_gc (hidGC);
-void ghid_use_mask (enum mask_mode mode);
+void ghid_use_mask (HID_DRAW *hid_draw, enum mask_mode mode);
 void ghid_set_color (hidGC gc, const char *name);
 void ghid_set_line_cap (hidGC gc, EndCapStyle style);
 void ghid_set_line_width (hidGC gc, Coord width);
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index 6a56893..0191370 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -242,7 +242,7 @@ Location of the @file{pcb-menu.res} file which defines the menu for the lesstif
 
 REGISTER_ATTRIBUTES (lesstif_attribute_list)
 
-static void lesstif_use_mask (enum mask_mode mode);
+static void lesstif_use_mask (HID_DRAW *hid_draw, enum mask_mode mode);
 static void zoom_max ();
 static void zoom_to (double factor, int x, int y);
 static void zoom_by (double factor, int x, int y);
@@ -2503,7 +2503,7 @@ idle_proc (XtPointer dummy)
     {
       int mx, my;
       BoxType region;
-      lesstif_use_mask (HID_MASK_OFF);
+      lesstif_use_mask (&lesstif_graphics, HID_MASK_OFF);
       pixmap = main_pixmap;
       mx = view_width;
       my = view_height;
@@ -2584,7 +2584,7 @@ idle_proc (XtPointer dummy)
       DrawBackgroundImage();
       hid_expose_callback (&lesstif_graphics, &region, 0);
       draw_grid ();
-      lesstif_use_mask (HID_MASK_OFF);
+      lesstif_use_mask (&lesstif_graphics, HID_MASK_OFF);
       show_crosshair (0); /* To keep the drawn / not drawn info correct */
       XSetFunction (display, my_gc, GXcopy);
       XCopyArea (display, main_pixmap, window, my_gc, 0, 0, view_width,
@@ -3077,7 +3077,7 @@ lesstif_destroy_gc (hidGC gc)
 }
 
 static void
-lesstif_use_mask (enum mask_mode mode)
+lesstif_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
   if ((TEST_FLAG (THINDRAWFLAG, PCB) || TEST_FLAG(THINDRAWPOLYFLAG, PCB)) &&
       !use_xrender)
diff --git a/src/hid/nelma/nelma.c b/src/hid/nelma/nelma.c
index a4712de..5597471 100644
--- a/src/hid/nelma/nelma.c
+++ b/src/hid/nelma/nelma.c
@@ -785,7 +785,7 @@ nelma_destroy_gc(hidGC gc)
 }
 
 static void 
-nelma_use_mask(enum mask_mode mode)
+nelma_use_mask(HID_DRAW *hid_draw, enum mask_mode mode)
 {
 	/* does nothing */
 }
diff --git a/src/hid/png/png.c b/src/hid/png/png.c
index 8bf9a68..e57b14a 100644
--- a/src/hid/png/png.c
+++ b/src/hid/png/png.c
@@ -1373,7 +1373,7 @@ png_destroy_gc (hidGC gc)
 }
 
 static void
-png_use_mask (enum mask_mode mode)
+png_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
   if (photo_mode)
     return;
diff --git a/src/hid/ps/eps.c b/src/hid/ps/eps.c
index bce73dd..91ab387 100644
--- a/src/hid/ps/eps.c
+++ b/src/hid/ps/eps.c
@@ -36,7 +36,6 @@ static void eps_parse_arguments (int *argc, char ***argv);
 static int eps_set_layer (const char *name, int group, int empty);
 static hidGC eps_make_gc (void);
 static void eps_destroy_gc (hidGC gc);
-static void eps_use_mask (enum mask_mode mode);
 static void eps_set_color (hidGC gc, const char *name);
 static void eps_set_line_cap (hidGC gc, EndCapStyle style);
 static void eps_set_line_width (hidGC gc, Coord width);
@@ -442,7 +441,7 @@ eps_destroy_gc (hidGC gc)
 }
 
 static void
-eps_use_mask (enum mask_mode mode)
+eps_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
   static int mask_pending = 0;
   switch (mode)
diff --git a/src/hid/ps/ps.c b/src/hid/ps/ps.c
index 35b287a..b8f5c06 100644
--- a/src/hid/ps/ps.c
+++ b/src/hid/ps/ps.c
@@ -1035,7 +1035,7 @@ ps_destroy_gc (hidGC gc)
 }
 
 static void
-ps_use_mask (enum mask_mode mode)
+ps_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
   /* does nothing */
 }
diff --git a/src/hid_draw.h b/src/hid_draw.h
index 734a208..6b07d3a 100644
--- a/src/hid_draw.h
+++ b/src/hid_draw.h
@@ -33,7 +33,7 @@ typedef struct hid_draw_class_st
   /* Make an empty graphics context.  */
   hidGC (*make_gc) (void);
   void (*destroy_gc) (hidGC gc);
-  void (*use_mask) (enum mask_mode mode);
+  void (*use_mask) (HID_DRAW *hid_draw, enum mask_mode mode);
 
   /* Set a color.  Names can be like "red" or "#rrggbb" or special
      names like "erase".  *Always* use the "erase" color for removing
@@ -153,7 +153,7 @@ hid_draw_destroy_gc (hidGC gc)
 inline void
 hid_draw_use_mask (HID_DRAW *hid_draw, enum mask_mode mode)
 {
-  hid_draw->klass->use_mask (mode);
+  hid_draw->klass->use_mask (hid_draw, mode);
 }
 
 inline void
