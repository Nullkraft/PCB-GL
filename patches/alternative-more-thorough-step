Bottom: 8e5c1319b44dd4ac48da1a898cd6cc4542547890
Top:    6d9de09a31c312dbe28d6365c2d1843774a6a84a
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2015-04-30 22:16:59 +0100

Alternative, more thorough STEP export code


---

diff --git a/src/Makefile.am b/src/Makefile.am
index 25d6ff2..93a7ceb 100644
--- a/src/Makefile.am
+++ b/src/Makefile.am
@@ -160,7 +160,22 @@ PCB_SRCS = \
 	hid/common/draw_helpers.h \
 	hid/common/hid_resource.c \
 	hid/common/hid_resource.h \
-	hid/hidint.h 
+	hid/common/appearance.c \
+	hid/common/appearance.h \
+	hid/common/contour3d.c \
+	hid/common/contour3d.h \
+	hid/common/edge3d.c \
+	hid/common/edge3d.h \
+	hid/common/face3d.c \
+	hid/common/face3d.h \
+	hid/common/object3d.c \
+	hid/common/object3d.h \
+	hid/common/quad.c \
+	hid/common/quad.h \
+	hid/common/step_id.h \
+	hid/common/vertex3d.c \
+	hid/common/vertex3d.h \
+	hid/hidint.h
 
 EXTRA_pcb_SOURCES = ${DBUS_SRCS} ${GL_SRCS} toporouter.c toporouter.h
 nodist_EXTRA_pcb_SOURCES = dummy.cpp
@@ -176,17 +191,7 @@ LIBGTK_GDK_SRCS= \
 LIBGTK_GL_SRCS= \
 	hid/gtk/gtkhid-gl.c \
 	hid/gtk/gui-trackball.c \
-	hid/gtk/gui-trackball.h \
-	hid/gtk/quad.c \
-	hid/gtk/quad.h \
-	hid/gtk/vertex3d.c \
-	hid/gtk/vertex3d.h \
-	hid/gtk/face3d.c \
-	hid/gtk/face3d.h \
-	hid/gtk/edge3d.c \
-	hid/gtk/edge3d.h \
-	hid/gtk/object3d.c \
-	hid/gtk/object3d.h
+	hid/gtk/gui-trackball.h
 
 GL_SRCS= \
 	hid/common/hidgl.c \
@@ -478,7 +483,11 @@ LIBSTEP_SRCS = \
 	hid/step/assembly.cpp \
 	hid/step/assembly.h \
 	hid/step/utils.cpp \
-	hid/step/utils.h
+	hid/step/utils.h \
+	hid/step/step_writer.c \
+	hid/step/step_writer.h \
+	hid/step/object3d_step.c \
+	hid/step/object3d_step.h
 libstep_a_SOURCES = ${LIBSTEP_SRCS} hid/step/step_lists.h
 
 pcb_LDFLAGS = \
diff --git a/src/hid/common/appearance.c b/src/hid/common/appearance.c
new file mode 100644
index 0000000..92790fcc
--- /dev/null
+++ b/src/hid/common/appearance.c
@@ -0,0 +1,25 @@
+#include <glib.h>
+
+#include "appearance.h"
+
+appearance
+*make_appearance (void)
+{
+  appearance *appear = g_new0 (appearance, 1);
+
+  return appear;
+}
+
+void
+destroy_appearance (appearance *appear)
+{
+  g_free (appear);
+}
+
+void
+appearance_set_color (appearance *appear, float r, float g, float b)
+{
+  appear->r = r;
+  appear->g = g;
+  appear->b = b;
+}
diff --git a/src/hid/common/appearance.h b/src/hid/common/appearance.h
new file mode 100644
index 0000000..d4917d7
--- /dev/null
+++ b/src/hid/common/appearance.h
@@ -0,0 +1,7 @@
+typedef struct {
+  float r, g, b;
+} appearance;
+
+appearance *make_appearance (void);
+void destroy_appearance (appearance *appearance);
+void appearance_set_color (appearance *appearance, float r, float g, float b);
diff --git a/src/hid/common/contour3d.c b/src/hid/common/contour3d.c
new file mode 100644
index 0000000..13e865e
--- /dev/null
+++ b/src/hid/common/contour3d.c
@@ -0,0 +1,24 @@
+#include <glib.h>
+#include <stdbool.h>
+#include <stdio.h>
+
+#include "step_id.h"
+#include "quad.h"
+#include "contour3d.h"
+
+contour3d *
+make_contour3d (edge_ref first_edge)
+{
+  contour3d *contour;
+
+  contour = g_new0 (contour3d, 1);
+  contour->first_edge = first_edge;
+
+  return contour;
+}
+
+void
+destroy_contour3d (contour3d *contour)
+{
+  g_free (contour);
+}
diff --git a/src/hid/common/contour3d.h b/src/hid/common/contour3d.h
new file mode 100644
index 0000000..837e666
--- /dev/null
+++ b/src/hid/common/contour3d.h
@@ -0,0 +1,9 @@
+typedef struct {
+  edge_ref first_edge;
+
+  /* STEP crap - to hell with encapsulation */
+  step_id face_bound_identifier;
+} contour3d;
+
+contour3d *make_contour3d (edge_ref first_edge);
+void destroy_contour3d (contour3d *contour);
diff --git a/src/hid/common/edge3d.c b/src/hid/common/edge3d.c
new file mode 100644
index 0000000..23e335e
--- /dev/null
+++ b/src/hid/common/edge3d.c
@@ -0,0 +1,41 @@
+#include <stdbool.h>
+#include <stdlib.h>
+#include <stdio.h>
+#include <glib.h>
+
+#include "step_id.h"
+#include "edge3d.h"
+
+edge_info *
+make_edge_info (void)
+{
+  edge_info *info;
+
+  info = g_new0 (edge_info, 1);
+
+  return info;
+}
+
+void
+edge_info_set_round (edge_info *info, double cx, double cy, double cz, double nx, double ny, double nz, double radius)
+{
+  info->is_round = true;
+  info->cx = cx;
+  info->cy = cy;
+  info->cz = cz;
+  info->nx = nx;
+  info->ny = ny;
+  info->nz = nz;
+  info->radius = radius;
+}
+
+void edge_info_set_stitch (edge_info *info)
+{
+  info->is_stitch = true;
+}
+
+void
+destroy_edge_info (edge_info *info)
+{
+  g_free (info);
+}
diff --git a/src/hid/common/edge3d.h b/src/hid/common/edge3d.h
new file mode 100644
index 0000000..38fd6c1
--- /dev/null
+++ b/src/hid/common/edge3d.h
@@ -0,0 +1,24 @@
+typedef struct
+{
+  /* For edge curves */
+  bool is_stitch; /* Allows us to identify the stitch edge along the side of a cylinder */
+
+  /* For circular curves */
+  bool is_round;
+  double cx;
+  double cy;
+  double cz;
+  double nx;
+  double ny;
+  double nz;
+  double radius;
+
+  /* STEP crap - to hell with encapsulation */
+  step_id infinite_line_identifier;
+  step_id edge_identifier;
+} edge_info;
+
+edge_info *make_edge_info (void);
+void edge_info_set_round (edge_info *info, double cx, double cy, double cz, double nx, double ny, double nz, double radius);
+void edge_info_set_stitch (edge_info *info);
+void destroy_edge_info (edge_info *info);
diff --git a/src/hid/common/face3d.c b/src/hid/common/face3d.c
new file mode 100644
index 0000000..13d7501
--- /dev/null
+++ b/src/hid/common/face3d.c
@@ -0,0 +1,65 @@
+#include <glib.h>
+#include <stdbool.h>
+#include <stdio.h>
+
+#include "step_id.h"
+#include "quad.h"
+#include "contour3d.h"
+#include "appearance.h"
+#include "face3d.h"
+
+face3d *
+make_face3d (void)
+{
+  face3d *face;
+
+  face = g_new0 (face3d, 1);
+
+  return face;
+}
+
+void
+destroy_face3d (face3d *face)
+{
+  g_list_free_full (face->contours, (GDestroyNotify)destroy_contour3d);
+  g_free (face);
+}
+
+void
+face3d_add_contour (face3d *face, contour3d *contour)
+{
+  face->contours = g_list_append (face->contours, contour);
+}
+
+void
+face3d_set_appearance (face3d *face, appearance *appear)
+{
+  face->appear = appear;
+}
+
+void
+face3d_set_normal (face3d *face, double nx, double ny, double nz)
+{
+  face->nx = nx;
+  face->ny = ny;
+  face->nz = nz;
+}
+
+void
+face3d_set_cylindrical (face3d *face, double cx, double cy, double cz, double ax, double ay, double az, double radius)
+{
+  face->is_cylindrical = true;
+  face->cx = cx;
+  face->cy = cy;
+  face->cz = cz;
+  face->ax = ax;
+  face->ay = ay;
+  face->az = az;
+  face->radius = radius;
+}
+
+void
+face3d_set_surface_orientation_reversed (face3d *face)
+{
+  face->surface_orientation_reversed = true;
+}
diff --git a/src/hid/common/face3d.h b/src/hid/common/face3d.h
new file mode 100644
index 0000000..0998a22
--- /dev/null
+++ b/src/hid/common/face3d.h
@@ -0,0 +1,26 @@
+typedef struct {
+  double nx, ny, nz; /* Face normal?*/
+  GList *contours;
+
+  /* For cylindrical surfaces */
+  bool is_cylindrical;
+  double cx, cy, cz; /* A point on the axis */
+  double ax, ay, az; /* Direction of the axis */
+  double radius;
+
+  appearance *appear;
+
+  /* STEP crap - to hell with encapsulation */
+  step_id surface_identifier;
+  bool surface_orientation_reversed;
+  step_id face_identifier;
+  step_id face_bound_identifier;
+} face3d;
+
+face3d *make_face3d (void);
+void destroy_face3d (face3d *face);
+void face3d_add_contour (face3d *face, contour3d *contour);
+void face3d_set_appearance (face3d *face, appearance *appear);
+void face3d_set_normal (face3d *face, double nx, double ny, double nz);
+void face3d_set_cylindrical (face3d *face, double cx, double cy, double cz, double ax, double ay, double az, double radius);
+void face3d_set_surface_orientation_reversed (face3d *face);
diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
new file mode 100644
index 0000000..2da2c5c
--- /dev/null
+++ b/src/hid/common/object3d.c
@@ -0,0 +1,558 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <stdbool.h>
+
+#include <glib.h>
+
+#include "step_id.h"
+#include "quad.h"
+#include "vertex3d.h"
+#include "contour3d.h"
+#include "appearance.h"
+#include "face3d.h"
+#include "edge3d.h"
+#include "object3d.h"
+#include "polygon.h"
+#include "data.h"
+
+#include "pcb-printf.h"
+
+#define REVERSED_PCB_CONTOURS 1 /* PCB Contours are reversed from the expected CCW for outer ordering - once the Y-coordinate flip is taken into account */
+
+#ifdef REVERSED_PCB_CONTOURS
+#define COORD_TO_STEP_X(pcb, x) (COORD_TO_MM(                   (x)))
+#define COORD_TO_STEP_Y(pcb, y) (COORD_TO_MM((pcb)->MaxHeight - (y)))
+#define COORD_TO_STEP_Z(pcb, z) (COORD_TO_MM(                   (z)))
+
+#define STEP_X_TO_COORD(pcb, x) (MM_TO_COORD((x)))
+#define STEP_Y_TO_COORD(pcb, y) ((pcb)->MaxHeight - MM_TO_COORD((y)))
+#define STEP_Z_TO_COORD(pcb, z) (MM_TO_COORD((z)))
+#else
+/* XXX: BROKEN UPSIDE DOWN OUTPUT */
+#define COORD_TO_STEP_X(pcb, x) (COORD_TO_MM((x)))
+#define COORD_TO_STEP_Y(pcb, y) (COORD_TO_MM((y)))
+#define COORD_TO_STEP_Z(pcb, z) (COORD_TO_MM((z)))
+
+#define STEP_X_TO_COORD(pcb, x) (MM_TO_COORD((x)))
+#define STEP_Y_TO_COORD(pcb, y) (MM_TO_COORD((y)))
+#define STEP_Z_TO_COORD(pcb, z) (MM_TO_COORD((z)))
+#endif
+
+
+#ifndef WIN32
+/* The Linux OpenGL ABI 1.0 spec requires that we define
+ * GL_GLEXT_PROTOTYPES before including gl.h or glx.h for extensions
+ * in order to get prototypes:
+ *   http://www.opengl.org/registry/ABI/
+ */
+#   define GL_GLEXT_PROTOTYPES 1
+#endif
+
+#ifdef HAVE_OPENGL_GL_H
+#   include <OpenGL/gl.h>
+#else
+#   include <GL/gl.h>
+#endif
+
+
+#define HACK_BOARD_THICKNESS MM_TO_COORD(1.6)
+
+static GList *object3d_test_objects = NULL;
+
+void
+object3d_test_init (void)
+{
+  object3d_test_objects = object3d_from_board_outline ();
+}
+
+object3d *
+make_object3d (char *name)
+{
+  static int object3d_count = 0;
+  object3d *object;
+
+  object = g_new0 (object3d, 1);
+  object->id = object3d_count++;
+  name = g_strdup (name);
+
+  return object;
+}
+
+void
+destroy_object3d (object3d *object)
+{
+  g_list_free_full (object->vertices, (GDestroyNotify)destroy_vertex3d);
+  g_list_free_full (object->edges, (GDestroyNotify)destroy_edge);
+  g_list_free_full (object->faces, (GDestroyNotify)destroy_face3d);
+  g_free (object->name);
+  g_free (object);
+}
+
+void
+object3d_set_appearance (object3d *object, appearance *appear)
+{
+  object->appear = appear;
+}
+
+void
+object3d_add_edge (object3d *object, edge_ref edge)
+{
+  object->edges = g_list_append (object->edges, (void *)edge);
+}
+
+void
+object3d_add_vertex (object3d *object, vertex3d *vertex)
+{
+  object->vertices = g_list_append (object->vertices, vertex);
+}
+
+void
+object3d_add_face (object3d *object, face3d *face)
+{
+  object->faces = g_list_append (object->faces, face);
+}
+
+
+double colors[12][3] = {{1., 0., 0.},
+                       {1., 1., 0.},
+                       {0., 1., 0.},
+                       {0., 1., 1.},
+                       {0.5, 0., 0.},
+                       {0.5, 0.5, 0.},
+                       {0., 0.5, 0.},
+                       {0., 0.5, 0.5},
+                       {1., 0.5, 0.5},
+                       {1., 1., 0.5},
+                       {0.5, 1., 0.5},
+                       {0.5, 1., 1.}};
+
+
+#define CIRC_SEGS 64
+
+static void
+draw_quad_edge (edge_ref e, void *data)
+{
+#if 0
+  int id = ID(e) % 12;
+
+  glColor3f (colors[id][0], colors[id][1], colors[id][2]);
+#else
+  glColor3f (1., 1., 1.);
+#endif
+
+  if (UNDIR_DATA(e) != NULL) {
+    edge_info *info = UNDIR_DATA(e);
+//    if (info->is_stitch)
+//      return;
+    if (info->is_round) {
+      int i;
+      glBegin (GL_LINES);
+      for (i = 0; i < CIRC_SEGS; i++) {
+        /* XXX: THIS ASSUMES THE CIRCLE LIES IN THE X-Y PLANE */
+        glVertex3f (STEP_X_TO_COORD (PCB, info->cx + info->radius * cos (i * 2. * M_PI / (double)CIRC_SEGS)),
+                    STEP_Y_TO_COORD (PCB, info->cy + info->radius * sin (i * 2. * M_PI / (double)CIRC_SEGS)),
+                    STEP_Z_TO_COORD (PCB, info->cz));
+        glVertex3f (STEP_X_TO_COORD (PCB, info->cx + info->radius * cos ((i + 1) * 2. * M_PI / (double)CIRC_SEGS)),
+                    STEP_Y_TO_COORD (PCB, info->cy + info->radius * sin ((i + 1) * 2. * M_PI / (double)CIRC_SEGS)),
+                    STEP_Z_TO_COORD (PCB, info->cz));
+      }
+      glEnd ();
+      return;
+    }
+  }
+
+  glBegin (GL_LINES);
+  glVertex3f (STEP_X_TO_COORD (PCB, ((vertex3d *)ODATA(e))->x),
+              STEP_Y_TO_COORD (PCB, ((vertex3d *)ODATA(e))->y),
+              STEP_X_TO_COORD (PCB, ((vertex3d *)ODATA(e))->z));
+  glVertex3f (STEP_X_TO_COORD (PCB, ((vertex3d *)DDATA(e))->x),
+              STEP_Y_TO_COORD (PCB, ((vertex3d *)DDATA(e))->y),
+              STEP_X_TO_COORD (PCB, ((vertex3d *)DDATA(e))->z));
+  glEnd ();
+}
+
+static void
+object3d_draw_debug_single (object3d *object, void *user_data)
+{
+  g_return_if_fail (object->edges != NULL);
+
+//  quad_enum ((edge_ref)object->edges->data, draw_quad_edge, NULL);
+  g_list_foreach (object->edges, (GFunc)draw_quad_edge, NULL);
+}
+
+void
+object3d_draw_debug (void)
+{
+  g_list_foreach (object3d_test_objects, (GFunc)object3d_draw_debug_single, NULL);
+}
+
+/*********************************************************************************************************/
+
+static int
+get_contour_npoints (PLINE *contour)
+{
+  /* HACK FOR ROUND CONTOURS */
+  if (contour->is_round)
+    return 1;
+
+  return contour->Count;
+}
+
+static void
+get_contour_coord_n_in_step_mm (PLINE *contour, int n, double *x, double *y)
+{
+  VNODE *vertex = &contour->head;
+
+  if (contour->is_round)
+    {
+      /* HACK SPECIAL CASE FOR ROUND CONTOURS */
+
+      /* We define an arbitrary point on the contour. This is used, for example,
+       * to define a coordinate system along the contour, and coincides with where
+       * we add a straight edge down the side of an extruded cylindrical shape.
+       */
+      *x = COORD_TO_STEP_X (PCB, contour->cx - contour->radius);
+      *y = COORD_TO_STEP_Y (PCB, contour->cy);
+
+      return;
+    }
+
+  while (n > 0) {
+    vertex = vertex->next; /* The VNODE structure is circularly linked, so wrapping is OK */
+    n--;
+  }
+
+  *x = COORD_TO_STEP_X (PCB, vertex->point[0]);
+  *y = COORD_TO_STEP_Y (PCB, vertex->point[1]);
+}
+
+
+GList *
+object3d_from_board_outline (void)
+{
+  GList *board_objects = NULL;
+  object3d *board_object;
+  appearance *board_appearance;
+  appearance *top_bot_appearance;
+  POLYAREA *board_outline;
+  POLYAREA *pa;
+  PLINE *contour;
+  PLINE *ct;
+  int ncontours;
+  int npoints;
+  int i;
+  vertex3d **vertices;
+  edge_ref *edges;
+  face3d **faces;
+  int start_of_ct;
+  int offset_in_ct;
+  int ct_npoints;
+
+  board_outline = board_outline_poly (true);
+
+  /* Loop over all board outline pieces */
+  pa = board_outline;
+  do {
+
+    contour = pa->contours;
+    ncontours = 0;
+    npoints = 0;
+
+    ct = contour;
+    while (ct != NULL) {
+      ncontours ++;
+      npoints += get_contour_npoints (ct);
+      ct = ct->next;
+    }
+
+    board_object = make_object3d (PCB->Name);
+    board_appearance = make_appearance ();
+    top_bot_appearance = make_appearance ();
+    appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
+    appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
+
+    object3d_set_appearance (board_object, board_appearance);
+
+    vertices = malloc (sizeof (vertex3d *) * 2 * npoints); /* (n-bottom, n-top) */
+    edges    = malloc (sizeof (edge_ref  ) * 3 * npoints); /* (n-bottom, n-top, n-sides) */
+    faces    = malloc (sizeof (face3d *) * (npoints + 2)); /* (n-sides, 1-bottom, 1-top */
+
+    /* Define the vertices */
+    ct = contour;
+    offset_in_ct = 0;
+    ct_npoints = get_contour_npoints (ct);
+
+    for (i = 0; i < npoints; i++, offset_in_ct++) {
+      double x1, y1;
+
+      /* Update which contour we're looking at */
+      if (offset_in_ct == ct_npoints) {
+        offset_in_ct = 0;
+        ct = ct->next;
+        ct_npoints = get_contour_npoints (ct);
+      }
+
+      get_contour_coord_n_in_step_mm (ct, offset_in_ct, &x1, &y1);
+
+      vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS)); /* Bottom */
+      vertices[npoints + i] = make_vertex3d (x1, y1, 0);                                            /* Top */
+
+      object3d_add_vertex (board_object, vertices[i]);
+      object3d_add_vertex (board_object, vertices[npoints + i]);
+    }
+
+    /* Define the edges */
+    for (i = 0; i < 3 * npoints; i++) {
+      edges[i] = make_edge ();
+      UNDIR_DATA (edges[i]) = make_edge_info ();
+      object3d_add_edge (board_object, edges[i]);
+    }
+
+    /* Define the faces */
+    for (i = 0; i < npoints; i++) {
+      faces[i] = make_face3d ();
+
+      object3d_add_face (board_object, faces[i]);
+      /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
+#ifdef REVERSED_PCB_CONTOURS
+      face3d_add_contour (faces[i], make_contour3d (edges[2 * npoints + i]));
+#else
+      face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
+#endif
+    }
+
+    faces[npoints] = make_face3d (); /* bottom_face */
+    face3d_set_normal (faces[npoints], 0., 0., -1.);
+    face3d_set_appearance (faces[npoints], top_bot_appearance);
+    object3d_add_face (board_object, faces[npoints]);
+
+    faces[npoints + 1] = make_face3d (); /* top_face */
+    face3d_set_normal (faces[npoints + 1], 0., 0., 1.);
+    face3d_set_appearance (faces[npoints + 1], top_bot_appearance);
+    object3d_add_face (board_object, faces[npoints + 1]);
+
+    /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
+#ifdef REVERSED_PCB_CONTOURS
+    face3d_add_contour (faces[npoints], make_contour3d (edges[0]));
+    face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(edges[npoints])));
+#else
+    face3d_add_contour (faces[npoints], make_contour3d (SYM(edges[0])));
+    face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints]));
+#endif
+
+    ct = contour;
+    start_of_ct = 0;
+    offset_in_ct = 0;
+    ct_npoints = get_contour_npoints (ct);
+
+    for (i = 0; i < npoints; i++, offset_in_ct++) {
+      int next_i_around_ct;
+      int prev_i_around_ct;
+
+      /* Update which contour we're looking at */
+      if (offset_in_ct == ct_npoints) {
+        start_of_ct = i;
+        offset_in_ct = 0;
+        ct = ct->next;
+        ct_npoints = get_contour_npoints (ct);
+
+        /* If there is more than one contour, it will be an inner contour of the bottom and top faces. Refer to it here */
+#ifdef REVERSED_PCB_CONTOURS
+        face3d_add_contour (faces[npoints], make_contour3d (edges[i]));
+        face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(edges[npoints + i])));
+#else
+        face3d_add_contour (faces[npoints], make_contour3d (SYM(edges[i])));
+        face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints + i]));
+#endif
+      }
+
+      next_i_around_ct = start_of_ct + (offset_in_ct + 1) % ct_npoints;
+      prev_i_around_ct = start_of_ct + (offset_in_ct + ct_npoints - 1) % ct_npoints;
+
+      /* Setup the face normals for the edges along the contour extrusion (top and bottom are handled separaetely) */
+      /* Define the (non-normalized) face normal to point to the outside of the contour */
+#if REVERSED_PCB_CONTOURS
+      /* Vertex ordering of the edge we're finding the normal to is reversed in this case */
+      face3d_set_normal (faces[i], -(vertices[next_i_around_ct]->y - vertices[i]->y),
+                                    (vertices[next_i_around_ct]->x - vertices[i]->x), 0.);
+#else
+      face3d_set_normal (faces[i],  (vertices[next_i_around_ct]->y - vertices[i]->y),
+                                   -(vertices[next_i_around_ct]->x - vertices[i]->x), 0.);
+#endif
+
+      /* Assign the appropriate vertex geometric data to each edge end */
+      ODATA (edges[              i]) = vertices[0 * npoints + i];
+      DDATA (edges[              i]) = vertices[0 * npoints + next_i_around_ct];
+      ODATA (edges[1 * npoints + i]) = vertices[1 * npoints + i];
+      DDATA (edges[1 * npoints + i]) = vertices[1 * npoints + next_i_around_ct];
+      ODATA (edges[2 * npoints + i]) = vertices[0 * npoints + i];
+      DDATA (edges[2 * npoints + i]) = vertices[1 * npoints + i];
+#if REVERSED_PCB_CONTOURS
+      RDATA (edges[              i]) = faces[i];
+      LDATA (edges[              i]) = faces[npoints];
+      RDATA (edges[1 * npoints + i]) = faces[npoints + 1];
+      LDATA (edges[1 * npoints + i]) = faces[i];
+      RDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
+      LDATA (edges[2 * npoints + i]) = faces[i];
+#else
+      LDATA (edges[              i]) = faces[i];
+      RDATA (edges[              i]) = faces[npoints];
+      LDATA (edges[1 * npoints + i]) = faces[npoints + 1];
+      RDATA (edges[1 * npoints + i]) = faces[i];
+      LDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
+      RDATA (edges[2 * npoints + i]) = faces[i];
+#endif
+
+      /* NB: Contours are counter clockwise in XY plane.
+       *     edges[          0-npoints-1] are the base of the extrusion, following in the counter clockwise order
+       *     edges[1*npoints-2*npoints-1] are the top  of the extrusion, following in the counter clockwise order
+       *     edges[2*npoints-3*npoints-1] are the upright edges, oriented from bottom to top
+       */
+
+#ifdef REVERSED_PCB_CONTOURS  /* UNDERLYING DATA HAS CW CONTOURS FOR OUTER, CCW FOR INNER - E.g. PCB's polygons when translated into STEP coordinates */
+      /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
+      splice (SYM(edges[prev_i_around_ct]), edges[2 * npoints + i]);
+      splice (edges[2 * npoints + i], edges[i]);
+
+      /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
+      splice (edges[npoints + i], SYM(edges[2 * npoints + i]));
+      splice (SYM(edges[2 * npoints + i]), SYM(edges[npoints + prev_i_around_ct]));
+#else /* UNDERLYING DATA HAS CCW CONTOURS FOR OUTER, CW FOR INNER. E.g. PCB's raw coordinates in X, Y */
+      /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
+      splice (edges[i], edges[2 * npoints + i]);
+      splice (edges[2 * npoints + i], SYM(edges[prev_i_around_ct]));
+
+      /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
+      splice (SYM(edges[npoints + prev_i_around_ct]), SYM(edges[2 * npoints + i]));
+      splice (SYM(edges[2 * npoints + i]),  edges[npoints + i]);
+#endif
+
+      if (ct->is_round) {
+
+        face3d_set_cylindrical (faces[i], COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), 0., /* A point on the axis of the cylinder */
+                                          0., 0., 1.,                                                       /* Direction of the cylindrical axis */
+                                          COORD_TO_MM (ct->radius));
+        face3d_set_surface_orientation_reversed (faces[i]); /* XXX: Assuming this is a hole, the cylindrical surface normal points in the wrong direction - INCORRECT IF THIS IS THE OUTER CONTOUR!*/
+        face3d_set_normal (faces[i], 1., 0., 0.);  /* A normal to the axis direction */
+                                  /* XXX: ^^^ Could line this up with the direction to the vertex in the corresponding circle edge */
+
+#ifdef REVERSED_PCB_CONTOURS
+        edge_info_set_round (UNDIR_DATA (edges[i]),
+                             COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), COORD_TO_STEP_Z (PCB, -HACK_BOARD_THICKNESS), /* Center of circle */
+                             0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
+        edge_info_set_round (UNDIR_DATA (edges[npoints + i]),
+                             COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), 0., /* Center of circle */
+                             0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
+#else
+        edge_info_set_round (UNDIR_DATA (edges[i]),
+                             COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), COORD_TO_STEP_Z (PCB, -HACK_BOARD_THICKNESS), /* Center of circle */
+                             0., 0., -1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
+        edge_info_set_round (UNDIR_DATA (edges[npoints + i]),
+                             COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), 0., /* Center of circle */
+                             0., 0., -1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
+#endif
+        edge_info_set_stitch (UNDIR_DATA (edges[2 * npoints + i]));
+      }
+
+    }
+
+    if (0) {
+      /* Cylinder centers on 45x45mm, stitch vertex is at 40x45mm. Radius is thus 5mm */
+
+      edge_ref cylinder_edges[3];
+      vertex3d *cylinder_vertices[2];
+      face3d *cylinder_faces[2];
+
+      /* Edge on top of board */
+      cylinder_edges[0] = make_edge ();
+      UNDIR_DATA (cylinder_edges[0]) = make_edge_info ();
+#ifdef REVERSED_PCB_CONTOURS
+      edge_info_set_round (UNDIR_DATA (cylinder_edges[0]),
+                           COORD_TO_STEP_X (PCB, MM_TO_COORD (45.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 0., /* Center of circle */
+                            0.,   0., 1., /* Normal */
+                            5.);          /* Radius */
+#else
+      edge_info_set_round (UNDIR_DATA (cylinder_edges[0]),
+                           COORD_TO_STEP_X (PCB, MM_TO_COORD (45.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 0., /* Center of circle */
+                            0.,   0., 1., /* Normal */
+                            5.);         /* Radius */
+#endif
+      object3d_add_edge (board_object, cylinder_edges[0]);
+
+      /* Edge on top of cylinder */
+      cylinder_edges[1] = make_edge ();
+      UNDIR_DATA (cylinder_edges[1]) = make_edge_info ();
+      edge_info_set_round (UNDIR_DATA (cylinder_edges[1]),
+                           COORD_TO_STEP_X (PCB, MM_TO_COORD (45.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 10., /* Center of circle */
+                            0.,   0., 1.,  /* Normal */
+                            5.);          /* Radius */
+      object3d_add_edge (board_object, cylinder_edges[1]);
+
+      /* Edge stitching cylinder */
+      cylinder_edges[2] = make_edge ();
+      UNDIR_DATA (cylinder_edges[2]) = make_edge_info ();
+      edge_info_set_stitch (UNDIR_DATA (cylinder_edges[2]));
+      object3d_add_edge (board_object, cylinder_edges[2]);
+
+      /* Vertex on board top surface */
+      cylinder_vertices[0] = make_vertex3d (COORD_TO_STEP_X (PCB, MM_TO_COORD (40.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 0.); /* Bottom */
+      object3d_add_vertex (board_object, cylinder_vertices[0]);
+
+      /* Vertex on cylinder top surface */
+      cylinder_vertices[1] = make_vertex3d (COORD_TO_STEP_X (PCB, MM_TO_COORD (40.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 10.); /* Top */
+      object3d_add_vertex (board_object, cylinder_vertices[1]);
+
+      /* Cylindrical face */
+      cylinder_faces[0] = make_face3d ();
+      face3d_set_cylindrical (cylinder_faces[0], COORD_TO_STEP_X (PCB, MM_TO_COORD (45.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 0., /* A point on the axis of the cylinder */
+                                        0., 0., 1.,             /* Direction of the cylindrical axis */
+                                        5.);                   /* Radius of cylinder */
+      face3d_set_normal (cylinder_faces[0], 1., 0., 0.);       /* A normal to the axis direction */
+                                   /* XXX: ^^^ Could line this up with the direction to the vertex in the corresponding circle edge */
+      object3d_add_face (board_object, cylinder_faces[0]);
+      face3d_add_contour (cylinder_faces[0], make_contour3d (cylinder_edges[0]));
+
+      /* Top face of cylinder */
+      cylinder_faces[1] = make_face3d (); /* top face of cylinder */
+      face3d_set_normal (cylinder_faces[1], 0., 0., 1.);
+      face3d_set_appearance (cylinder_faces[1], top_bot_appearance);
+      object3d_add_face (board_object, cylinder_faces[1]);
+      face3d_add_contour (cylinder_faces[1], make_contour3d (cylinder_edges[1]));
+
+      /* Splice onto board */
+      face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(cylinder_edges[0])));
+
+      /* Assign the appropriate vertex geometric data to each edge end */
+      ODATA (cylinder_edges[0]) = cylinder_vertices[0];
+      DDATA (cylinder_edges[0]) = cylinder_vertices[0];
+      ODATA (cylinder_edges[1]) = cylinder_vertices[1];
+      DDATA (cylinder_edges[1]) = cylinder_vertices[1];
+      ODATA (cylinder_edges[2]) = cylinder_vertices[0];
+      DDATA (cylinder_edges[2]) = cylinder_vertices[1];
+      LDATA (cylinder_edges[0]) = cylinder_faces[0];
+      RDATA (cylinder_edges[0]) = faces[npoints + 1]; /* TOP OF BOARD FACE */
+      LDATA (cylinder_edges[1]) = cylinder_faces[1];
+      RDATA (cylinder_edges[1]) = cylinder_faces[0];
+      LDATA (cylinder_edges[2]) = cylinder_faces[0];
+      RDATA (cylinder_edges[2]) = cylinder_faces[0];
+
+      /* Splice things together.... */
+
+      /* Link edges orbiting the cylinder bottom vertex */
+      splice (cylinder_edges[0], cylinder_edges[2]);
+      splice (cylinder_edges[2], SYM(cylinder_edges[0]));
+
+      /* Link edges orbiting the cylinder top vertex */
+      splice (SYM(cylinder_edges[2]), cylinder_edges[1]);
+      splice (cylinder_edges[1], SYM(cylinder_edges[1]));
+    }
+
+    board_objects = g_list_append (board_objects, board_object);
+
+  } while (pa = pa->f, pa != board_outline);
+
+  poly_Free (&board_outline);
+
+  return board_objects;
+}
diff --git a/src/hid/common/object3d.h b/src/hid/common/object3d.h
new file mode 100644
index 0000000..e8c26e2
--- /dev/null
+++ b/src/hid/common/object3d.h
@@ -0,0 +1,18 @@
+typedef struct {
+  int id;
+  char *name;
+  appearance *appear;
+  GList *edges;
+  GList *vertices;
+  GList *faces;
+} object3d;
+
+void object3d_test_init (void);
+void object3d_draw_debug (void);
+object3d *make_object3d (char *name);
+void destroy_object3d (object3d *object);
+void object3d_set_appearance (object3d *object, appearance *appear);
+void object3d_add_edge (object3d *object, edge_ref edge);
+void object3d_add_vertex (object3d *object, vertex3d *vertex);
+void object3d_add_face (object3d *object, face3d *face);
+GList *object3d_from_board_outline (void);
diff --git a/src/hid/gtk/quad.c b/src/hid/common/quad.c
similarity index 100%
rename from src/hid/gtk/quad.c
rename to src/hid/common/quad.c
diff --git a/src/hid/gtk/quad.h b/src/hid/common/quad.h
similarity index 100%
rename from src/hid/gtk/quad.h
rename to src/hid/common/quad.h
diff --git a/src/hid/common/step_id.h b/src/hid/common/step_id.h
new file mode 100644
index 0000000..86a4974
--- /dev/null
+++ b/src/hid/common/step_id.h
@@ -0,0 +1,2 @@
+typedef int step_id;
+typedef GList* step_id_list;
diff --git a/src/hid/gtk/vertex3d.c b/src/hid/common/vertex3d.c
similarity index 63%
rename from src/hid/gtk/vertex3d.c
rename to src/hid/common/vertex3d.c
index df5fd0e..cf20fb2 100644
--- a/src/hid/gtk/vertex3d.c
+++ b/src/hid/common/vertex3d.c
@@ -1,17 +1,15 @@
+#include <glib.h>
 #include <stdlib.h>
+#include <stdbool.h>
+#include <stdio.h>
 
-static int global_vertex3d_count;
+#include "step_id.h"
+#include "vertex3d.h"
 
-typedef struct
-{
-  float x;
-  float y;
-  float z;
-  int id;
-} vertex3d;
+static int global_vertex3d_count;
 
 vertex3d *
-make_vertex3d (float x, float y, float z)
+make_vertex3d (double x, double y, double z)
 {
   vertex3d *v;
 
diff --git a/src/hid/common/vertex3d.h b/src/hid/common/vertex3d.h
new file mode 100644
index 0000000..cad586d
--- /dev/null
+++ b/src/hid/common/vertex3d.h
@@ -0,0 +1,13 @@
+typedef struct
+{
+  double x;
+  double y;
+  double z;
+  int id;
+
+  /* STEP crap - to hell with encapsulation */
+  step_id vertex_identifier;
+} vertex3d;
+
+vertex3d *make_vertex3d (double x, double y, double z);
+void destroy_vertex3d (vertex3d *v);
diff --git a/src/hid/gtk/edge3d.c b/src/hid/gtk/edge3d.c
deleted file mode 100644
index 245abca..0000000
--- a/src/hid/gtk/edge3d.c
+++ /dev/null
@@ -1,25 +0,0 @@
-#include <stdbool.h>
-#include <stdlib.h>
-
-#include "edge3d.h"
-
-edge_info *
-make_edge_info (bool is_stitch, bool is_round, float cx, float cy, float radius)
-{
-  edge_info *info;
-
-  info = malloc (sizeof(edge_info));
-  info->is_stitch = is_stitch;
-  info->is_round = is_round;
-  info->cx = cx;
-  info->cy = cy;
-  info->radius = radius;
-
-  return info;
-}
-
-void
-destroy_edge_info (edge_info *info)
-{
-  free (info);
-}
diff --git a/src/hid/gtk/edge3d.h b/src/hid/gtk/edge3d.h
deleted file mode 100644
index e67cdb3..0000000
--- a/src/hid/gtk/edge3d.h
+++ /dev/null
@@ -1,11 +0,0 @@
-typedef struct
-{
-  bool is_stitch;
-  bool is_round;
-  float cx;
-  float cy;
-  float radius;
-} edge_info;
-
-edge_info *make_edge_info (bool is_stitch, bool is_round, float cx, float cy, float radius);
-void destroy_edge_info (edge_info *info);
diff --git a/src/hid/gtk/face3d.c b/src/hid/gtk/face3d.c
deleted file mode 100644
index e69de29..0000000
diff --git a/src/hid/gtk/face3d.h b/src/hid/gtk/face3d.h
deleted file mode 100644
index e69de29..0000000
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 2332d07..b2539ca 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -15,8 +15,14 @@
 #include "gui-pinout-preview.h"
 #include "pcb-printf.h"
 
-#include "quad.h"
-#include "object3d.h"
+#include "hid/common/step_id.h"
+#include "hid/common/quad.h"
+#include "hid/common/vertex3d.h"
+#include "hid/common/contour3d.h"
+#include "hid/common/appearance.h"
+#include "hid/common/face3d.h"
+#include "hid/common/edge3d.h"
+#include "hid/common/object3d.h"
 
 #ifndef WIN32
 /* The Linux OpenGL ABI 1.0 spec requires that we define
diff --git a/src/hid/gtk/object3d.c b/src/hid/gtk/object3d.c
deleted file mode 100644
index ddcf35e..0000000
--- a/src/hid/gtk/object3d.c
+++ /dev/null
@@ -1,915 +0,0 @@
-#include <stdio.h>
-#include <stdlib.h>
-#include <assert.h>
-#include <stdbool.h>
-
-#include "quad.h"
-#include "vertex3d.h"
-#include "face3d.h"
-#include "edge3d.h"
-#include "object3d.h"
-#include "polygon.h"
-#include "data.h"
-
-
-
-#ifndef WIN32
-/* The Linux OpenGL ABI 1.0 spec requires that we define
- * GL_GLEXT_PROTOTYPES before including gl.h or glx.h for extensions
- * in order to get prototypes:
- *   http://www.opengl.org/registry/ABI/
- */
-#   define GL_GLEXT_PROTOTYPES 1
-#endif
-
-#ifdef HAVE_OPENGL_GL_H
-#   include <OpenGL/gl.h>
-#else
-#   include <GL/gl.h>
-#endif
-
-
-#define HACK_BOARD_THICKNESS MM_TO_COORD(1.6)
-
-static object3d *object3d_test_object = NULL;
-
-static void
-print_edge_id (edge_ref e)
-{
-  printf ("ID %i.%i", ID(e), (unsigned int)e & 3u);
-}
-
-static void
-debug_print_edge (edge_ref e, void *data)
-{
-  printf ("Edge ID %i.%i\n", ID(e), (int)e & 3u);
-
-  printf ("Edge ONEXT is "); print_edge_id (ONEXT(e)); printf ("\n");
-  printf ("Edge OPREV is "); print_edge_id (OPREV(e)); printf ("\n");
-  printf ("Edge DNEXT is "); print_edge_id (DNEXT(e)); printf ("\n");
-  printf ("Edge DPREV is "); print_edge_id (DPREV(e)); printf ("\n");
-  printf ("Edge RNEXT is "); print_edge_id (RNEXT(e)); printf ("\n");
-  printf ("Edge RPREV is "); print_edge_id (RPREV(e)); printf ("\n");
-  printf ("Edge LNEXT is "); print_edge_id (LNEXT(e)); printf ("\n");
-  printf ("Edge LPREV is "); print_edge_id (LPREV(e)); printf ("\n");
-}
-
-void
-object3d_test_init (void)
-{
-  //object3d_test_object = object3d_create_test_cube ();
-  object3d_test_object = object3d_from_board_outline ();
-}
-
-object3d *
-make_object3d ()
-{
-  static int object3d_count = 0;
-  object3d *object;
-
-  object = malloc (sizeof (object3d));
-  object->id = object3d_count++;
-
-  return object;
-}
-
-void
-destroy_object3d (object3d *object)
-{
-  /* XXX: LEAK GEOMETERY AND TOPOLOGY */
-  free (object);
-}
-
-#define XOFFSET 50
-#define YOFFSET 50
-#define ZOFFSET 0
-#define SCALE  10
-object3d *
-object3d_create_test_cube (void)
-{
-  object3d *object;
-  vertex3d *cube_vertices[8];
-  edge_ref cube_edges[12];
-  int i;
-
-  cube_vertices[0] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 0., ZOFFSET + SCALE *  0.);
-  cube_vertices[1] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 0., ZOFFSET + SCALE *  0.);
-  cube_vertices[2] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 0., ZOFFSET + SCALE * -1.);
-  cube_vertices[3] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 0., ZOFFSET + SCALE * -1.);
-  cube_vertices[4] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 1., ZOFFSET + SCALE *  0.);
-  cube_vertices[5] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 1., ZOFFSET + SCALE *  0.);
-  cube_vertices[6] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 1., ZOFFSET + SCALE * -1.);
-  cube_vertices[7] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 1., ZOFFSET + SCALE * -1.);
-
-  for (i = 0; i < 12; i++)
-    cube_edges[i] = make_edge ();
-
-  for (i = 0; i < 4; i++) {
-    int next_vertex = (i + 1) % 4;
-    int prev_vertex = (i + 3) % 4;
-
-    /* Assign bottom edge endpoints */
-    ODATA (cube_edges[i]) = cube_vertices[i];
-    DDATA (cube_edges[i]) = cube_vertices[next_vertex];
-
-    /* Assign top edge endpoints */
-    ODATA (cube_edges[4 + i]) = cube_vertices[4 + i];
-    DDATA (cube_edges[4 + i]) = cube_vertices[4 + next_vertex];
-
-    /* Assign side edge endpoints */
-    ODATA (cube_edges[8 + i]) = cube_vertices[i];
-    DDATA (cube_edges[8 + i]) = cube_vertices[4 + i];
-
-    /* Link up edges orbiting around each bottom vertex */
-    splice (cube_edges[i], cube_edges[8 + i]);
-    splice (cube_edges[8 + i], SYM(cube_edges[prev_vertex]));
-
-    /* Link up edges orbiting around each bottom top */
-    splice (cube_edges[4 + i], SYM(cube_edges[4 + prev_vertex]));
-    splice (SYM(cube_edges[4 + prev_vertex]), SYM(cube_edges[8 + i]));
-
-  }
-
-  quad_enum (cube_edges[0], debug_print_edge, NULL);
-
-  object = make_object3d ();
-  object->first_edge = cube_edges[0];
-
-  return object;
-}
-
-
-float colors[12][3] = {{1., 0., 0.},
-                       {1., 1., 0.},
-                       {0., 1., 0.},
-                       {0., 1., 1.},
-                       {0.5, 0., 0.},
-                       {0.5, 0.5, 0.},
-                       {0., 0.5, 0.},
-                       {0., 0.5, 0.5},
-                       {1., 0.5, 0.5},
-                       {1., 1., 0.5},
-                       {0.5, 1., 0.5},
-                       {0.5, 1., 1.}};
-
-
-#define CIRC_SEGS 64
-
-static void
-draw_quad_edge (edge_ref e, void *data)
-{
-#if 0
-  int id = ID(e) % 12;
-
-  glColor3f (colors[id][0], colors[id][1], colors[id][2]);
-#else
-  glColor3f (1., 1., 1.);
-#endif
-
-  if (UNDIR_DATA(e) != NULL) {
-    edge_info *info = UNDIR_DATA(e);
-    if (info->is_stitch)
-      return;
-    if (info->is_round) {
-      int i;
-      glBegin (GL_LINES);
-      for (i = 0; i < CIRC_SEGS; i++) {
-        glVertex3f (MM_TO_COORD (info->cx + info->radius * cos (i * 2. * M_PI / (float)CIRC_SEGS)),
-                    MM_TO_COORD (info->cy + info->radius * sin (i * 2. * M_PI / (float)CIRC_SEGS)),
-                    MM_TO_COORD (((vertex3d *)ODATA(e))->z));
-        glVertex3f (MM_TO_COORD (info->cx + info->radius * cos ((i + 1) * 2. * M_PI / (float)CIRC_SEGS)),
-                    MM_TO_COORD (info->cy + info->radius * sin ((i + 1) * 2. * M_PI / (float)CIRC_SEGS)),
-                    MM_TO_COORD (((vertex3d *)ODATA(e))->z));
-      }
-      glEnd ();
-      return;
-    }
-  }
-
-  glBegin (GL_LINES);
-  glVertex3f (MM_TO_COORD (((vertex3d *)ODATA(e))->x), MM_TO_COORD (((vertex3d *)ODATA(e))->y), MM_TO_COORD (((vertex3d *)ODATA(e))->z));
-  glVertex3f (MM_TO_COORD (((vertex3d *)DDATA(e))->x), MM_TO_COORD (((vertex3d *)DDATA(e))->y), MM_TO_COORD (((vertex3d *)DDATA(e))->z));
-  glEnd ();
-}
-
-void
-object3d_draw_debug (void)
-{
-  quad_enum (object3d_test_object->first_edge, draw_quad_edge, NULL);
-}
-
-/*********************************************************************************************************/
-
-static int
-get_contour_npoints (PLINE *contour)
-{
-  /* HACK FOR ROUND CONTOURS */
-  if (contour->is_round)
-    return 1;
-
-  return contour->Count;
-}
-
-static void
-get_contour_coord_n_in_mm (PLINE *contour, int n, double *x, double *y)
-{
-  VNODE *vertex = &contour->head;
-
-  if (contour->is_round)
-    {
-      /* HACK SPECIAL CASE FOR ROUND CONTOURS */
-
-      /* We define an arbitrary point on the contour. This is used, for example,
-       * to define a coordinate system along the contour, and coincides with where
-       * we add a straight edge down the side of an extruded cylindrical shape.
-       */
-      *x = COORD_TO_MM (contour->cx - contour->radius);
-      *y = COORD_TO_MM (contour->cy); /* FIXME: PCB's coordinate system has y increasing downwards */
-
-      return;
-    }
-
-  while (n > 0) {
-    vertex = vertex->next; /* The VNODE structure is circularly linked, so wrapping is OK */
-    n--;
-  }
-
-  *x = COORD_TO_MM (vertex->point[0]);
-  *y = COORD_TO_MM (vertex->point[1]); /* FIXME: PCB's coordinate system has y increasing downwards */
-}
-
-void
-object3d_export_to_step (object3d *object, char *filename)
-{
-  FILE *f;
-  time_t currenttime;
-  struct tm utc;
-  //int next_step_identifier;
-
-  f = fopen (filename, "w");
-  if (f == NULL)
-    {
-      perror (filename);
-      return;
-    }
-
-  currenttime = time (NULL);
-  gmtime_r (&currenttime, &utc);
-
-  fprintf (f, "ISO-10303-21;\n");
-  fprintf (f, "HEADER;\n");
-  fprintf (f, "FILE_DESCRIPTION (\n"
-              "/* description */ ('STEP AP214 export of circuit board'),\n"
-              "/* implementation level */ '1');\n");
-  fprintf (f, "FILE_NAME (/* name */ '%s',\n"
-              "/* time_stamp */ '%.4d-%.2d-%.2dT%.2d:%.2d:%.2d',\n"
-              "/* author */ ( '' ),\n"
-              "/* organisation */ ( '' ),\n"
-              "/* preprocessor_version */ 'PCB STEP EXPORT',\n"
-              "/* originating system */ '%s " VERSION "',\n"
-              "/* authorisation */ '' );\n",
-           filename,
-           1900 + utc.tm_year, 1 + utc.tm_mon, utc.tm_mday, utc.tm_hour, utc.tm_min, utc.tm_sec,
-           Progname);
-  fprintf (f, "FILE_SCHEMA (( 'AUTOMOTIVE_DESIGN' ));\n");
-  fprintf (f, "ENDSEC;\n");
-  fprintf (f, "\n");
-  fprintf (f, "DATA;\n");
-
-  /* TEST */
-
-  /* Setup the context of the "product" we are defining", and that it is a 'part' */
-
-  fprintf (f, "#1 = APPLICATION_CONTEXT ( 'automotive_design' ) ;\n"
-              "#2 = APPLICATION_PROTOCOL_DEFINITION ( 'draft international standard', 'automotive_design', 1998, #1 );\n"
-              "#3 = PRODUCT_CONTEXT ( 'NONE', #1, 'mechanical' ) ;\n"
-              "#4 = PRODUCT ('%s', '%s', '%s', (#3)) ;\n"
-              "#5 = PRODUCT_RELATED_PRODUCT_CATEGORY ('part', $, (#4)) ;\n",
-              "test_pcb_id", "test_pcb_name", "test_pcb_description");
-
-  /* Setup the specific definition of the product we are defining */
-  fprintf (f, "#6 = PRODUCT_DEFINITION_CONTEXT ( 'detailed design', #1, 'design' ) ;\n"
-              "#7 = PRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE ( 'ANY', '', #4, .NOT_KNOWN. ) ;\n"
-              "#8 = PRODUCT_DEFINITION ( 'UNKNOWN', '', #7, #6 ) ;\n"
-              "#9 = PRODUCT_DEFINITION_SHAPE ( 'NONE', 'NONE',  #8 ) ;\n");
-
-  /* Need an anchor in 3D space to orient the shape */
-  fprintf (f, "#10 =    CARTESIAN_POINT ( 'NONE',  ( 0.0, 0.0, 0.0 ) ) ;\n"
-              "#11 =          DIRECTION ( 'NONE',  ( 0.0, 0.0, 1.0 ) ) ;\n"
-              "#12 =          DIRECTION ( 'NONE',  ( 1.0, 0.0, 0.0 ) ) ;\n"
-              "#13 = AXIS2_PLACEMENT_3D ( 'NONE', #10, #11, #12 ) ;\n");
-
-  /* Grr.. more boilerplate - this time unit definitions */
-
-  fprintf (f, "#14 = UNCERTAINTY_MEASURE_WITH_UNIT (LENGTH_MEASURE( 1.0E-005 ), #15, 'distance_accuracy_value', 'NONE');\n"
-              "#15 =( LENGTH_UNIT ( ) NAMED_UNIT ( * ) SI_UNIT ( .MILLI., .METRE. ) );\n"
-              "#16 =( NAMED_UNIT ( * ) PLANE_ANGLE_UNIT ( ) SI_UNIT ( $, .RADIAN. ) );\n"
-              "#17 =( NAMED_UNIT ( * ) SI_UNIT ( $, .STERADIAN. ) SOLID_ANGLE_UNIT ( ) );\n"
-              "#18 =( GEOMETRIC_REPRESENTATION_CONTEXT ( 3 ) GLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT ( ( #14 ) ) GLOBAL_UNIT_ASSIGNED_CONTEXT ( ( #15, #16, #17 ) ) REPRESENTATION_CONTEXT ( 'NONE', 'WORKASPACE' ) );\n");
-
-  /* BREP STUFF FROM #21 onwards say? */
-  fprintf (f, "#19 = ADVANCED_BREP_SHAPE_REPRESENTATION ( '%s', ( /* Manifold_solid_brep */ #21, #13 ), #18 ) ;\n"
-              "#20 = SHAPE_DEFINITION_REPRESENTATION ( #9, #19 ) ;\n",
-              "test_pcb_absr_name");
-
-  //next_step_identifier = 21;
-
-  /* TODO.. EXPORT FROM A QUAD DATA-STRUCTURE */
-#if 0
-#define FWD 1
-#define REV 2
-static void
-quad_emit_board_contour_step (FILE *f, PLINE *contour)
-{
-  int ncontours;
-  int npoints;
-
-  int brep_identifier;
-
-  int bottom_plane_identifier;
-  int top_plane_identifier;
-  int *side_plane_identifier;
-
-  int *bottom_infinite_line_identifier;
-  int *top_infinite_line_identifier;
-  int *side_infinite_line_identifier;
-
-  int *bottom_vertex_identifier;
-  int *top_vertex_identifier;
-
-  int *bottom_edge_identifier;
-  int *top_edge_identifier;
-  int *side_edge_identifier;
-
-  int *bottom_face_bound_identifier;
-  int *top_face_bound_identifier;
-
-  int bottom_face_identifier;
-  int top_face_identifier;
-  int *side_face_identifier;
-
-  int pcb_shell_identifier;
-
-  int i;
-
-  PLINE *ct;
-
-  ncontours = 0;
-  npoints = 0;
-  ct = contour;
-  while (ct != NULL) {
-    ncontours ++;
-    npoints += get_contour_npoints (ct);
-    ct = ct->next;
-  }
-
-  /* TODO: Avoid needing to store these identifiers by nailing down our usage pattern of identifiers */
-  /* Allocate some storage for identifiers */
-
-            side_plane_identifier = malloc (sizeof (int) * npoints);
-  bottom_infinite_line_identifier = malloc (sizeof (int) * npoints);
-     top_infinite_line_identifier = malloc (sizeof (int) * npoints);
-    side_infinite_line_identifier = malloc (sizeof (int) * npoints);
-         bottom_vertex_identifier = malloc (sizeof (int) * npoints);
-            top_vertex_identifier = malloc (sizeof (int) * npoints);
-           bottom_edge_identifier = malloc (sizeof (int) * npoints);
-              top_edge_identifier = malloc (sizeof (int) * npoints);
-             side_edge_identifier = malloc (sizeof (int) * npoints);
-             side_face_identifier = malloc (sizeof (int) * npoints);
-
-     bottom_face_bound_identifier = malloc (sizeof (int) * ncontours);
-        top_face_bound_identifier = malloc (sizeof (int) * ncontours);
-
-  /* For a n-sided outline, we need: */
-
-  // PLANES:               2 + n
-  // 2 bottom + top planes
-  // n side planes
-
-  // INFINITE LINES:       3n
-  // n for the bottom (in the bottom plane)
-  // n for the top (in the top plane)
-  // n for the sides (joining the top + bottom vertex of the extruded shape (n sided outline = n vertices)
-
-  // VERTICES:             2n
-  // n for the bottom (in the bottom plane)
-  // n for the top (in the top plane)
-
-  // EDGES:                3n          (6n oriented edges)
-  // n for the bottom
-  // n for the top
-  // n for the sides
-
-  // FACES:                2 + n
-  // 2 bottom + top faces
-  // n side faces
-
-  // A consistent numbering scheme will avoid needing complex data-structures here!
-
-  /* Save a place for the brep identifier */
-  brep_identifier = next_step_identifier++;
-
-  /* Define the bottom and top planes */
-  fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-              "#%i = DIRECTION ( 'NONE', (  0.0,  0.0,  1.0 ) ) ; "
-              "#%i = DIRECTION ( 'NONE', (  1.0,  0.0,  0.0 ) ) ; "
-              "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i, #%i, #%i ) ; "
-              "#%i = PLANE ( 'NONE',  #%i ) ;\n",
-           next_step_identifier, 0.0, 0.0, -COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-           next_step_identifier + 1,
-           next_step_identifier + 2,
-           next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
-           next_step_identifier + 4, next_step_identifier + 3);
-  bottom_plane_identifier = next_step_identifier + 4;
-  next_step_identifier = next_step_identifier + 5;
-
-  fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-              "#%i = DIRECTION ( 'NONE', (  0.0,  0.0, -1.0 ) ) ; "
-              "#%i = DIRECTION ( 'NONE', ( -1.0,  0.0,  0.0 ) ) ; "
-              "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i, #%i, #%i ) ; "
-              "#%i = PLANE ( 'NONE',  #%i ) ;\n",
-           next_step_identifier, 0.0, 0.0, COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-           next_step_identifier + 1,
-           next_step_identifier + 2,
-           next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
-           next_step_identifier + 4, next_step_identifier + 3);
-  top_plane_identifier = next_step_identifier + 4;
-  next_step_identifier = next_step_identifier + 5;
-
-  /* Define the side planes */
-  for (i = 0; i < npoints; i++) {
-    double x1, y1, x2, y2;
-
-    /* Walk through the contours until we find the right one to look at */
-    PLINE *ct = contour;
-    int adjusted_i = i;
-
-    while (adjusted_i >= get_contour_npoints (ct)) {
-      adjusted_i -= get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-    if (ct->is_round)
-      {
-        /* HACK SPECIAL CASE FOR ROUND CONTOURS (Surface edges bounded by a cylindrical surface, not n-planes) */
-
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i, #%i, #%i ) ; "
-                    "#%i = CYLINDRICAL_SURFACE ( 'NONE', #%i, %f ) ;\n",
-                 next_step_identifier, /* A point on the axis of the cylinder */ COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), 0.0,
-                 next_step_identifier + 1, /* Direction of surface axis... not sure if the sign of the direction matters */ 0.0, 0.0, 1.0,
-                 next_step_identifier + 2, /* URM???? NOT SURE WHAT THIS DIRECTION IS FOR                                */ 1.0, 0.0, 0.0,
-                 next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
-                 next_step_identifier + 4, next_step_identifier + 3, COORD_TO_MM (ct->radius));
-
-        side_plane_identifier[i] = next_step_identifier + 4;
-        next_step_identifier = next_step_identifier + 5;
-      }
-    else
-      {
-        get_contour_coord_n_in_mm (ct, adjusted_i,     &x1, &y1);
-        get_contour_coord_n_in_mm (ct, adjusted_i + 1, &x2, &y2);
-
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i, #%i, #%i ) ; "
-                    "#%i = PLANE ( 'NONE',  #%i ) ;\n",
-                 next_step_identifier,     /* A point on the plane                      */ x1, y1, 0.0,
-                 next_step_identifier + 1, /* An axis direction pointing into the shape */ -(y2 - y1), (x2 - x1), 0.0, // <--- NOT SURE IF I NEED TO NORMALISE THIS, OR FLIP THE DIRECTION??
-                 next_step_identifier + 2, /* A reference direction pointing.. "meh"?   */ 0.0, 0.0, 1.0,
-                 next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
-                 next_step_identifier + 4, next_step_identifier + 3);
-        side_plane_identifier[i] = next_step_identifier + 4;
-        next_step_identifier = next_step_identifier + 5;
-      }
-  }
-
-  /* Define the infinite lines */
-  for (i = 0; i < npoints; i++) {
-    double x1, y1, x2, y2;
-
-    /* Walk through the contours until we find the right one to look at */
-    PLINE *ct = contour;
-    int adjusted_i = i;
-
-    while (adjusted_i >= get_contour_npoints (ct)) {
-      adjusted_i -= get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-    get_contour_coord_n_in_mm (ct, adjusted_i,     &x1, &y1);
-    get_contour_coord_n_in_mm (ct, adjusted_i + 1, &x2, &y2);
-
-    if (ct->is_round)
-      {
-        /* HACK SPECIAL CASE FOR ROUND CONTOURS (Top and bottom faces bounded a circular contour, not n-lines) */
-
-        /* Bottom */
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i,  #%i,  #%i ) ;"
-                    "#%i = CIRCLE ( 'NONE', #%i, %f ) ;\n",
-                 next_step_identifier,     /* Center of the circle   */ COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), -COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-                 next_step_identifier + 1, /* Normal of circle?      */ 0.0, 0.0, -1.0, // <--- NOT SURE IF I NEED TO FLIP THE DIRECTION??
-                 next_step_identifier + 2, /* ??????                 */ -1.0, 0.0, 0.0, // NOT SURE WHAT THIS IS!
-                 next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
-                 next_step_identifier + 4, next_step_identifier + 3, COORD_TO_MM (ct->radius));
-        bottom_infinite_line_identifier[i] = next_step_identifier + 4;
-        next_step_identifier = next_step_identifier + 5;
-
-        /* Top */
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i,  #%i,  #%i ) ;"
-                    "#%i = CIRCLE ( 'NONE', #%i, %f ) ;\n",
-                 next_step_identifier,     /* Center of the circle   */ COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-                 next_step_identifier + 1, /* Normal of circle?      */ 0.0, 0.0, -1.0, // <--- NOT SURE IF I NEED TO FLIP THE DIRECTION??
-                 next_step_identifier + 2, /* ??????                 */ -1.0, 0.0, 0.0, // NOT SURE WHAT THIS IS!
-                 next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
-                 next_step_identifier + 4, next_step_identifier + 3, COORD_TO_MM (ct->radius));
-        top_infinite_line_identifier[i] = next_step_identifier + 4;
-        next_step_identifier = next_step_identifier + 5;
-      }
-    else
-      {
-        /* Bottom */
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = VECTOR ( 'NONE', #%i, 1000.0 ) ; "
-                    "#%i = LINE ( 'NONE', #%i, #%i ) ;\n",
-                 next_step_identifier,     /* A point on the line         */ x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-                 next_step_identifier + 1, /* A direction along the line  */ (x2 - x1), (y2 - y1), 0.0, // <--- NOT SURE IF I NEED TO NORMALISE THIS, OR FLIP THE DIRECTION??
-                 next_step_identifier + 2, next_step_identifier + 1,
-                 next_step_identifier + 3, next_step_identifier, next_step_identifier + 2);
-        bottom_infinite_line_identifier[i] = next_step_identifier + 3;
-        next_step_identifier = next_step_identifier + 4;
-
-        /* Top */
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = VECTOR ( 'NONE', #%i, 1000.0 ) ; "
-                    "#%i = LINE ( 'NONE', #%i, #%i ) ;\n",
-                 next_step_identifier,     /* A point on the line         */ x1, y1, COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-                 next_step_identifier + 1, /* A direction along the line  */ (x2 - x1), (y2 - y1), 0.0, // <--- NOT SURE IF I NEED TO NORMALISE THIS, OR FLIP THE DIRECTION??
-                 next_step_identifier + 2, next_step_identifier + 1,
-                 next_step_identifier + 3, next_step_identifier, next_step_identifier + 2);
-        top_infinite_line_identifier[i] = next_step_identifier + 3;
-        next_step_identifier = next_step_identifier + 4;
-      }
-
-    /* Side */
-    fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                "#%i = VECTOR ( 'NONE', #%i, 1000.0 ) ; "
-                "#%i = LINE ( 'NONE', #%i, #%i ) ;\n",
-             next_step_identifier,     /* A point on the line         */ x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-             next_step_identifier + 1, /* A direction along the line  */ 0.0, 0.0, 1.0, // <--- NOT SURE IF I NEED TO NORMALISE THIS, OR FLIP THE DIRECTION??
-             next_step_identifier + 2, next_step_identifier + 1,
-             next_step_identifier + 3, next_step_identifier, next_step_identifier + 2);
-    side_infinite_line_identifier[i] = next_step_identifier + 3;
-    next_step_identifier = next_step_identifier + 4;
-  }
-
-  /* Define the vertices */
-  for (i = 0; i < npoints; i++) {
-    double x1, y1;
-
-    /* Walk through the contours until we find the right one to look at */
-    PLINE *ct = contour;
-    int adjusted_i = i;
-
-    while (adjusted_i >= get_contour_npoints (ct)) {
-      adjusted_i -= get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-    get_contour_coord_n_in_mm (ct, adjusted_i, &x1, &y1);
-
-    /* Bottom */
-    fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                "#%i = VERTEX_POINT ( 'NONE', #%i ) ;\n",
-             next_step_identifier,     /* Vertex coordinate  */ x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-             next_step_identifier + 1, next_step_identifier);
-    bottom_vertex_identifier[i] = next_step_identifier + 1;
-    next_step_identifier = next_step_identifier + 2;
-
-    /* Top */
-    fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                "#%i = VERTEX_POINT ( 'NONE', #%i ) ;\n",
-             next_step_identifier,     /* Vertex coordinate  */ x1, y1, COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-             next_step_identifier + 1, next_step_identifier);
-    top_vertex_identifier[i] = next_step_identifier + 1;
-    next_step_identifier = next_step_identifier + 2;
-  }
-
-  /* Define the Edges */
-  for (i = 0; i < npoints; i++) {
-
-    /* Walk through the contours until we find the right one to look at */
-    PLINE *ct = contour;
-    int adjusted_i = i;
-    int i_start = 0;
-
-    while (adjusted_i >= get_contour_npoints (ct)) {
-      adjusted_i -= get_contour_npoints (ct);
-      i_start += get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-    /* Due to the way the index wrapping works, this works for circular cutouts as well as n-sided */
-
-    /* Bottom */
-    fprintf (f, "#%i = EDGE_CURVE ( 'NONE', #%i, #%i, #%i,   .T. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .F. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .T. ) ;\n",
-             next_step_identifier, bottom_vertex_identifier[i], bottom_vertex_identifier[i_start + (adjusted_i + 1) % get_contour_npoints (ct)], bottom_infinite_line_identifier[i],      // <-- MIGHT NEED TO REVERSE THIS???
-             next_step_identifier + 1, next_step_identifier,
-             next_step_identifier + 2, next_step_identifier);
-    bottom_edge_identifier[i] = next_step_identifier; /* Add 1 for same oriented, add 2 for back oriented */
-    next_step_identifier = next_step_identifier + 3;
-
-    /* Top */
-    fprintf (f, "#%i = EDGE_CURVE ( 'NONE', #%i, #%i, #%i,   .T. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .F. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .T. ) ;\n",
-             next_step_identifier, top_vertex_identifier[i], top_vertex_identifier[i_start + (adjusted_i + 1) % get_contour_npoints (ct)], top_infinite_line_identifier[i],                 // <-- MIGHT NEED TO REVERSE THIS???
-             next_step_identifier + 1, next_step_identifier,
-             next_step_identifier + 2, next_step_identifier);
-    top_edge_identifier[i] = next_step_identifier; /* Add 1 for same oriented, add 2 for back oriented */
-    next_step_identifier = next_step_identifier + 3;
-
-    /* Side */
-    fprintf (f, "#%i = EDGE_CURVE ( 'NONE', #%i, #%i, #%i,   .T. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .F. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .T. ) ;\n",
-             next_step_identifier, bottom_vertex_identifier[i], top_vertex_identifier[i], side_infinite_line_identifier[i],
-             next_step_identifier + 1, next_step_identifier,
-             next_step_identifier + 2, next_step_identifier);
-    side_edge_identifier[i] = next_step_identifier; /* Add 1 for same oriented, add 2 for back oriented */
-    next_step_identifier = next_step_identifier + 3;
-  }
-
-  /* Define the faces */
-
-  /* Bottom */
-  {
-    PLINE *ct = contour;
-    int icont;
-    int start_i;
-
-    start_i = 0;
-    for (icont = 0; icont < ncontours; icont++, start_i += get_contour_npoints (ct), ct = ct->next) {
-
-      fprintf (f, "#%i = EDGE_LOOP ( 'NONE', ( ",
-               next_step_identifier);
-      for (i = start_i + get_contour_npoints (ct) - 1; i > start_i; i--)
-        fprintf (f, "#%i, ", bottom_edge_identifier[i] + FWD);
-      fprintf (f, "#%i ) ) ; "
-                  "#%i = FACE_%sBOUND ( 'NONE', #%i, .T. ) ; \n",
-               bottom_edge_identifier[start_i] + FWD,
-               next_step_identifier + 1, icont > 0 ? "" : "OUTER_", next_step_identifier);
-      bottom_face_bound_identifier[icont] = next_step_identifier + 1;
-      next_step_identifier = next_step_identifier + 2;
-    }
-
-    fprintf (f, "#%i = ADVANCED_FACE ( 'NONE', ( ",
-             next_step_identifier);
-    for (icont = 0; icont < ncontours - 1; icont++)
-      fprintf (f, "#%i, ",
-               bottom_face_bound_identifier[icont]);
-    fprintf (f, "#%i ), #%i, .F. ) ;\n",
-             bottom_face_bound_identifier[ncontours - 1], bottom_plane_identifier);
-    bottom_face_identifier = next_step_identifier;
-    next_step_identifier = next_step_identifier + 1;
-  }
-
-  /* Top */
-  {
-    PLINE *ct = contour;
-    int icont;
-    int start_i;
-
-    start_i = 0;
-    for (icont = 0; icont < ncontours; icont++, start_i += get_contour_npoints (ct), ct = ct->next) {
-      fprintf (f, "#%i = EDGE_LOOP ( 'NONE', ( ",
-               next_step_identifier);
-      for (i = start_i; i < start_i + get_contour_npoints (ct) - 1; i++)
-        fprintf (f, "#%i, ", top_edge_identifier[i] + REV);
-      fprintf (f, "#%i ) ) ; "
-                  "#%i = FACE_%sBOUND ( 'NONE', #%i, .T. ) ; \n",
-               top_edge_identifier[start_i + get_contour_npoints (ct) - 1] + REV,
-               next_step_identifier + 1, icont > 0 ? "" : "OUTER_", next_step_identifier);
-      top_face_bound_identifier[icont] = next_step_identifier + 1;
-      next_step_identifier = next_step_identifier + 2;
-    }
-
-    fprintf (f, "#%i = ADVANCED_FACE ( 'NONE', ( ",
-             next_step_identifier);
-    for (icont = 0; icont < ncontours - 1; icont++)
-      fprintf (f, "#%i, ",
-               top_face_bound_identifier[icont]);
-    fprintf (f, "#%i ), #%i, .F. ) ;\n",
-             top_face_bound_identifier[ncontours - 1], top_plane_identifier);
-    top_face_identifier = next_step_identifier;
-    next_step_identifier = next_step_identifier + 1;
-  }
-
-  /* Sides */
-  for (i = 0; i < npoints; i++) {
-
-    /* Walk through the contours until we find the right one to look at */
-    PLINE *ct = contour;
-    int adjusted_i = i;
-    int i_start = 0;
-
-    while (adjusted_i >= get_contour_npoints (ct)) {
-      adjusted_i -= get_contour_npoints (ct);
-      i_start += get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-    fprintf (f, "#%i = EDGE_LOOP ( 'NONE', ( #%i, #%i, #%i, #%i ) ) ; "
-                "#%i = FACE_OUTER_BOUND ( 'NONE', #%i, .T. ) ; "
-                "#%i = ADVANCED_FACE ( 'NONE', ( #%i ), #%i, .F. ) ;\n",
-             next_step_identifier, side_edge_identifier[i_start + (adjusted_i + 1) % get_contour_npoints (ct)] + REV, top_edge_identifier[i] + FWD, side_edge_identifier[i] + FWD, bottom_edge_identifier[i] + REV,
-             next_step_identifier + 1, next_step_identifier,
-             next_step_identifier + 2, next_step_identifier + 1, side_plane_identifier[i]);
-    side_face_identifier[i] = next_step_identifier + 2;
-    next_step_identifier = next_step_identifier + 3;
-  }
-
-  /* Closed shell which bounds the brep solid */
-  pcb_shell_identifier = next_step_identifier;
-  next_step_identifier++;
-  fprintf (f, "#%i = CLOSED_SHELL ( 'NONE', ( #%i, #%i, ", pcb_shell_identifier, bottom_face_identifier, top_face_identifier);
-  for (i = 0; i < npoints - 1; i++) {
-    fprintf (f, "#%i, ", side_face_identifier[i]);
-  }
-  fprintf (f, "#%i) ) ;\n",
-           side_face_identifier[npoints - 1]);
-
-  /* Finally emit the brep solid definition */
-  fprintf (f, "#%i = MANIFOLD_SOLID_BREP ( 'PCB outline', #%i ) ;\n", brep_identifier, pcb_shell_identifier);
-
-  free (side_plane_identifier);
-  free (bottom_infinite_line_identifier);
-  free (top_infinite_line_identifier);
-  free (side_infinite_line_identifier);
-  free (bottom_vertex_identifier);
-  free (top_vertex_identifier);
-  free (bottom_edge_identifier);
-  free (top_edge_identifier);
-  free (side_edge_identifier);
-  free (side_face_identifier);
-  free (bottom_face_bound_identifier);
-  free (top_face_bound_identifier);
-}
-#undef FWD
-#undef REV
-#endif
-
-  fprintf (f, "ENDSEC;\n" );
-  fprintf (f, "END-ISO-10303-21;\n" );
-
-  fclose (f);
-}
-
-object3d *
-object3d_from_board_outline (void)
-{
-  object3d *object;
-  POLYAREA *outline;
-  PLINE *contour;
-  PLINE *ct;
-  int ncontours;
-  int npoints;
-  int i;
-  vertex3d **vertices;
-  edge_ref *edges;
-  int start_of_ct;
-  int offset_in_ct;
-  int ct_npoints;
-
-  outline = board_outline_poly (true);
-  //outline = board_outline_poly (false); /* (FOR NOW - just the outline, no holes) */
-  ncontours = 0;
-  npoints = 0;
-
-  /* XXX: There can be more than one contour, but for now we restrict ourselves to the first one */
-  contour = outline->contours;
-
-  ct = contour;
-  while (ct != NULL) {
-    ncontours ++;
-    npoints += get_contour_npoints (ct);
-    ct = ct->next;
-  }
-
-  /* We know how many edges and vertices we need now...
-   *
-   * let n = npoints
-   * bodies = 1             (FOR NOW - just the first board outline)
-   * vertices = 2n          (n-top, n-bottom)
-   * edges = 3n             (n-top, n-bottom, n-sides)
-   * faces = 2 + n          (1-top, 1-bottom, n-sides)
-   *
-   * holes = 0              (FOR NOW - just the outline, no holes)
-   * holes = ncontours - 1  (LATER)
-   */
-
-  vertices = malloc (sizeof (vertex3d *) * 2 * npoints);
-  edges    = malloc (sizeof (edge_ref  ) * 3 * npoints);
-
-  /* Define the vertices */
-  ct = contour;
-  start_of_ct = 0;
-  offset_in_ct = 0;
-  ct_npoints = get_contour_npoints (ct);
-
-  for (i = 0; i < npoints; i++, offset_in_ct++) {
-    double x1, y1;
-
-    /* Update which contour we're looking at */
-    if (offset_in_ct == ct_npoints) {
-      offset_in_ct = 0;
-      ct = ct->next;
-      ct_npoints = get_contour_npoints (ct);
-    }
-
-    get_contour_coord_n_in_mm (ct, offset_in_ct, &x1, &y1);
-    vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS)); /* Bottom */
-    vertices[npoints + i] = make_vertex3d (x1, y1, 0); /* Top */
-  }
-
-  /* Define the edges */
-
-  for (i = 0; i < 3 * npoints; i++)
-    edges[i] = make_edge ();
-
-  ct = contour;
-  start_of_ct = 0;
-  offset_in_ct = 0;
-  ct_npoints = get_contour_npoints (ct);
-
-  for (i = 0; i < npoints; i++, offset_in_ct++) {
-    int next_i_around_ct;
-
-    /* Update which contour we're looking at */
-    if (offset_in_ct == ct_npoints) {
-      start_of_ct = i;
-      printf ("start_of_ct = %i\n", start_of_ct);
-      offset_in_ct = 0;
-      ct = ct->next;
-      ct_npoints = get_contour_npoints (ct);
-    }
-
-    next_i_around_ct = start_of_ct + (offset_in_ct + 1) % ct_npoints;
-
-    /* Assign the appropriate vertex geometric data to each edge end */
-    ODATA (edges[0 * npoints + i]) = vertices[0 * npoints + i];
-    DDATA (edges[0 * npoints + i]) = vertices[0 * npoints + next_i_around_ct];
-    ODATA (edges[1 * npoints + i]) = vertices[1 * npoints + i];
-    DDATA (edges[1 * npoints + i]) = vertices[1 * npoints + next_i_around_ct];
-    ODATA (edges[2 * npoints + i]) = vertices[0 * npoints + i];
-    DDATA (edges[2 * npoints + i]) = vertices[1 * npoints + i];
-
-    /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
-    splice (edges[i], edges[npoints + i]);
-    splice (edges[npoints + i], SYM(edges[next_i_around_ct]));
-
-    /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
-    splice (edges[npoints + i], SYM(edges[npoints + next_i_around_ct]));
-    splice (SYM(edges[npoints + next_i_around_ct]), SYM(edges[2 * npoints + i]));
-
-    /* XXX: TOPOLOGY WILL BE OK, MAY NEED MORE INFO FOR GEOMETRY */
-    /* XXX: DO WE NEED TO ASSIGN EXTRA INFORMATION TO CIRCULAR EDGES FOR RENDERING / EXPORT??? */
-    if (ct->is_round) {
-      UNDIR_DATA (edges[0 * npoints + i]) = make_edge_info (false, true, COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (ct->radius));
-      UNDIR_DATA (edges[1 * npoints + i]) = make_edge_info (false, true, COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (ct->radius));
-      UNDIR_DATA (edges[2 * npoints + i]) = make_edge_info (true,  true, COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (ct->radius));
-    }
-
-  }
-
-  poly_Free (&outline);
-
-  object = make_object3d ();
-  object->first_edge = edges[0]; /* edges[34] */
-
-  return object;
-}
-
-void
-object3d_test_board_outline (void)
-{
-  object3d *board_outline;
-
-  board_outline = object3d_from_board_outline ();
-  object3d_export_to_step (board_outline, "object3d_test.step");
-  destroy_object3d (board_outline);
-}
diff --git a/src/hid/gtk/object3d.h b/src/hid/gtk/object3d.h
deleted file mode 100644
index 4f40a3b..0000000
--- a/src/hid/gtk/object3d.h
+++ /dev/null
@@ -1,13 +0,0 @@
-typedef struct {
-  edge_ref first_edge;
-  int id;
-} object3d;
-
-void object3d_test_init (void);
-void object3d_draw_debug (void);
-object3d *make_object3d (void);
-void destroy_object3d (object3d *object);
-object3d *object3d_create_test_cube (void);
-object3d *object3d_from_board_outline (void);
-void object3d_export_to_step (object3d *object, char *filename);
-void object3d_test_board_outline (void);
diff --git a/src/hid/gtk/vertex3d.h b/src/hid/gtk/vertex3d.h
deleted file mode 100644
index bac7e89..0000000
--- a/src/hid/gtk/vertex3d.h
+++ /dev/null
@@ -1,10 +0,0 @@
-typedef struct
-{
-  float x;
-  float y;
-  float z;
-  int id;
-} vertex3d;
-
-vertex3d *make_vertex3d (float x, float y, float z);
-void destroy_vertex3d (vertex3d *v);
diff --git a/src/hid/step/object3d_step.c b/src/hid/step/object3d_step.c
new file mode 100644
index 0000000..6879a98
--- /dev/null
+++ b/src/hid/step/object3d_step.c
@@ -0,0 +1,391 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <stdbool.h>
+
+#include <glib.h>
+
+#include "hid/common/step_id.h"
+#include "hid/common/quad.h"
+#include "hid/common/vertex3d.h"
+#include "hid/common/contour3d.h"
+#include "hid/common/appearance.h"
+#include "hid/common/face3d.h"
+#include "hid/common/edge3d.h"
+#include "hid/common/object3d.h"
+#include "polygon.h"
+#include "data.h"
+
+#include "step_writer.h"
+
+#include "pcb-printf.h"
+
+#include "object3d_step.h"
+
+
+#define REVERSED_PCB_CONTOURS 1 /* PCB Contours are reversed from the expected CCW for outer ordering - once the Y-coordinate flip is taken into account */
+
+#define EPSILON 1e-5 /* XXX: Unknown  what this needs to be */
+
+#ifdef REVERSED_PCB_CONTOURS
+#define STEP_X_TO_COORD(pcb, x) (MM_TO_COORD((x)))
+#define STEP_Y_TO_COORD(pcb, y) ((pcb)->MaxHeight - MM_TO_COORD((y)))
+#else
+/* XXX: BROKEN UPSIDE DOWN OUTPUT */
+#define STEP_X_TO_COORD(pcb, x) (MM_TO_COORD((x)))
+#define STEP_Y_TO_COORD(pcb, y) (MM_TO_COORD((y)))
+#endif
+
+
+static step_id_list
+presentation_style_assignments_from_appearance (step_file *step, appearance *appear)
+{
+  step_id colour = step_colour_rgb (step, "", appear->r, appear->g, appear->b);
+  step_id fill_area_style = step_fill_area_style (step, "", make_step_id_list (1, step_fill_area_style_colour (step, "", colour)));
+  step_id surface_side_style = step_surface_side_style (step, "", make_step_id_list (1, step_surface_style_fill_area (step, fill_area_style)));
+  step_id_list styles_list = make_step_id_list (1, step_surface_style_usage (step, "BOTH", surface_side_style));
+  step_id_list psa_list = make_step_id_list (1, step_presentation_style_assignment (step, styles_list));
+
+  return psa_list;
+}
+
+static step_file *
+start_ap214_file (const char *filename)
+{
+  FILE *f;
+  time_t currenttime;
+  struct tm utc;
+
+  f = fopen (filename, "w");
+  if (f == NULL)
+    {
+      perror (filename);
+      return NULL;
+    }
+
+  currenttime = time (NULL);
+  gmtime_r (&currenttime, &utc);
+
+  fprintf (f, "ISO-10303-21;\n");
+  fprintf (f, "HEADER;\n");
+  fprintf (f, "FILE_DESCRIPTION (\n"
+              "/* description */ ('STEP AP214 export of circuit board'),\n"
+              "/* implementation level */ '1');\n");
+  fprintf (f, "FILE_NAME (/* name */ '%s',\n"
+              "/* time_stamp */ '%.4d-%.2d-%.2dT%.2d:%.2d:%.2d',\n"
+              "/* author */ ( '' ),\n"
+              "/* organisation */ ( '' ),\n"
+              "/* preprocessor_version */ 'PCB STEP EXPORT',\n"
+              "/* originating system */ '%s " VERSION "',\n"
+              "/* authorisation */ '' );\n",
+           filename,
+           1900 + utc.tm_year, 1 + utc.tm_mon, utc.tm_mday, utc.tm_hour, utc.tm_min, utc.tm_sec,
+           Progname);
+  fprintf (f, "FILE_SCHEMA (( 'AUTOMOTIVE_DESIGN' ));\n");
+  fprintf (f, "ENDSEC;\n");
+  fprintf (f, "\n");
+  fprintf (f, "DATA;\n");
+
+  return step_output_file (f);
+}
+
+static void
+finish_ap214_file (step_file *step)
+{
+  fprintf (step->f, "ENDSEC;\n" );
+  fprintf (step->f, "END-ISO-10303-21;\n" );
+  fclose (step->f);
+}
+
+static void
+object3d_to_step_fragment (step_file *step, object3d *object, char *part_id, char *part_name, char *part_description, char *body_name,
+                           step_id *shape_definition_representation, step_id *placement_axis)
+{
+  step_id application_context_identifier;
+  step_id product_identifier;
+  step_id product_definition_identifier;
+  step_id product_definition_shape_identifier;
+  step_id geometric_representation_context_identifier;
+  step_id shape_representation_identifier;
+  step_id brep_identifier;
+  step_id anchor_axis_identifier;
+  step_id pcb_shell_identifier;
+  step_id brep_style_identifier;
+  step_id shape_definition_representation_identifier;
+  GList *styled_item_identifiers = NULL;
+  GList *shell_face_list = NULL;
+  GList *face_iter;
+  GList *edge_iter;
+  GList *vertex_iter;
+  GList *contour_iter;
+
+  /* Setup the context of the "product" we are defining", and that it is a 'part' */
+  application_context_identifier = step_application_context (step, "automotive_design");
+  step_application_protocol_definition (step, "draft international standard", "automotive_design", "1998", application_context_identifier);
+  product_identifier = step_product (step, part_id, part_name /* This one is picked up by freecad */, part_description,
+                                     make_step_id_list (1, step_product_context (step, "NONE", application_context_identifier, "mechanical")));
+  step_product_related_product_category (step, "part", NULL, make_step_id_list (1, product_identifier));
+
+  /* Setup the specific definition of the product we are defining */
+  product_definition_identifier = step_product_definition (step, "UNKNOWN", "",
+                                                           step_product_definition_formation (step, "any", "", product_identifier), /* Versioning for the product */
+                                                           step_product_definition_context (step, "detailed design", application_context_identifier, "design"));
+  product_definition_shape_identifier = step_product_definition_shape (step, "NONE", "NONE", product_definition_identifier);
+
+  geometric_representation_context_identifier = make_3d_metric_step_geometric_representation_context (step);
+
+#define FWD 1
+#define REV 2
+#define ORIENTED_EDGE_IDENTIFIER(e) (((edge_info *)UNDIR_DATA (e))->edge_identifier + ((e & 2) ? REV : FWD))
+
+  /* Define ininite planes corresponding to every planar face, and cylindrical surfaces for every cylindrical face */
+  for (face_iter = object->faces; face_iter != NULL; face_iter = g_list_next (face_iter)) {
+    face3d *face = face_iter->data;
+
+    if (face->is_cylindrical) {
+      /* CYLINDRICAL SURFACE NORMAL POINTS OUTWARDS AWAY FROM ITS AXIS.
+       * face->surface_orientation_reversed NEEDS TO BE SET FOR HOLES IN THE SOLID
+       */
+      face->surface_identifier =
+        step_cylindrical_surface (step, "NONE",
+                                  step_axis2_placement_3d (step, "NONE",
+                                                           step_cartesian_point (step, "NONE", face->cx, face->cy, face->cz),
+                                                                 step_direction (step, "NONE", face->ax, face->ay, face->az),
+                                                                 step_direction (step, "NONE", face->nx, face->ny, face->nz)),
+                                  face->radius);
+    } else {
+      contour3d *outer_contour = face->contours->data;
+      vertex3d *ov = ODATA (outer_contour->first_edge);
+      vertex3d *dv = DDATA (outer_contour->first_edge);
+
+      double rx, ry, rz;
+
+      rx = dv->x - ov->x;
+      ry = dv->y - ov->y;
+      rz = dv->z - ov->z;
+
+      /* Catch the circular face case where the start and end vertices are identical */
+      if (rx < EPSILON && -rx < EPSILON &&
+          ry < EPSILON && -ry < EPSILON &&
+          rz < EPSILON && -rz < EPSILON) {
+        rx = 1., ry = 0., rz = 0.;
+      }
+
+      face->surface_identifier =
+        step_plane (step, "NONE",
+                    step_axis2_placement_3d (step, "NONE",
+                                             step_cartesian_point (step, "NONE", ov->x,  /* A point on the plane. Defines 0,0 of the plane's parameterised coords. */ 
+                                                                                 ov->y,      /* Set this to the origin vertex of the first edge */
+                                                                                 ov->z),     /* this contour links to in the quad edge structure. */
+                                                   step_direction (step, "NONE", face->nx, face->ny, face->nz), /* An axis direction normal to the the face - Gives z-axis */
+                                                   step_direction (step, "NONE", rx,     /* Reference x-axis, orthogonal to z-axis. */
+                                                                                 ry,         /* Define this to be along the first edge this */
+                                                                                 rz)));      /* contour links to in the quad edge structure */
+    }
+  }
+
+  /* Define the infinite lines corresponding to every edge (either lines or circles)*/
+  for (edge_iter = object->edges; edge_iter != NULL; edge_iter = g_list_next (edge_iter)) {
+    edge_ref edge = (edge_ref)edge_iter->data;
+    edge_info *info = UNDIR_DATA (edge);
+
+    if (info->is_round) {
+      info->infinite_line_identifier =
+        step_circle (step, "NONE",
+                     step_axis2_placement_3d (step, "NONE",
+                                              step_cartesian_point (step, "NONE", info->cx, info->cy, info->cz),  // <--- Center of the circle
+                                                    step_direction (step, "NONE", info->nx, info->ny, info->nz),  // <--- Normal of the circle
+                                                    step_direction (step, "NONE", -1.0,     0.0,      0.0)),      // <--- Approximate X-axis direction of placement /* XXX: PULL FROM FACE DATA */
+                                                    info->radius);
+    } else {
+      vertex3d *ov = ODATA (edge);
+      vertex3d *dv = DDATA (edge);
+
+      double dir_x, dir_y, dir_z;
+
+      dir_x = dv->x - ov->x;
+      dir_y = dv->y - ov->y;
+      dir_z = dv->z - ov->z;
+
+#if 1
+      /* XXX: This avoids the test file step_outline_test.pcb failing to display properly in freecad when coordinates are slightly rounded */
+      if (dir_x < EPSILON && -dir_x < EPSILON &&
+          dir_y < EPSILON && -dir_y < EPSILON &&
+          dir_z < EPSILON && -dir_z < EPSILON) {
+        printf ("EDGE TOO SHORT TO DETERMINE DIRECTION - GUESSING! Coords (%f, %f)\n", ov->x, ov->y);
+        pcb_printf ("Approx PCB coords of short edge: %#mr, %#mr\n", (Coord)STEP_X_TO_COORD (PCB, ov->x), (Coord)STEP_Y_TO_COORD (PCB, ov->y));
+        dir_x = 1.0; /* DUMMY TO AVOID A ZERO LENGTH DIRECTION VECTOR */
+      }
+#endif
+
+      info->infinite_line_identifier =
+        step_line (step, "NONE",
+                   step_cartesian_point (step, "NONE", ov->x, ov->y, ov->z),  // <--- A point on the line (the origin vertex)
+                   step_vector (step, "NONE",
+                                step_direction (step, "NONE", dir_x, dir_y, dir_z), // <--- Direction along the line
+                                1000.0));     // <--- Arbitrary length in this direction for the parameterised coordinate "1".
+
+    }
+  }
+
+  /* Define the vertices */
+  for (vertex_iter = object->vertices; vertex_iter != NULL; vertex_iter = g_list_next (vertex_iter)) {
+    vertex3d *vertex = vertex_iter->data;
+
+    vertex->vertex_identifier =
+      step_vertex_point (step, "NONE", step_cartesian_point (step, "NONE", vertex->x, vertex->y, vertex->z));
+  }
+
+  /* Define the Edges */
+  for (edge_iter = object->edges; edge_iter != NULL; edge_iter = g_list_next (edge_iter)) {
+    edge_ref edge = (edge_ref)edge_iter->data;
+    edge_info *info = UNDIR_DATA (edge);
+    step_id sv = ((vertex3d *)ODATA (edge))->vertex_identifier;
+    step_id ev = ((vertex3d *)DDATA (edge))->vertex_identifier;
+
+    /* XXX: The lookup of these edges by adding to info->edge_identifier requires the step_* functions to assign sequential identifiers */
+    info->edge_identifier = step_edge_curve (step, "NONE", sv, ev, info->infinite_line_identifier, true);
+    step_oriented_edge (step, "NONE", info->edge_identifier, true);  /* Add 1 to info->edge_identifier to find this (same) oriented edge */
+    step_oriented_edge (step, "NONE", info->edge_identifier, false); /* Add 2 to info->edge_identifier to find this (back) oriented edge */
+  }
+
+  /* Define the faces */
+  for (face_iter = object->faces; face_iter != NULL; face_iter = g_list_next (face_iter)) {
+    face3d *face = face_iter->data;
+    bool outer_contour = true;
+    step_id_list face_contour_list = NULL;
+
+    for (contour_iter = face->contours;
+         contour_iter != NULL;
+         contour_iter = g_list_next (contour_iter), outer_contour = false) {
+      contour3d *contour = contour_iter->data;
+      edge_ref edge;
+      step_id edge_loop;
+      step_id_list edge_loop_edges = NULL;
+
+      edge = contour->first_edge;
+      do {
+        edge_loop_edges = g_list_append (edge_loop_edges, GINT_TO_POINTER (ORIENTED_EDGE_IDENTIFIER (edge)));
+      } while (edge = LNEXT (edge), edge != contour->first_edge);
+
+      edge_loop = step_edge_loop (step, "NONE", edge_loop_edges);
+
+      if (outer_contour)
+        contour->face_bound_identifier = step_face_outer_bound (step, "NONE", edge_loop, true);
+      else
+        contour->face_bound_identifier = step_face_bound (step, "NONE", edge_loop, true);
+
+      face_contour_list = g_list_append (face_contour_list, GINT_TO_POINTER (contour->face_bound_identifier));
+    }
+
+    face->face_identifier = step_advanced_face (step, "NONE", face_contour_list, face->surface_identifier, !face->surface_orientation_reversed);
+    shell_face_list = g_list_append (shell_face_list, GINT_TO_POINTER (face->face_identifier));
+  }
+
+  /* Closed shell which bounds the brep solid */
+  pcb_shell_identifier = step_closed_shell (step, "NONE", shell_face_list);
+  brep_identifier = step_manifold_solid_brep (step, body_name /* This is picked up as the solid body name by Solidworks */, pcb_shell_identifier);
+
+#if 1
+  /* Body style */
+  /* XXX: THERE MUST BE A BODY STYLE, CERTAINLY IF WE WANT TO OVER RIDE FACE COLOURS */
+  brep_style_identifier = step_styled_item (step, "NONE", presentation_style_assignments_from_appearance (step, object->appear), brep_identifier);
+  step_presentation_layer_assignment (step, "1", "Layer 1", make_step_id_list (1, brep_style_identifier));
+
+  styled_item_identifiers = g_list_append (styled_item_identifiers, GINT_TO_POINTER (brep_style_identifier));
+
+  /* Face styles */
+  for (face_iter = object->faces; face_iter != NULL; face_iter = g_list_next (face_iter)) {
+    face3d *face = face_iter->data;
+
+    if (face->appear != NULL) {
+      step_id orsi = step_over_riding_styled_item (step, "NONE",
+                                                   presentation_style_assignments_from_appearance (step, face->appear),
+                                                   face->face_identifier, brep_style_identifier);
+      styled_item_identifiers = g_list_append (styled_item_identifiers, GINT_TO_POINTER (orsi));
+    }
+  }
+
+  /* Emit references to the styled and over_ridden styled items */
+  step_mechanical_design_geometric_presentation_representation (step, "", styled_item_identifiers, geometric_representation_context_identifier);
+#endif
+
+  /* Need an anchor in 3D space to orient the shape */
+  anchor_axis_identifier = step_axis2_placement_3d (step, "NONE",
+                                                    step_cartesian_point (step, "NONE", 0.0, 0.0, 0.0),
+                                                          step_direction (step, "NONE", 0.0, 0.0, 1.0),
+                                                          step_direction (step, "NONE", 1.0, 0.0, 0.0)),
+
+  shape_representation_identifier =
+    step_advanced_brep_shape_representation (step, "test_pcb_absr_name",
+                                             make_step_id_list (2, brep_identifier, anchor_axis_identifier), geometric_representation_context_identifier);
+
+  shape_definition_representation_identifier =
+  step_shape_definition_representation (step, product_definition_shape_identifier, shape_representation_identifier);
+
+  if (shape_definition_representation != NULL)
+    *shape_definition_representation = shape_definition_representation_identifier;
+
+  if (placement_axis != NULL)
+    *placement_axis = anchor_axis_identifier;
+
+#undef ORIENTED_EDGE_IDENTIFIER
+#undef FWD
+#undef REV
+}
+
+void
+object3d_list_export_to_step_assy (GList *objects, const char *filename)
+{
+  step_file *step;
+  step_id comp_shape_definition_representation;
+  step_id comp_placement_axis;
+  GList *object_iter;
+  int part;
+  bool multiple_parts;
+
+  multiple_parts = (g_list_next (objects) != NULL);
+
+  step = start_ap214_file (filename);
+
+  for (object_iter = objects, part = 1;
+       object_iter != NULL;
+       object_iter = g_list_next (object_iter), part++) {
+
+    object3d *object = object_iter->data;
+    GString *part_id;
+    GString *part_name;
+    GString *body_name;
+
+    part_id   = g_string_new ("board");
+    part_name = g_string_new ("PCB board");
+    body_name = g_string_new ("PCB board body");
+
+    if (multiple_parts) {
+      g_string_append_printf (part_id, "-%i", part);
+      g_string_append_printf (part_name, " - %i", part);
+      g_string_append_printf (body_name, " - %i", part);
+    }
+
+    object3d_to_step_fragment (step, object, part_id->str, part_name->str, "PCB model", body_name->str,
+                               &comp_shape_definition_representation, &comp_placement_axis);
+
+    g_string_free (part_id, true);
+    g_string_free (part_name, true);
+    g_string_free (body_name, true);
+  }
+
+  finish_ap214_file (step);
+
+  /* XXX: TODO: MAKE AN ASSEMBLY PRODUCT AND GATHER THE ABOVE PIECES INSIDE IT */
+}
+
+void
+object3d_export_to_step (object3d *object, const char *filename)
+{
+  step_file *step;
+
+  step = start_ap214_file (filename);
+  object3d_to_step_fragment (step, object, "board", "PCB board", "PCB model", "PCB board body", NULL, NULL);
+  finish_ap214_file (step);
+}
diff --git a/src/hid/step/object3d_step.h b/src/hid/step/object3d_step.h
new file mode 100644
index 0000000..5dc6f4d
--- /dev/null
+++ b/src/hid/step/object3d_step.h
@@ -0,0 +1,2 @@
+void object3d_list_export_to_step_assy (GList *objects, const char *filename);
+void object3d_export_to_step (object3d *object, const char *filename);
diff --git a/src/hid/step/step.c b/src/hid/step/step.c
index c109dc5..2e2e86d 100644
--- a/src/hid/step/step.c
+++ b/src/hid/step/step.c
@@ -26,6 +26,16 @@
 #include "polygon.h"
 #include "misc.h"
 
+#include "hid/common/step_id.h"
+#include "hid/common/quad.h"
+#include "hid/common/vertex3d.h"
+#include "hid/common/contour3d.h"
+#include "hid/common/appearance.h"
+#include "hid/common/face3d.h"
+#include "hid/common/edge3d.h"
+#include "hid/common/object3d.h"
+#include "object3d_step.h"
+
 #ifdef HAVE_LIBDMALLOC
 #include <dmalloc.h>
 #endif
@@ -36,23 +46,8 @@
 
 #define HACK_BOARD_THICKNESS MM_TO_COORD(1.6)
 
-static int step_set_layer (const char *name, int group, int empty);
-static void use_gc (hidGC gc);
-
-typedef struct step_gc_struct
-{
-  struct hid_gc_struct hid_gc; /* Parent */
-
-  EndCapStyle cap;
-  Coord width;
-  unsigned char r, g, b;
-  int erase;
-  int faded;
-} *stepGC;
 
 HID step_hid;
-static HID_DRAW step_graphics;
-static HID_DRAW_CLASS step_graphics_class;
 
 HID_Attribute step_attribute_list[] = {
   /* other HIDs expect this to be first.  */
@@ -73,27 +68,7 @@ Name of the STEP output file. Can contain a path.
 
 REGISTER_ATTRIBUTES (step_attribute_list)
 
-/* All file-scope data is in global struct */
-static struct {
-
-  FILE *f;
-  bool print_group[MAX_LAYER];
-  bool print_layer[MAX_LAYER];
-
-  const char *filename;
-
-  LayerType *outline_layer;
-
-  HID_Attr_Val step_values[NUM_OPTIONS];
-
-  bool is_mask;
-  bool is_drill;
-  bool is_assy;
-  bool is_copper;
-  bool is_paste;
-
-  int next_identifier;
-} global;
+static HID_Attr_Val step_option_values[NUM_OPTIONS];
 
 static HID_Attribute *
 step_get_export_options (int *n)
@@ -107,658 +82,6 @@ step_get_export_options (int *n)
   return step_attribute_list;
 }
 
-static int
-group_for_layer (int l)
-{
-  if (l < max_copper_layer + 2 && l >= 0)
-    return GetLayerGroupNumberByNumber (l);
-  /* else something unique */
-  return max_group + 3 + l;
-}
-
-static int
-layer_sort (const void *va, const void *vb)
-{
-  int a = *(int *) va;
-  int b = *(int *) vb;
-  int d = group_for_layer (b) - group_for_layer (a);
-  if (d)
-    return d;
-  return b - a;
-}
-
-void
-step_start_file (FILE *f, const char *filename)
-{
-  time_t currenttime = time (NULL);
-  struct tm utc;
-
-  gmtime_r (&currenttime, &utc);
-
-  fprintf (f, "ISO-10303-21;\n");
-  fprintf (f, "HEADER;\n");
-  fprintf (f, "FILE_DESCRIPTION (\n"
-              "/* description */ ('STEP AP214 export of circuit board'),\n"
-              "/* implementation level */ '1');\n");
-  fprintf (f, "FILE_NAME (/* name */ '%s',\n"
-              "/* time_stamp */ '%.4d-%.2d-%.2dT%.2d:%.2d:%.2d',\n"
-              "/* author */ ( '' ),\n"
-              "/* organisation */ ( '' ),\n"
-              "/* preprocessor_version */ 'PCB STEP EXPORT',\n"
-              "/* originating system */ '%s " VERSION "',\n"
-              "/* authorisation */ '' );\n",
-           filename,
-           1900 + utc.tm_year, 1 + utc.tm_mon, utc.tm_mday, utc.tm_hour, utc.tm_min, utc.tm_sec,
-           Progname);
-  fprintf (f, "FILE_SCHEMA (( 'AUTOMOTIVE_DESIGN' ));\n");
-  fprintf (f, "ENDSEC;\n");
-  fprintf (f, "\n");
-  fprintf (f, "DATA;\n");
-
-  /* TEST */
-
-  /* Setup the context of the "product" we are defining", and that it is a 'part' */
-
-  fprintf (f, "#1 = APPLICATION_CONTEXT ( 'automotive_design' ) ;\n"
-              "#2 = APPLICATION_PROTOCOL_DEFINITION ( 'draft international standard', 'automotive_design', 1998, #1 );\n"
-              "#3 = PRODUCT_CONTEXT ( 'NONE', #1, 'mechanical' ) ;\n"
-              "#4 = PRODUCT ('%s', '%s', '%s', (#3)) ;\n"
-              "#5 = PRODUCT_RELATED_PRODUCT_CATEGORY ('part', $, (#4)) ;\n",
-              "test_pcb_id", "test_pcb_name", "test_pcb_description");
-
-  /* Setup the specific definition of the product we are defining */
-  fprintf (f, "#6 = PRODUCT_DEFINITION_CONTEXT ( 'detailed design', #1, 'design' ) ;\n"
-              "#7 = PRODUCT_DEFINITION_FORMATION_WITH_SPECIFIED_SOURCE ( 'ANY', '', #4, .NOT_KNOWN. ) ;\n"
-              "#8 = PRODUCT_DEFINITION ( 'UNKNOWN', '', #7, #6 ) ;\n"
-              "#9 = PRODUCT_DEFINITION_SHAPE ( 'NONE', 'NONE',  #8 ) ;\n");
-
-  /* Need an anchor in 3D space to orient the shape */
-  fprintf (f, "#10 =    CARTESIAN_POINT ( 'NONE',  ( 0.0, 0.0, 0.0 ) ) ;\n"
-              "#11 =          DIRECTION ( 'NONE',  ( 0.0, 0.0, 1.0 ) ) ;\n"
-              "#12 =          DIRECTION ( 'NONE',  ( 1.0, 0.0, 0.0 ) ) ;\n"
-              "#13 = AXIS2_PLACEMENT_3D ( 'NONE', #10, #11, #12 ) ;\n");
-
-  /* Grr.. more boilerplate - this time unit definitions */
-
-  fprintf (f, "#14 = UNCERTAINTY_MEASURE_WITH_UNIT (LENGTH_MEASURE( 1.0E-005 ), #15, 'distance_accuracy_value', 'NONE');\n"
-              "#15 =( LENGTH_UNIT ( ) NAMED_UNIT ( * ) SI_UNIT ( .MILLI., .METRE. ) );\n"
-              "#16 =( NAMED_UNIT ( * ) PLANE_ANGLE_UNIT ( ) SI_UNIT ( $, .RADIAN. ) );\n"
-              "#17 =( NAMED_UNIT ( * ) SI_UNIT ( $, .STERADIAN. ) SOLID_ANGLE_UNIT ( ) );\n"
-              "#18 =( GEOMETRIC_REPRESENTATION_CONTEXT ( 3 ) GLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT ( ( #14 ) ) GLOBAL_UNIT_ASSIGNED_CONTEXT ( ( #15, #16, #17 ) ) REPRESENTATION_CONTEXT ( 'NONE', 'WORKASPACE' ) );\n");
-
-  /* BREP STUFF FROM #21 onwards say? */
-  fprintf (f, "#19 = ADVANCED_BREP_SHAPE_REPRESENTATION ( '%s', ( #21, #13 ), #18 ) ;\n" /* #21 is the Manifold_solid_brep */
-              "#20 = SHAPE_DEFINITION_REPRESENTATION ( #9, #19 ) ;\n",
-              "test_pcb_absr_name");
-
-  global.next_identifier = 21;
-}
-
-static int
-get_contour_npoints (PLINE *contour)
-{
-  /* HACK FOR ROUND CONTOURS */
-  if (contour->is_round)
-    return 1;
-
-  return contour->Count;
-}
-
-static void
-get_contour_coord_n_in_mm (PLINE *contour, int n, double *x, double *y)
-{
-  VNODE *vertex = &contour->head;
-
-  if (contour->is_round)
-    {
-      /* HACK SPECIAL CASE FOR ROUND CONTOURS */
-
-      /* We define an arbitrary point on the contour. This is used, for example,
-       * to define a coordinate system along the contour, and coincides with where
-       * we add a straight edge down the side of an extruded cylindrical shape.
-       */
-      *x = COORD_TO_MM (contour->cx - contour->radius);
-      *y = COORD_TO_MM (contour->cy); /* FIXME: PCB's coordinate system has y increasing downwards */
-
-      return;
-    }
-
-  while (n > 0) {
-    vertex = vertex->next; /* The VNODE structure is circularly linked, so wrapping is OK */
-    n--;
-  }
-
-  *x = COORD_TO_MM (vertex->point[0]);
-  *y = COORD_TO_MM (vertex->point[1]); /* FIXME: PCB's coordinate system has y increasing downwards */
-}
-
-#define FWD 1
-#define REV 2
-static void
-step_emit_board_contour (FILE *f, PLINE *contour)
-{
-  int ncontours;
-  int npoints;
-
-  int brep_identifier;
-
-  int bottom_plane_identifier;
-  int top_plane_identifier;
-  int *side_plane_identifier;
-
-  int *bottom_infinite_line_identifier;
-  int *top_infinite_line_identifier;
-  int *side_infinite_line_identifier;
-
-  int *bottom_vertex_identifier;
-  int *top_vertex_identifier;
-
-  int *bottom_edge_identifier;
-  int *top_edge_identifier;
-  int *side_edge_identifier;
-
-  int *bottom_face_bound_identifier;
-  int *top_face_bound_identifier;
-
-  int bottom_face_identifier;
-  int top_face_identifier;
-  int *side_face_identifier;
-
-  int pcb_shell_identifier;
-
-  int i;
-
-  PLINE *ct;
-
-  char *face_name;
-
-  ncontours = 0;
-  npoints = 0;
-  ct = contour;
-  while (ct != NULL) {
-    ncontours ++;
-    npoints += get_contour_npoints (ct);
-    ct = ct->next;
-  }
-
-  /* TODO: Avoid needing to store these identifiers by nailing down our usage pattern of identifiers */
-  /* Allocate some storage for identifiers */
-
-            side_plane_identifier = g_malloc (sizeof (int) * npoints);
-  bottom_infinite_line_identifier = g_malloc (sizeof (int) * npoints);
-     top_infinite_line_identifier = g_malloc (sizeof (int) * npoints);
-    side_infinite_line_identifier = g_malloc (sizeof (int) * npoints);
-         bottom_vertex_identifier = g_malloc (sizeof (int) * npoints);
-            top_vertex_identifier = g_malloc (sizeof (int) * npoints);
-           bottom_edge_identifier = g_malloc (sizeof (int) * npoints);
-              top_edge_identifier = g_malloc (sizeof (int) * npoints);
-             side_edge_identifier = g_malloc (sizeof (int) * npoints);
-             side_face_identifier = g_malloc (sizeof (int) * npoints);
-
-     bottom_face_bound_identifier = g_malloc (sizeof (int) * ncontours);
-        top_face_bound_identifier = g_malloc (sizeof (int) * ncontours);
-
-  /* For a n-sided outline, we need: */
-
-  // PLANES:               2 + n
-  // 2 bottom + top planes
-  // n side planes
-
-  // INFINITE LINES:       3n
-  // n for the bottom (in the bottom plane)
-  // n for the top (in the top plane)
-  // n for the sides (joining the top + bottom vertex of the extruded shape (n sided outline = n vertices)
-
-  // VERTICES:             2n
-  // n for the bottom (in the bottom plane)
-  // n for the top (in the top plane)
-
-  // EDGES:                3n          (6n oriented edges)
-  // n for the bottom
-  // n for the top
-  // n for the sides
-
-  // FACES:                2 + n
-  // 2 bottom + top faces
-  // n side faces
-
-  // A consistent numbering scheme will avoid needing complex data-structures here!
-
-  /* Save a place for the brep identifier */
-  brep_identifier = global.next_identifier++;
-
-  /* Define the bottom and top planes */
-  fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-              "#%i = DIRECTION ( 'NONE', (  0.0,  0.0,  1.0 ) ) ; "
-              "#%i = DIRECTION ( 'NONE', (  1.0,  0.0,  0.0 ) ) ; "
-              "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i, #%i, #%i ) ; "
-              "#%i = PLANE ( 'NONE',  #%i ) ;\n",
-           global.next_identifier, 0.0, 0.0, -COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-           global.next_identifier + 1,
-           global.next_identifier + 2,
-           global.next_identifier + 3, global.next_identifier, global.next_identifier + 1, global.next_identifier + 2,
-           global.next_identifier + 4, global.next_identifier + 3);
-  bottom_plane_identifier = global.next_identifier + 4;
-  global.next_identifier = global.next_identifier + 5;
-
-  fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-              "#%i = DIRECTION ( 'NONE', (  0.0,  0.0, -1.0 ) ) ; "
-              "#%i = DIRECTION ( 'NONE', ( -1.0,  0.0,  0.0 ) ) ; "
-              "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i, #%i, #%i ) ; "
-              "#%i = PLANE ( 'NONE',  #%i ) ;\n",
-           global.next_identifier, 0.0, 0.0, COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-           global.next_identifier + 1,
-           global.next_identifier + 2,
-           global.next_identifier + 3, global.next_identifier, global.next_identifier + 1, global.next_identifier + 2,
-           global.next_identifier + 4, global.next_identifier + 3);
-  top_plane_identifier = global.next_identifier + 4;
-  global.next_identifier = global.next_identifier + 5;
-
-  /* Define the side planes */
-  for (i = 0; i < npoints; i++) {
-    double x1, y1, x2, y2;
-
-    /* Walk through the contours until we find the right one to look at */
-    PLINE *ct = contour;
-    int adjusted_i = i;
-
-    while (adjusted_i >= get_contour_npoints (ct)) {
-      adjusted_i -= get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-    if (ct->is_round)
-      {
-        /* HACK SPECIAL CASE FOR ROUND CONTOURS (Surface edges bounded by a cylindrical surface, not n-planes) */
-
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i, #%i, #%i ) ; "
-                    "#%i = CYLINDRICAL_SURFACE ( 'NONE', #%i, %f ) ;\n",
-                 global.next_identifier, /* A point on the axis of the cylinder */ COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), 0.0,
-                 global.next_identifier + 1, /* Direction of surface axis... not sure if the sign of the direction matters */ 0.0, 0.0, 1.0,
-                 global.next_identifier + 2, /* URM???? NOT SURE WHAT THIS DIRECTION IS FOR                                */ 1.0, 0.0, 0.0,
-                 global.next_identifier + 3, global.next_identifier, global.next_identifier + 1, global.next_identifier + 2,
-                 global.next_identifier + 4, global.next_identifier + 3, COORD_TO_MM (ct->radius));
-
-        side_plane_identifier[i] = global.next_identifier + 4;
-        global.next_identifier = global.next_identifier + 5;
-      }
-    else
-      {
-        get_contour_coord_n_in_mm (ct, adjusted_i,     &x1, &y1);
-        get_contour_coord_n_in_mm (ct, adjusted_i + 1, &x2, &y2);
-
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i, #%i, #%i ) ; "
-                    "#%i = PLANE ( 'NONE',  #%i ) ;\n",
-                 global.next_identifier,     /* A point on the plane                      */ x1, y1, 0.0,
-                 global.next_identifier + 1, /* An axis direction pointing into the shape */ -(y2 - y1), (x2 - x1), 0.0, // <--- NOT SURE IF I NEED TO NORMALISE THIS, OR FLIP THE DIRECTION??
-                 global.next_identifier + 2, /* A reference direction pointing.. "meh"?   */ 0.0, 0.0, 1.0,
-                 global.next_identifier + 3, global.next_identifier, global.next_identifier + 1, global.next_identifier + 2,
-                 global.next_identifier + 4, global.next_identifier + 3);
-        side_plane_identifier[i] = global.next_identifier + 4;
-        global.next_identifier = global.next_identifier + 5;
-      }
-  }
-
-  /* Define the infinite lines */
-  for (i = 0; i < npoints; i++) {
-    double x1, y1, x2, y2;
-
-    /* Walk through the contours until we find the right one to look at */
-    PLINE *ct = contour;
-    int adjusted_i = i;
-
-    while (adjusted_i >= get_contour_npoints (ct)) {
-      adjusted_i -= get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-    get_contour_coord_n_in_mm (ct, adjusted_i,     &x1, &y1);
-    get_contour_coord_n_in_mm (ct, adjusted_i + 1, &x2, &y2);
-
-    if (ct->is_round)
-      {
-        /* HACK SPECIAL CASE FOR ROUND CONTOURS (Top and bottom faces bounded a circular contour, not n-lines) */
-
-        /* Bottom */
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i,  #%i,  #%i ) ;"
-                    "#%i = CIRCLE ( 'NONE', #%i, %f ) ;\n",
-                 global.next_identifier,     /* Center of the circle   */ COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), -COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-                 global.next_identifier + 1, /* Normal of circle?      */ 0.0, 0.0, -1.0, // <--- NOT SURE IF I NEED TO FLIP THE DIRECTION??
-                 global.next_identifier + 2, /* ??????                 */ -1.0, 0.0, 0.0, // NOT SURE WHAT THIS IS!
-                 global.next_identifier + 3, global.next_identifier, global.next_identifier + 1, global.next_identifier + 2,
-                 global.next_identifier + 4, global.next_identifier + 3, COORD_TO_MM (ct->radius));
-        bottom_infinite_line_identifier[i] = global.next_identifier + 4;
-        global.next_identifier = global.next_identifier + 5;
-
-        /* Top */
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i,  #%i,  #%i ) ;"
-                    "#%i = CIRCLE ( 'NONE', #%i, %f ) ;\n",
-                 global.next_identifier,     /* Center of the circle   */ COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-                 global.next_identifier + 1, /* Normal of circle?      */ 0.0, 0.0, -1.0, // <--- NOT SURE IF I NEED TO FLIP THE DIRECTION??
-                 global.next_identifier + 2, /* ??????                 */ -1.0, 0.0, 0.0, // NOT SURE WHAT THIS IS!
-                 global.next_identifier + 3, global.next_identifier, global.next_identifier + 1, global.next_identifier + 2,
-                 global.next_identifier + 4, global.next_identifier + 3, COORD_TO_MM (ct->radius));
-        top_infinite_line_identifier[i] = global.next_identifier + 4;
-        global.next_identifier = global.next_identifier + 5;
-      }
-    else
-      {
-        /* Bottom */
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = VECTOR ( 'NONE', #%i, 1000.0 ) ; "
-                    "#%i = LINE ( 'NONE', #%i, #%i ) ;\n",
-                 global.next_identifier,     /* A point on the line         */ x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-                 global.next_identifier + 1, /* A direction along the line  */ (x2 - x1), (y2 - y1), 0.0, // <--- NOT SURE IF I NEED TO NORMALISE THIS, OR FLIP THE DIRECTION??
-                 global.next_identifier + 2, global.next_identifier + 1,
-                 global.next_identifier + 3, global.next_identifier, global.next_identifier + 2);
-        bottom_infinite_line_identifier[i] = global.next_identifier + 3;
-        global.next_identifier = global.next_identifier + 4;
-
-        /* Top */
-        fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                    "#%i = VECTOR ( 'NONE', #%i, 1000.0 ) ; "
-                    "#%i = LINE ( 'NONE', #%i, #%i ) ;\n",
-                 global.next_identifier,     /* A point on the line         */ x1, y1, COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-                 global.next_identifier + 1, /* A direction along the line  */ (x2 - x1), (y2 - y1), 0.0, // <--- NOT SURE IF I NEED TO NORMALISE THIS, OR FLIP THE DIRECTION??
-                 global.next_identifier + 2, global.next_identifier + 1,
-                 global.next_identifier + 3, global.next_identifier, global.next_identifier + 2);
-        top_infinite_line_identifier[i] = global.next_identifier + 3;
-        global.next_identifier = global.next_identifier + 4;
-      }
-
-    /* Side */
-    fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                "#%i =       DIRECTION ( 'NONE', ( %f, %f, %f )) ; "
-                "#%i = VECTOR ( 'NONE', #%i, 1000.0 ) ; "
-                "#%i = LINE ( 'NONE', #%i, #%i ) ;\n",
-             global.next_identifier,     /* A point on the line         */ x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-             global.next_identifier + 1, /* A direction along the line  */ 0.0, 0.0, 1.0, // <--- NOT SURE IF I NEED TO NORMALISE THIS, OR FLIP THE DIRECTION??
-             global.next_identifier + 2, global.next_identifier + 1,
-             global.next_identifier + 3, global.next_identifier, global.next_identifier + 2);
-    side_infinite_line_identifier[i] = global.next_identifier + 3;
-    global.next_identifier = global.next_identifier + 4;
-  }
-
-  /* Define the vertices */
-  for (i = 0; i < npoints; i++) {
-    double x1, y1;
-
-    /* Walk through the contours until we find the right one to look at */
-    PLINE *ct = contour;
-    int adjusted_i = i;
-
-    while (adjusted_i >= get_contour_npoints (ct)) {
-      adjusted_i -= get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-    get_contour_coord_n_in_mm (ct, adjusted_i, &x1, &y1);
-
-    /* Bottom */
-    fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                "#%i = VERTEX_POINT ( 'NONE', #%i ) ;\n",
-             global.next_identifier,     /* Vertex coordinate  */ x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-             global.next_identifier + 1, global.next_identifier);
-    bottom_vertex_identifier[i] = global.next_identifier + 1;
-    global.next_identifier = global.next_identifier + 2;
-
-    /* Top */
-    fprintf (f, "#%i = CARTESIAN_POINT ( 'NONE', ( %f, %f, %f )) ; "
-                "#%i = VERTEX_POINT ( 'NONE', #%i ) ;\n",
-             global.next_identifier,     /* Vertex coordinate  */ x1, y1, COORD_TO_MM (HACK_BOARD_THICKNESS) / 2.0,
-             global.next_identifier + 1, global.next_identifier);
-    top_vertex_identifier[i] = global.next_identifier + 1;
-    global.next_identifier = global.next_identifier + 2;
-  }
-
-  /* Define the Edges */
-  for (i = 0; i < npoints; i++) {
-
-    /* Walk through the contours until we find the right one to look at */
-    PLINE *ct = contour;
-    int adjusted_i = i;
-    int i_start = 0;
-
-    while (adjusted_i >= get_contour_npoints (ct)) {
-      adjusted_i -= get_contour_npoints (ct);
-      i_start += get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-    /* Due to the way the index wrapping works, this works for circular cutouts as well as n-sided */
-
-    /* Bottom */
-    fprintf (f, "#%i = EDGE_CURVE ( 'NONE', #%i, #%i, #%i,   .T. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .F. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .T. ) ;\n",
-             global.next_identifier, bottom_vertex_identifier[i], bottom_vertex_identifier[i_start + (adjusted_i + 1) % get_contour_npoints (ct)], bottom_infinite_line_identifier[i],      // <-- MIGHT NEED TO REVERSE THIS???
-             global.next_identifier + 1, global.next_identifier,
-             global.next_identifier + 2, global.next_identifier);
-    bottom_edge_identifier[i] = global.next_identifier; /* Add 1 for same oriented, add 2 for back oriented */
-    global.next_identifier = global.next_identifier + 3;
-
-    /* Top */
-    fprintf (f, "#%i = EDGE_CURVE ( 'NONE', #%i, #%i, #%i,   .T. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .F. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .T. ) ;\n",
-             global.next_identifier, top_vertex_identifier[i], top_vertex_identifier[i_start + (adjusted_i + 1) % get_contour_npoints (ct)], top_infinite_line_identifier[i],                 // <-- MIGHT NEED TO REVERSE THIS???
-             global.next_identifier + 1, global.next_identifier,
-             global.next_identifier + 2, global.next_identifier);
-    top_edge_identifier[i] = global.next_identifier; /* Add 1 for same oriented, add 2 for back oriented */
-    global.next_identifier = global.next_identifier + 3;
-
-    /* Side */
-    fprintf (f, "#%i = EDGE_CURVE ( 'NONE', #%i, #%i, #%i,   .T. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .F. ) ; "
-                "#%i = ORIENTED_EDGE ( 'NONE', *, *, #%i, .T. ) ;\n",
-             global.next_identifier, bottom_vertex_identifier[i], top_vertex_identifier[i], side_infinite_line_identifier[i],
-             global.next_identifier + 1, global.next_identifier,
-             global.next_identifier + 2, global.next_identifier);
-    side_edge_identifier[i] = global.next_identifier; /* Add 1 for same oriented, add 2 for back oriented */
-    global.next_identifier = global.next_identifier + 3;
-  }
-
-  /* Define the faces */
-
-  /* Bottom */
-  {
-    PLINE *ct = contour;
-    int icont;
-    int start_i;
-
-    start_i = 0;
-    for (icont = 0; icont < ncontours; icont++, start_i += get_contour_npoints (ct), ct = ct->next) {
-
-      fprintf (f, "#%i = EDGE_LOOP ( 'NONE', ( ",
-               global.next_identifier);
-      for (i = start_i + get_contour_npoints (ct) - 1; i > start_i; i--)
-        fprintf (f, "#%i, ", bottom_edge_identifier[i] + FWD);
-      fprintf (f, "#%i ) ) ; "
-                  "#%i = FACE_%sBOUND ( 'NONE', #%i, .T. ) ; \n",
-               bottom_edge_identifier[start_i] + FWD,
-               global.next_identifier + 1, icont > 0 ? "" : "OUTER_", global.next_identifier);
-      bottom_face_bound_identifier[icont] = global.next_identifier + 1;
-      global.next_identifier = global.next_identifier + 2;
-    }
-
-    fprintf (f, "#%i = ADVANCED_FACE ( 'Bottom', ( ",
-             global.next_identifier);
-    for (icont = 0; icont < ncontours - 1; icont++)
-      fprintf (f, "#%i, ",
-               bottom_face_bound_identifier[icont]);
-    fprintf (f, "#%i ), #%i, .F. ) ;\n",
-             bottom_face_bound_identifier[ncontours - 1], bottom_plane_identifier);
-    bottom_face_identifier = global.next_identifier;
-    global.next_identifier = global.next_identifier + 1;
-  }
-
-  /* Top */
-  {
-    PLINE *ct = contour;
-    int icont;
-    int start_i;
-
-    start_i = 0;
-    for (icont = 0; icont < ncontours; icont++, start_i += get_contour_npoints (ct), ct = ct->next) {
-      fprintf (f, "#%i = EDGE_LOOP ( 'NONE', ( ",
-               global.next_identifier);
-      for (i = start_i; i < start_i + get_contour_npoints (ct) - 1; i++)
-        fprintf (f, "#%i, ", top_edge_identifier[i] + REV);
-      fprintf (f, "#%i ) ) ; "
-                  "#%i = FACE_%sBOUND ( 'NONE', #%i, .T. ) ; \n",
-               top_edge_identifier[start_i + get_contour_npoints (ct) - 1] + REV,
-               global.next_identifier + 1, icont > 0 ? "" : "OUTER_", global.next_identifier);
-      top_face_bound_identifier[icont] = global.next_identifier + 1;
-      global.next_identifier = global.next_identifier + 2;
-    }
-
-    fprintf (f, "#%i = ADVANCED_FACE ( 'Top', ( ",
-             global.next_identifier);
-    for (icont = 0; icont < ncontours - 1; icont++)
-      fprintf (f, "#%i, ",
-               top_face_bound_identifier[icont]);
-    fprintf (f, "#%i ), #%i, .F. ) ;\n",
-             top_face_bound_identifier[ncontours - 1], top_plane_identifier);
-    top_face_identifier = global.next_identifier;
-    global.next_identifier = global.next_identifier + 1;
-  }
-
-  /* Sides */
-  for (i = 0; i < npoints; i++) {
-
-    /* Walk through the contours until we find the right one to look at */
-    PLINE *ct = contour;
-    int adjusted_i = i;
-    int i_start = 0;
-
-    while (adjusted_i >= get_contour_npoints (ct)) {
-      adjusted_i -= get_contour_npoints (ct);
-      i_start += get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-    face_name = (ct->name != NULL) ? ct->name : "";
-
-    fprintf (f, "#%i = EDGE_LOOP ( 'NONE', ( #%i, #%i, #%i, #%i ) ) ; "
-                "#%i = FACE_OUTER_BOUND ( 'NONE', #%i, .T. ) ; "
-                "#%i = ADVANCED_FACE ( '%s', ( #%i ), #%i, .F. ) ;\n",
-             global.next_identifier, side_edge_identifier[i_start + (adjusted_i + 1) % get_contour_npoints (ct)] + REV, top_edge_identifier[i] + FWD, side_edge_identifier[i] + FWD, bottom_edge_identifier[i] + REV,
-             global.next_identifier + 1, global.next_identifier,
-             global.next_identifier + 2, face_name, global.next_identifier + 1, side_plane_identifier[i]);
-    side_face_identifier[i] = global.next_identifier + 2;
-    global.next_identifier = global.next_identifier + 3;
-  }
-
-  /* Closed shell which bounds the brep solid */
-  pcb_shell_identifier = global.next_identifier;
-  global.next_identifier++;
-  fprintf (f, "#%i = CLOSED_SHELL ( 'NONE', ( #%i, #%i, ", pcb_shell_identifier, bottom_face_identifier, top_face_identifier);
-  for (i = 0; i < npoints - 1; i++) {
-    fprintf (f, "#%i, ", side_face_identifier[i]);
-  }
-  fprintf (f, "#%i) ) ;\n",
-           side_face_identifier[npoints - 1]);
-
-  /* Finally emit the brep solid definition */
-  fprintf (f, "#%i = MANIFOLD_SOLID_BREP ( 'PCB outline', #%i ) ;\n", brep_identifier, pcb_shell_identifier);
-
-  g_free (side_plane_identifier);
-  g_free (bottom_infinite_line_identifier);
-  g_free (top_infinite_line_identifier);
-  g_free (side_infinite_line_identifier);
-  g_free (bottom_vertex_identifier);
-  g_free (top_vertex_identifier);
-  g_free (bottom_edge_identifier);
-  g_free (top_edge_identifier);
-  g_free (side_edge_identifier);
-  g_free (side_face_identifier);
-  g_free (bottom_face_bound_identifier);
-  g_free (top_face_bound_identifier);
-}
-#undef FWD
-#undef REV
-
-static void
-step_end_file (FILE *f)
-{
-  fprintf (f, "ENDSEC;\n" );
-  fprintf (f, "END-ISO-10303-21;\n" );
-}
-
-static void
-step_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
-{
-  int i;
-  static int saved_layer_stack[MAX_LAYER];
-  FlagType save_thindraw;
-  POLYAREA *outline;
-
-  save_thindraw = PCB->Flags;
-  CLEAR_FLAG(THINDRAWFLAG, PCB);
-  CLEAR_FLAG(THINDRAWPOLYFLAG, PCB);
-  CLEAR_FLAG(CHECKPLANESFLAG, PCB);
-
-  global.f = the_file;
-
-  step_start_file (global.f, global.filename);
-
-  outline = board_outline_poly (true);
-  step_emit_board_contour (global.f, outline->contours);
-  poly_Free (&outline);
-
-  memset (global.print_group, 0, sizeof (global.print_group));
-  memset (global.print_layer, 0, sizeof (global.print_layer));
-
-  global.outline_layer = NULL;
-
-  for (i = 0; i < max_copper_layer; i++)
-    {
-      LayerType *layer = PCB->Data->Layer + i;
-      if (layer->LineN || layer->TextN || layer->ArcN || layer->PolygonN)
-        global.print_group[GetLayerGroupNumberByNumber (i)] = 1;
-
-      if (strcmp (layer->Name, "outline") == 0 ||
-          strcmp (layer->Name, "route") == 0)
-        {
-          global.outline_layer = layer;
-        }
-    }
-  global.print_group[GetLayerGroupNumberByNumber (bottom_silk_layer)] = 1;
-  global.print_group[GetLayerGroupNumberByNumber (top_silk_layer)] = 1;
-  for (i = 0; i < max_copper_layer; i++)
-    if (global.print_group[GetLayerGroupNumberByNumber (i)])
-      global.print_layer[i] = 1;
-
-  memcpy (saved_layer_stack, LayerStack, sizeof (LayerStack));
-  qsort (LayerStack, max_copper_layer, sizeof (LayerStack[0]), layer_sort);
-
-  /* reset static vars */
-  step_set_layer (NULL, 0, -1);
-  use_gc (NULL);
-
-//  hid_expose_callback (&step_hid, NULL, 0);
-
-  step_set_layer (NULL, 0, -1);  /* reset static vars */
-//  hid_expose_callback (&step_hid, NULL, 0);
-
-  memcpy (LayerStack, saved_layer_stack, sizeof (LayerStack));
-  PCB->Flags = save_thindraw;
-}
-
 /* NB: Result is in mm */
 static void
 parse_cartesian_point_3d_string (const char *str, double *x, double *y, double *z)
@@ -809,36 +132,26 @@ parse_numeric_attribute (ElementType *element, char *attr_name, double *res)
 static void
 step_do_export (HID_Attr_Val * options)
 {
-  FILE *fh;
-  int save_ons[MAX_LAYER + 2];
   int i;
+  const char *filename;
   const char *temp_pcb_filename = "_pcb.step";
+  GList *board_outline_list;
 
   if (!options)
     {
       step_get_export_options (0);
       for (i = 0; i < NUM_OPTIONS; i++)
-        global.step_values[i] = step_attribute_list[i].default_val;
-      options = global.step_values;
-    }
-
-  global.filename = options[HA_stepfile].str_value;
-  if (!global.filename)
-    global.filename = "pcb-out.step";
-
-  fh = fopen (temp_pcb_filename, "w");
-  if (fh == NULL)
-    {
-      perror (temp_pcb_filename);
-      return;
+        step_option_values[i] = step_attribute_list[i].default_val;
+      options = step_option_values;
     }
 
-  hid_save_and_show_layer_ons (save_ons);
-  step_hid_export_to_file (fh, options);
-  hid_restore_layer_ons (save_ons);
+  filename = options[HA_stepfile].str_value;
+  if (filename == NULL)
+    filename = "pcb-out.step";
 
-  step_end_file (fh);
-  fclose (fh);
+  board_outline_list = object3d_from_board_outline ();
+  object3d_list_export_to_step_assy (board_outline_list, temp_pcb_filename);
+  g_list_free_full (board_outline_list, (GDestroyNotify)destroy_object3d);
 
   {
     GList *models = NULL;
@@ -1008,34 +321,7 @@ step_do_export (HID_Attr_Val * options)
       }
     END_LOOP;
 
-#if 0
-    model = g_new0 (struct assembly_model, 1);
-    model->filename = "SOP65P780X200-22N_JEDEC_MO-150AF.step";
-    models = g_list_append (models, model);
-
-    instance = g_new0 (struct assembly_model_instance, 1);
-    instance->name = "DUMMY COMPONENT - 1";
-    instance->ox = 33.0,  instance->oy = 99.0,  instance->oz = -0.8; /* Locate origin (Z corresponds to bottom of board) */
-    instance->ax =  0.0,  instance->ay =  0.0,  instance->az = -1.0; /* Flip component Z-axis to orient on bottom of board */
-    instance->rx =  1.0,  instance->ry =  0.0,  instance->rz =  0.0; /* X-axis to corresponds to our X-axis */
-    model->instances = g_list_append (model->instances, instance);
-
-    instance = g_new0 (struct assembly_model_instance, 1);
-    instance->name = "DUMMY COMPONENT - 2";
-    instance->ox = 46.0,  instance->oy = 99.0,  instance->oz = -0.8; /* Locate origin (Z corresponds to bottom of board) */
-    instance->ax =  0.0,  instance->ay =  0.0,  instance->az = -1.0; /* Flip component Z-axis to orient on back of board */
-    instance->rx =  1.0,  instance->ry =  0.0,  instance->rz =  0.0; /* X-axis to corresponds to our X-axis */
-    model->instances = g_list_append (model->instances, instance);
-
-    instance = g_new0 (struct assembly_model_instance, 1);
-    instance->name = "DUMMY COMPONENT - 3";
-    instance->ox = 75.0,  instance->oy = 21.0,  instance->oz =  0.8; /* Locate origin (Z corresponds to top of board) */
-    instance->ax =  0.0,  instance->ay =  0.0,  instance->az =  1.0; /* Flip component Z-axis to orient on top of board */
-    instance->rx =  1.0,  instance->ry =  0.0,  instance->rz =  0.0; /* X-axis to corresponds to our X-axis */
-    model->instances = g_list_append (model->instances, instance);
-#endif
-
-    export_step_assembly (global.filename, models);
+    export_step_assembly (filename, models);
 
     /* XXX: LEAK ALL THE MODEL DATA.. BEING LAZY RIGHT NOW */
   }
@@ -1048,208 +334,6 @@ step_parse_arguments (int *argc, char ***argv)
   hid_parse_command_line (argc, argv);
 }
 
-static int
-step_set_layer (const char *name, int group, int empty)
-{
-  static int lastgroup = -1;
-  int idx = (group >= 0 && group < max_group)
-            ? PCB->LayerGroups.Entries[group][0]
-            : group;
-  if (name == 0)
-    name = PCB->Data->Layer[idx].Name;
-
-  if (empty == -1)
-    lastgroup = -1;
-  if (empty)
-    return 0;
-
-  if (idx >= 0 && idx < max_copper_layer && !global.print_layer[idx])
-    return 0;
-
-  if (strcmp (name, "invisible") == 0)
-    return 0;
-
-  global.is_drill = (SL_TYPE (idx) == SL_PDRILL || SL_TYPE (idx) == SL_UDRILL);
-  global.is_mask  = (SL_TYPE (idx) == SL_MASK);
-  global.is_assy  = (SL_TYPE (idx) == SL_ASSY);
-  global.is_copper = (SL_TYPE (idx) == 0);
-  global.is_paste  = (SL_TYPE (idx) == SL_PASTE);
-
-  if (group < 0 || group != lastgroup)
-    {
-      lastgroup = group;
-
-      use_gc (NULL);  /* reset static vars */
-    }
-
-  return 1;
-}
-
-static hidGC
-step_make_gc (void)
-{
-  hidGC gc = (hidGC) calloc (1, sizeof (struct step_gc_struct));
-  stepGC step_gc = (stepGC)gc;
-
-  gc->hid = &step_hid;
-  gc->hid_draw = &step_graphics;
-
-  step_gc->cap = Trace_Cap;
-
-  return gc;
-}
-
-static void
-step_destroy_gc (hidGC gc)
-{
-  free (gc);
-}
-
-static void
-step_use_mask (enum mask_mode mode)
-{
-  /* does nothing */
-}
-
-static void
-step_set_color (hidGC gc, const char *name)
-{
-  stepGC step_gc = (stepGC)gc;
-
-  if (strcmp (name, "erase") == 0 || strcmp (name, "drill") == 0)
-    {
-      step_gc->r = step_gc->g = step_gc->b = 255;
-      step_gc->erase = 1;
-    }
-  else
-    {
-      int r, g, b;
-      sscanf (name + 1, "%02x%02x%02x", &r, &g, &b);
-      step_gc->r = r;
-      step_gc->g = g;
-      step_gc->b = b;
-      step_gc->erase = 0;
-    }
-}
-
-static void
-step_set_line_cap (hidGC gc, EndCapStyle style)
-{
-  stepGC step_gc = (stepGC)gc;
-
-  step_gc->cap = style;
-}
-
-static void
-step_set_line_width (hidGC gc, Coord width)
-{
-  stepGC step_gc = (stepGC)gc;
-
-  step_gc->width = width;
-}
-
-static void
-step_set_draw_xor (hidGC gc, int xor_)
-{
-}
-
-static void
-step_set_draw_faded (hidGC gc, int faded)
-{
-}
-
-static void
-use_gc (hidGC gc)
-{
-  stepGC step_gc = (stepGC)gc;
-
-  static int lastcap = -1;
-  static int lastcolor = -1;
-
-  if (gc == NULL)
-    {
-      lastcap = lastcolor = -1;
-      return;
-    }
-  if (gc->hid != &step_hid)
-    {
-      fprintf (stderr, "Fatal: GC from another HID passed to step HID\n");
-      abort ();
-    }
-  if (lastcap != step_gc->cap)
-    {
-      fprintf (global.f, "%%d setlinecap %%d setlinejoin\n");
-      lastcap = step_gc->cap;
-    }
-#define CBLEND(gc) (((step_gc->r)<<24)|((step_gc->g)<<16)|((step_gc->b)<<8))
-  if (lastcolor != CBLEND (gc))
-    {
-      double r, g, b;
-      r = step_gc->r;
-      g = step_gc->g;
-      b = step_gc->b;
-      if (step_gc->r == step_gc->g && step_gc->g == step_gc->b)
-        fprintf (global.f, "%g gray\n", r / 255.0);
-      else
-        fprintf (global.f, "%g %g %g rgb\n", r / 255.0, g / 255.0, b / 255.0);
-      lastcolor = CBLEND (gc);
-    }
-}
-
-static void
-step_draw_rect (hidGC gc, Coord x1, Coord y1, Coord x2, Coord y2)
-{
-}
-
-static void
-step_draw_line (hidGC gc, Coord x1, Coord y1, Coord x2, Coord y2)
-{
-}
-
-static void
-step_draw_arc (hidGC gc, Coord cx, Coord cy, Coord width, Coord height,
-               Angle start_angle, Angle delta_angle)
-{
-}
-
-static void
-step_fill_circle (hidGC gc, Coord cx, Coord cy, Coord radius)
-{
-}
-
-static void
-step_fill_polygon (hidGC gc, int n_coords, Coord *x, Coord *y)
-{
-}
-
-static void
-fill_polyarea (hidGC gc, POLYAREA * pa, const BoxType * clip_box)
-{
-}
-
-static void
-step_draw_pcb_polygon (hidGC gc, PolygonType * poly, const BoxType * clip_box)
-{
-  fill_polyarea (gc, poly->Clipped, clip_box);
-  if (TEST_FLAG (FULLPOLYFLAG, poly))
-    {
-      POLYAREA *pa;
-
-      for (pa = poly->Clipped->f; pa != poly->Clipped; pa = pa->f)
-        fill_polyarea (gc, pa, clip_box);
-    }
-}
-
-static void
-step_fill_rect (hidGC gc, Coord x1, Coord y1, Coord x2, Coord y2)
-{
-}
-
-static void
-step_set_crosshair (int x, int y, int action)
-{
-}
-
 #include "dolists.h"
 
 void step_step_init (HID *hid)
@@ -1257,40 +341,12 @@ void step_step_init (HID *hid)
   hid->get_export_options = step_get_export_options;
   hid->do_export          = step_do_export;
   hid->parse_arguments    = step_parse_arguments;
-  hid->set_crosshair      = step_set_crosshair;
-}
-
-void step_step_graphics_class_init (HID_DRAW_CLASS *klass)
-{
-  klass->set_layer          = step_set_layer;
-  klass->make_gc            = step_make_gc;
-  klass->destroy_gc         = step_destroy_gc;
-  klass->use_mask           = step_use_mask;
-  klass->set_color          = step_set_color;
-  klass->set_line_cap       = step_set_line_cap;
-  klass->set_line_width     = step_set_line_width;
-  klass->set_draw_xor       = step_set_draw_xor;
-  klass->set_draw_faded     = step_set_draw_faded;
-  klass->draw_line          = step_draw_line;
-  klass->draw_arc           = step_draw_arc;
-  klass->draw_rect          = step_draw_rect;
-  klass->fill_circle        = step_fill_circle;
-  klass->fill_polygon       = step_fill_polygon;
-  klass->fill_rect          = step_fill_rect;
-
-  klass->draw_pcb_polygon   = step_draw_pcb_polygon;
-}
-
-void step_step_graphics_init (HID_DRAW *hid_draw)
-{
-  hid_draw->poly_before = true;
 }
 
 void
 hid_step_init ()
 {
   memset (&step_hid, 0, sizeof (HID));
-  memset (&step_graphics, 0, sizeof (HID_DRAW));
 
   common_nogui_init (&step_hid);
   step_step_init (&step_hid);
@@ -1300,12 +356,6 @@ hid_step_init ()
   step_hid.description        = "STEP AP214 export";
   step_hid.exporter           = 1;
 
-  common_draw_helpers_class_init (&step_graphics_class);
-  step_step_graphics_class_init (&step_graphics_class);
-
-  common_nogui_graphics_init (&step_graphics);
-  common_draw_helpers_init (&step_graphics);
-
   hid_register_hid (&step_hid);
 
 #include "step_lists.h"
