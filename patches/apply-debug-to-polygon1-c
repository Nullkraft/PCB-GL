Bottom: be76093ef863fdeaa63bd47893f07a9964b69e8f
Top:    3ea18c32e5adfc4f77c4c1a2096299fddc87c852
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-05 17:45:15 +0000

Apply debug to polygon1.c


---

diff --git a/src/polygon1.c b/src/polygon1.c
index 8041c05..f0311dc 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -241,10 +241,14 @@ node_add_single (VNODE * dest, Vector po)
   VNODE *p;
 
 /* XXX: MAY NOT BE CORRECT IF WE NEED TO SEPARATE STRAIGHT AND CURVED SEGMENTS */
-  if (vect_equal (po, EDGE_BACKWARD_VERTEX (dest)->point))
+  if (vect_equal (po, EDGE_BACKWARD_VERTEX (dest)->point)) {
+    pcb_fprintf (stderr, "node_add_single() returning EDGE_BACKWARD_VERTEX (dest);\n");
     return EDGE_BACKWARD_VERTEX (dest);
-  if (vect_equal (po, EDGE_FORWARD_VERTEX (dest)->point))
+  }
+  if (vect_equal (po, EDGE_FORWARD_VERTEX (dest)->point)) {
+    pcb_fprintf (stderr, "node_add_single() returning EDGE_FORWARD_VERTEX (dest);\n");
     return EDGE_FORWARD_VERTEX (dest);
+  }
   p = poly_CreateNode (po);
   if (p == NULL)
     return NULL;
@@ -291,6 +295,7 @@ new_descriptor (VNODE * a, char poly, char side)
 	  if (PREV_VERTEX (a)->cvc_prev == (CVCList *) - 1)
 	    PREV_VERTEX (a)->cvc_prev = PREV_VERTEX (a)->cvc_next = NULL;
 	  poly_ExclVertex (PREV_VERTEX (a));
+          fprintf (stderr, "REMOVING VERTEX 111111111111111111111111111111111111111111111111111111\n");
 	  vect_sub (v, PREV_VERTEX (a)->point, a->point);
 #warning DOES THIS LEAK A VERTEX?
 	}
@@ -299,6 +304,7 @@ new_descriptor (VNODE * a, char poly, char side)
 	  if (NEXT_VERTEX (a)->cvc_prev == (CVCList *) - 1)
 	    NEXT_VERTEX (a)->cvc_prev = NEXT_VERTEX (a)->cvc_next = NULL;
 	  poly_ExclVertex (NEXT_VERTEX (a));
+          fprintf (stderr, "REMOVING VERTEX 222222222222222222222222222222222222222222222222222222\n");
 	  vect_sub (v, NEXT_VERTEX (a)->point, a->point);
 #warning DOES THIS LEAK A VERTEX?
 	}
@@ -607,6 +613,34 @@ edge_label (VNODE * pn, int existing_label)
 
   if (shared_edge_case)
     {
+      pcb_fprintf (stderr, "edge_label called on edge (%mm, %mm)-(%mm, %mm)\n",
+                   EDGE_BACKWARD_VERTEX (pn)->point[0],
+                   EDGE_BACKWARD_VERTEX (pn)->point[1],
+                   EDGE_FORWARD_VERTEX (pn)->point[0],
+                   EDGE_FORWARD_VERTEX (pn)->point[1]);
+      pcb_fprintf (stderr, "EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (l->parent))->point = (%mm, %mm)\n",
+                   EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (l->parent))->point[0],
+                   EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (l->parent))->point[1]);
+      pcb_fprintf (stderr, "EDGE_FORWARD_VERTEX (pn))->point = (%mm, %mm)\n",
+                   EDGE_FORWARD_VERTEX (pn)->point[0],
+                   EDGE_FORWARD_VERTEX (pn)->point[1]);
+      {
+        CVCList *iter = EDGE_BACKWARD_VERTEX (pn)->cvc_next;
+        pcb_fprintf (stderr, "Inspecting cross-vertex starting with the edge backwards_vertex at (%mm, %mm)\n",
+                     EDGE_BACKWARD_VERTEX (pn)->point[0],
+                     EDGE_BACKWARD_VERTEX (pn)->point[1]);
+        do {
+          pcb_fprintf (stderr, "angle = %f, poly = %c, side = %c, (%mm, %mm)-(%mm, %mm)\n",
+                       iter->angle,
+                       iter->poly,
+                       iter->side,
+                       EDGE_BACKWARD_VERTEX (VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side))->point[0],
+                       EDGE_BACKWARD_VERTEX (VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side))->point[1],
+                       EDGE_FORWARD_VERTEX (VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side))->point[0],
+                       EDGE_FORWARD_VERTEX (VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side))->point[1]);
+        } while ((iter = iter->next) != pn->cvc_next);
+      }
+
       /* If this fires, we found two geometrically distinct edges which for some reason compare as equal in our cvc_list.
        * Shared edges should be geometrically identical (but may be in opposite directions).
        */
@@ -2964,6 +2998,11 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
 
   *res = NULL;
 
+  fprintf (stderr, "# A POLYGON\n");
+  if (a == NULL) printf ("NULL\n"); else poly_dump (a);
+  fprintf (stderr, "# B POLYGON\n");
+  if (b == NULL) printf ("NULL\n"); else poly_dump (b);
+
 #if 0
   /* Make copies for tracking polygon parentage (DEBUG) */
   if (!poly_M_Copy0 (&a_copy, a) || !poly_M_Copy0 (&b_copy, b))
@@ -3312,6 +3351,7 @@ poly_PreContour (PLINE * C, BOOLp optimize)
 	  if (vect_det2 (p1, p2) == 0)
 	    {
 	      poly_ExclVertex (c);
+              fprintf (stderr, "REMOVING VERTEX 333333333333333333333333333333333333333333333333333333\n");
 	      g_slice_free (VNODE, c);
 	      c = p;
 	    }
@@ -4243,6 +4283,7 @@ vect_inters2 (Vector p1, Vector p2, Vector q1, Vector q2,
 	      Vcpy2 (S2, hq2);
 	    };
 	}
+      fprintf (stderr, "Intersection returning %i\n", Vequ2 (S1, S2) ? 1 : 2);
       return (Vequ2 (S1, S2) ? 1 : 2);
     }
   else
@@ -4290,6 +4331,7 @@ vect_inters2 (Vector p1, Vector p2, Vector q1, Vector q2,
 	  S1[0] = q1[0] + ROUND (t * rqx);
 	  S1[1] = q1[1] + ROUND (t * rqy);
 	}
+      fprintf (stderr, "Intersection returning 1\n");
       return 1;
     }
 }				/* vect_inters2 */
