Bottom: 561dc64de72e67522024004c197dfc2fe7d2e5e1
Top:    c8e1ac681cd0aa01ca8ead162d576d402f6b6b38
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-13 19:01:08 +0000

Apply debug to polygon1.c


---

diff --git a/src/polygon1.c b/src/polygon1.c
index 634f73e..eb1c105 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -39,6 +39,7 @@
       are marked
 */
 
+#undef NDEBUG
 #include	<assert.h>
 #include	<stdlib.h>
 #include	<stdio.h>
@@ -49,6 +50,7 @@
 #include "global.h"
 #include "rtree.h"
 #include "heap.h"
+#include "pcb-printf.h"
 
 #define ROUND(a) (long)((a) > 0 ? ((a) + 0.5) : ((a) - 0.5))
 
@@ -108,12 +110,13 @@ int vect_inters2 (Vector A, Vector B, Vector C, Vector D, Vector S1,
   if (UNLIKELY (((ptr) = (type *)malloc(sizeof(type))) == NULL))	\
     error(err_no_memory);
 
-#undef DEBUG_LABEL
-#undef DEBUG_ALL_LABELS
-#undef DEBUG_JUMP
-#undef DEBUG_GATHER
-#undef DEBUG_ANGLE
-#undef DEBUG
+#define DEBUG_INTERSECT
+#define DEBUG_LABEL
+#define DEBUG_ALL_LABELS
+#define DEBUG_JUMP
+#define DEBUG_GATHER
+#define DEBUG_ANGLE
+#define DEBUG
 #ifdef DEBUG
 #define DEBUGP(...) pcb_fprintf(stderr, ## __VA_ARGS__)
 #else
@@ -147,7 +150,7 @@ pline_dump (VNODE * v)
   do
     {
       n = NEXT_VERTEX(v);
-      pcb_fprintf (stderr, "Line [%#mS %#mS %#mS %#mS 10 10 \"%s\"]\n",
+      pcb_fprintf (stderr, "Line [%$mm %$mm %$mm %$mm 10 10 \"%s\"]\n",
 	       v->point[0], v->point[1],
 	       n->point[0], n->point[1], theState (v));
     }
@@ -195,10 +198,14 @@ node_add_single (VNODE * dest, Vector po)
 {
   VNODE *p;
 
-  if (vect_equal (po, EDGE_BACKWARD_VERTEX (dest)->point))
+  if (vect_equal (po, EDGE_BACKWARD_VERTEX (dest)->point)) {
+    pcb_fprintf (stderr, "node_add_single() returning EDGE_BACKWARD_VERTEX (dest);\n");
     return EDGE_BACKWARD_VERTEX (dest);
-  if (vect_equal (po, EDGE_FORWARD_VERTEX (dest)->point))
+  }
+  if (vect_equal (po, EDGE_FORWARD_VERTEX (dest)->point)) {
+    pcb_fprintf (stderr, "node_add_single() returning EDGE_FORWARD_VERTEX (dest);\n");
     return EDGE_FORWARD_VERTEX (dest);
+  }
   p = poly_CreateNode (po);
   if (p == NULL)
     return NULL;
@@ -244,6 +251,7 @@ new_descriptor (VNODE * a, char poly, char side)
 	  if (PREV_VERTEX (a)->cvc_prev == (CVCList *) - 1)
 	    PREV_VERTEX (a)->cvc_prev = PREV_VERTEX (a)->cvc_next = NULL;
 	  poly_ExclVertex (PREV_VERTEX (a));
+          fprintf (stderr, "REMOVING VERTEX 111111111111111111111111111111111111111111111111111111\n");
 	  vect_sub (v, PREV_VERTEX (a)->point, a->point);
 	}
       else
@@ -251,6 +259,7 @@ new_descriptor (VNODE * a, char poly, char side)
 	  if (NEXT_VERTEX (a)->cvc_prev == (CVCList *) - 1)
 	    NEXT_VERTEX (a)->cvc_prev = NEXT_VERTEX (a)->cvc_next = NULL;
 	  poly_ExclVertex (NEXT_VERTEX (a));
+          fprintf (stderr, "REMOVING VERTEX 222222222222222222222222222222222222222222222222222222\n");
 	  vect_sub (v, NEXT_VERTEX (a)->point, a->point);
 	}
     }
@@ -446,6 +455,38 @@ edge_label (VNODE * pn)
 	{
 	  if (l->angle == pn->cvc_next->angle)
 	    {
+	      if (!(EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (l->parent))->point[0] == EDGE_FORWARD_VERTEX (pn)->point[0] &&
+	            EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (l->parent))->point[1] == EDGE_FORWARD_VERTEX (pn)->point[1]))
+                {
+                  pcb_fprintf (stderr, "edge_label called on edge (%mm, %mm)-(%mm, %mm)\n",
+                               EDGE_BACKWARD_VERTEX (pn)->point[0],
+                               EDGE_BACKWARD_VERTEX (pn)->point[1],
+                               EDGE_FORWARD_VERTEX (pn)->point[0],
+                               EDGE_FORWARD_VERTEX (pn)->point[1]);
+                  pcb_fprintf (stderr, "EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (l->parent))->point = (%mm, %mm)\n",
+                               EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (l->parent))->point[0],
+                               EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (l->parent))->point[1]);
+                  pcb_fprintf (stderr, "EDGE_FORWARD_VERTEX (pn))->point = (%mm, %mm)\n",
+                               EDGE_FORWARD_VERTEX (pn)->point[0],
+                               EDGE_FORWARD_VERTEX (pn)->point[1]);
+                  {
+                    CVCList *iter = EDGE_BACKWARD_VERTEX (pn)->cvc_next;
+                    pcb_fprintf (stderr, "Inspecting cross-vertex starting with the edge backwards_vertex at (%mm, %mm)\n",
+                                 EDGE_BACKWARD_VERTEX (pn)->point[0],
+                                 EDGE_BACKWARD_VERTEX (pn)->point[1]);
+                    do {
+                      pcb_fprintf (stderr, "angle = %f, poly = %c, side = %c, (%mm, %mm)-(%mm, %mm)\n",
+                                   iter->angle,
+                                   iter->poly,
+                                   iter->side,
+                                   ((iter->side == 'P') ? EDGE_BACKWARD_VERTEX (VERTEX_BACKWARD_EDGE (iter->parent)) : EDGE_BACKWARD_VERTEX (VERTEX_FORWARD_EDGE (iter->parent)))->point[0],
+                                   ((iter->side == 'P') ? EDGE_BACKWARD_VERTEX (VERTEX_BACKWARD_EDGE (iter->parent)) : EDGE_BACKWARD_VERTEX (VERTEX_FORWARD_EDGE (iter->parent)))->point[1],
+                                   ((iter->side == 'P') ? EDGE_FORWARD_VERTEX (VERTEX_BACKWARD_EDGE (iter->parent)) : EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (iter->parent)))->point[0],
+                                   ((iter->side == 'P') ? EDGE_FORWARD_VERTEX (VERTEX_BACKWARD_EDGE (iter->parent)) : EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (iter->parent)))->point[1]);
+                    } while ((iter = iter->next) != pn->cvc_next);
+                  }
+                }
+              /* Assertion fails here for the broken STEP export test case */
 	      assert (EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (l->parent))->point[0] == EDGE_FORWARD_VERTEX (pn)->point[0] &&
 	              EDGE_FORWARD_VERTEX (VERTEX_FORWARD_EDGE (l->parent))->point[1] == EDGE_FORWARD_VERTEX (pn)->point[1]);
 	      region = SHARED;
@@ -665,7 +706,7 @@ seg_in_seg (const BoxType * b, void *cl)
       if (new_node != NULL)
 	{
 #ifdef DEBUG_INTERSECT
-	  DEBUGP ("new intersection on segment \"i\" at %#mD\n",
+	  DEBUGP ("new intersection on segment \"i\" at (%mm, %mm)\n",
 	          cnt > 1 ? s2[0] : s1[0], cnt > 1 ? s2[1] : s1[1]);
 #endif
 	  i->node_insert_list =
@@ -677,7 +718,7 @@ seg_in_seg (const BoxType * b, void *cl)
       if (new_node != NULL)
 	{
 #ifdef DEBUG_INTERSECT
-	  DEBUGP ("new intersection on segment \"s\" at %#mD\n",
+	  DEBUGP ("new intersection on segment \"s\" at (%mm, %mm)\n",
 	          cnt > 1 ? s2[0] : s1[0], cnt > 1 ? s2[1] : s1[1]);
 #endif
 	  i->node_insert_list =
@@ -2339,6 +2380,11 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
 
   *res = NULL;
 
+  fprintf (stderr, "# A POLYGON\n");
+  if (a == NULL) printf ("NULL\n"); else poly_dump (a);
+  fprintf (stderr, "# B POLYGON\n");
+  if (b == NULL) printf ("NULL\n"); else poly_dump (b);
+
   if (!a)
     {
       switch (action)
@@ -2648,6 +2694,7 @@ poly_PreContour (PLINE * C, BOOLp optimize)
 	  if (vect_det2 (p1, p2) == 0)
 	    {
 	      poly_ExclVertex (c);
+              fprintf (stderr, "REMOVING VERTEX 333333333333333333333333333333333333333333333333333333\n");
 	      free (c);
 	      c = p;
 	    }
@@ -3303,7 +3350,7 @@ poly_Valid (POLYAREA * p)
       do
 	{
 	  n = NEXT_VERTEX (v);
-	  pcb_fprintf (stderr, "Line [%#mS %#mS %#mS %#mS 100 100 \"\"]\n",
+	  pcb_fprintf (stderr, "Line [%$mm %$mm %$mm %$mm 100 100 \"\"]\n",
 		   v->point[0], v->point[1], n->point[0], n->point[1]);
 	}
       while ((v = NEXT_VERTEX (v)) != &p->contours->head);
@@ -3328,7 +3375,7 @@ poly_Valid (POLYAREA * p)
 	  do
 	    {
 	      n = NEXT_VERTEX (v);
-	      pcb_fprintf (stderr, "Line [%#mS %#mS %#mS %#mS 100 100 \"\"]\n",
+	      pcb_fprintf (stderr, "Line [%$mm %$mm %$mm %$mm 100 100 \"\"]\n",
 		       v->point[0], v->point[1], n->point[0], n->point[1]);
 	    }
 	  while ((v = NEXT_VERTEX (v)) != &c->head);
@@ -3517,6 +3564,7 @@ vect_inters2 (Vector p1, Vector p2, Vector q1, Vector q2,
 	      Vcpy2 (S2, hq2);
 	    };
 	}
+      fprintf (stderr, "Intersection returning %i\n", Vequ2 (S1, S2) ? 1 : 2);
       return (Vequ2 (S1, S2) ? 1 : 2);
     }
   else
@@ -3564,6 +3612,7 @@ vect_inters2 (Vector p1, Vector p2, Vector q1, Vector q2,
 	  S1[0] = q1[0] + ROUND (t * rqx);
 	  S1[1] = q1[1] + ROUND (t * rqy);
 	}
+      fprintf (stderr, "Intersection returning 1\n");
       return 1;
     }
 }				/* vect_inters2 */
