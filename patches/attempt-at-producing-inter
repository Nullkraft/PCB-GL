Bottom: d3e9f6d00e0b9c7babacc2dac592a75b347eb0bd
Top:    9252b2045482f638e7c749dbc4b5060df7507d4e
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 20:31:10 +0000

Attempt at producing inter-layer copper with via barrels etc..!

INCLUDES:

Try prepending the stolen when concatenating geometry..

The destination objects will likely keep getting larger, so it should avoid
needing to traverse the entire list length to append data.

Possibly a circularly linked list might be more efficient here, but GLib
doesn't have a convenient implementation.


---

diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index e82a9e7..8a14671 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -65,6 +65,7 @@
 
 #define HACK_BOARD_THICKNESS MM_TO_COORD(1.6)
 #define HACK_COPPER_THICKNESS MM_TO_COORD(0.035)
+#define HACK_PLATED_BARREL_THICKNESS MM_TO_COORD(0.08)
 #define HACK_MASK_THICKNESS MM_TO_COORD(0.01)
 #define HACK_SILK_THICKNESS MM_TO_COORD(0.01)
 
@@ -323,8 +324,19 @@ get_contour_edge_n_round_geometry_in_step_mm (PLINE *contour, int n, double *cx,
   *cw = (compare_ccw_cw (EDGE_BACKWARD_VERTEX (edge)->point, center, EDGE_FORWARD_VERTEX (edge)->point) > 0);
 }
 
+typedef struct
+{
+  object3d *object;
+  face3d *top_face;
+  face3d *bottom_face;
+} polygon_3d_link;
+
+/* NOTE: This function sets the user_data pointer on POLYAREA it
+ *       converts, to point at a polygon_3d_link structure
+ *       referencing the generated object and upper/lower faces
+ */
 GList *
-object3d_from_contours (const POLYAREA *contours,
+object3d_from_contours (POLYAREA *contours,
                         double zbot,
                         double ztop,
                         const appearance *master_object_appearance,
@@ -335,7 +347,7 @@ object3d_from_contours (const POLYAREA *contours,
   object3d *object;
   appearance *object_appearance = NULL;
   appearance *top_bot_appearance = NULL;
-  const POLYAREA *pa;
+  POLYAREA *pa;
   PLINE *contour;
   PLINE *ct;
   int ncontours;
@@ -347,6 +359,7 @@ object3d_from_contours (const POLYAREA *contours,
   int start_of_ct;
   int offset_in_ct;
   int ct_npoints;
+  polygon_3d_link *link;
   bool invert_face_normals;
   double length;
   double nx, ny;
@@ -767,6 +780,12 @@ object3d_from_contours (const POLYAREA *contours,
 
       objects = g_list_append (objects, object);
 
+      link = malloc (sizeof (polygon_3d_link));
+      pa->user_data = link;
+      link->object = object;
+      link->bottom_face = faces[npoints];
+      link->top_face = faces[npoints + 1];
+
     }
   while (pa = pa->f, pa != contours);
 
@@ -1007,6 +1026,7 @@ pv_mask_callback (const BoxType * b, void *cl)
   return 1;
 }
 
+#if 1
 static int
 pv_drill_callback (const BoxType * b, void *cl)
 {
@@ -1017,7 +1037,24 @@ pv_drill_callback (const BoxType * b, void *cl)
   if (!(np = CirclePoly (pv->X, pv->Y, (pv->DrillingHole + 1) / 2, NULL)))
     return 0;
 
-  poly_Boolean_free (info->poly, np, &res, PBO_SUB);
+  poly_Boolean_free (info->poly, np, &res, PBO_UNITE);
+  info->poly = res;
+
+  return 1;
+}
+#endif
+
+static int
+pv_barrel_callback (const BoxType * b, void *cl)
+{
+  PinType *pv = (PinType *)b;
+  struct mask_info *info = cl;
+  POLYAREA *np, *res;
+
+  if (!(np = CirclePoly (pv->X, pv->Y, (pv->DrillingHole + HACK_PLATED_BARREL_THICKNESS + 1) / 2, NULL)))
+    return 0;
+
+  poly_Boolean_free (info->poly, np, &res, PBO_UNITE);
   info->poly = res;
 
   return 1;
@@ -1262,19 +1299,69 @@ pv_copper_callback (const BoxType * b, void *cl)
   return 1;
 }
 
+
+static void
+steal_object_geometry (object3d *dst, object3d *src)
+{
+  g_assert (dst != src);
+
+  /* Prepend the src chunks, as src is likely to be a lot smaller then dst once we get going */
+  dst->faces    = g_list_concat (src->faces,    dst->faces);
+  dst->edges    = g_list_concat (src->edges,    dst->edges);
+  dst->vertices = g_list_concat (src->vertices, dst->vertices);
+  src->faces = NULL;
+  src->edges = NULL;
+  src->vertices = NULL;
+}
+
+static void
+update_object_pointers (POLYAREA **group_m_poly, object3d *old_object, object3d *new_object)
+{
+  int group;
+  int top_group;
+  int bottom_group;
+  int min_copper_group;
+  int max_copper_group;
+  POLYAREA *pa;
+
+  top_group =    GetLayerGroupNumberBySide (TOP_SIDE);
+  bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
+
+  min_copper_group = MIN (bottom_group, top_group);
+  max_copper_group = MAX (bottom_group, top_group);
+
+  for (group = min_copper_group; group <= max_copper_group; group++)
+    {
+      pa = group_m_poly[group];
+      do
+        {
+          polygon_3d_link *link = pa->user_data;
+
+          if (link->object == old_object)
+            link->object = new_object;
+
+        }
+      while ((pa = pa->f) != group_m_poly[group]);
+    }
+}
+
 GList *
 object3d_from_copper_layers_within_area (POLYAREA *area)
 {
   appearance *copper_appearance;
-  GList *objects;
+  GList *group_objects;
   struct copper_info info;
   BoxType bounds;
 
   int group;
   int top_group;
   int bottom_group;
-  int min_phys_group;
-  int max_phys_group;
+  int min_copper_group;
+  int max_copper_group;
+
+  POLYAREA **group_m_polyarea;
+  POLYAREA *barrel_m_polyarea;
+  POLYAREA *drill_m_polyarea;
 
 //  poly_Copy0 (&info.poly, area);
 
@@ -1291,19 +1378,17 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
   top_group =    GetLayerGroupNumberBySide (TOP_SIDE);
   bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
 
-  min_phys_group = MIN (bottom_group, top_group);
-  max_phys_group = MAX (bottom_group, top_group);
+  min_copper_group = MIN (bottom_group, top_group);
+  max_copper_group = MAX (bottom_group, top_group);
+
+  group_m_polyarea = calloc (max_copper_group + 1, sizeof (POLYAREA *));
 
-  objects = NULL;
+  group_objects = NULL;
 
-  for (group = min_phys_group; group <= max_phys_group; group++)
+  for (group = min_copper_group; group <= max_copper_group; group++)
     {
+      Coord depth = compute_depth (group);
 
-#ifdef REVERSED_PCB_CONTOURS
-      Coord depth = compute_depth (group) - HACK_BOARD_THICKNESS;
-#else
-      Coord depth = compute_depth (group) + HACK_BOARD_THICKNESS / 2;
-#endif
       info.poly = NULL;
 
       fprintf (stderr, "Computing copper geometry for group %i\n", group);
@@ -1356,9 +1441,11 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
        *
        */
 
+#if 0
       fprintf (stderr, "Subtracting pin + via drills\n");
       r_search (PCB->Data->pin_tree, &bounds, NULL, pv_drill_callback, &info);
       r_search (PCB->Data->via_tree, &bounds, NULL, pv_drill_callback, &info);
+#endif
 
       if (info.poly == NULL)
         {
@@ -1366,18 +1453,308 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
           continue;
         }
 
-      objects = g_list_concat (objects,
+      group_objects = g_list_concat (group_objects,
         object3d_from_contours (info.poly,
 #ifdef REVERSED_PCB_CONTOURS
                                 depth,                         /* Bottom */
                                 depth + HACK_COPPER_THICKNESS, /* Top */
 #else
-                                -depth,                         /* Bottom */
-                                -depth - HACK_COPPER_THICKNESS, /* Top */
+                                -depth - HACK_BOARD_THICKNESS / 2,                         /* Bottom */
+                                -depth - HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS, /* Top */
 #endif
                                 copper_appearance,
                                 NULL,
                                 false)); /* Don't invert */
+
+      group_m_polyarea[group] = info.poly;
+    }
+
+  /* Now need to punch drill-holes through the inter-layers..
+   * Ideally, we construct a polygon of drill-holes, so any overlapping are taken into account
+   */
+  info.poly = NULL;
+
+  fprintf (stderr, "Accumulating pin + via barrel outers\n");
+  r_search (PCB->Data->pin_tree, &bounds, NULL, pv_barrel_callback, &info);
+  r_search (PCB->Data->via_tree, &bounds, NULL, pv_barrel_callback, &info);
+
+  barrel_m_polyarea = info.poly;
+
+  info.poly = NULL;
+
+  fprintf (stderr, "Accumulating pin + via barrel drills\n");
+  r_search (PCB->Data->pin_tree, &bounds, NULL, pv_drill_callback, &info);
+  r_search (PCB->Data->via_tree, &bounds, NULL, pv_drill_callback, &info);
+
+  drill_m_polyarea = info.poly;
+
+  info.poly = NULL;
+
+  // Extrude barrel?
+  // Grab top-face of barrel. Delete the face, stealing its contour.. find which top-side copper Object3D to paste in into, link it up.
+  // Grab bottom-fac of barrel. Delete the face, stealing its contour.. find which next-side copper Object3D to paste it into, link it up. (Might already be the same object as in step above.. how to find it?)
+  // Repeat for each inter-layer barrel segment
+  // Repeat for each contour in the accumulated barrel M_POLYAERA
+
+
+  for (group = min_copper_group; group < max_copper_group; group++)
+    {
+      Coord top_depth;
+      Coord bottom_depth;
+      POLYAREA *pa;
+      GList *barrel_objects;
+
+      /* HACK - LET US EMIT BLANK BOARDS.. SHOULD CHECK BEFORE WE START TO LOOP? */
+      if (barrel_m_polyarea == NULL)
+        break;
+
+      /* Extrude barrel from group to group + 1 */
+      fprintf (stderr, "Extruding barrels from layer group %i to %i\n", group, group + 1);
+
+      g_assert (group_m_polyarea[group] != NULL);
+      g_assert (group_m_polyarea[group + 1] != NULL);
+
+      /* Depth is the bottom? of the layer? */
+      top_depth = compute_depth (group);
+      bottom_depth = compute_depth (group + 1);
+
+      barrel_objects = object3d_from_contours (barrel_m_polyarea,
+#ifdef REVERSED_PCB_CONTOURS
+                                               bottom_depth + HACK_COPPER_THICKNESS, /* Bottom */
+                                               top_depth,                            /* Top */
+#else
+                                               -bottom_depth - HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS, /* Bottom */
+                                               -top_depth    - HACK_BOARD_THICKNESS / 2,                         /* Top */
+#endif
+                                               copper_appearance,
+                                               NULL,
+                                               false); /* Don't invert */
+
+/* Connect the via barrels in this block of code */
+#if 1
+      /* Loop over all barrel outline pieces */
+      pa = barrel_m_polyarea;
+      do
+        {
+          /* For each barrel, we want to find the Polyarea it hits on group, and group+1.. this tracks to the objects and faces we must manipulate */
+
+          polygon_3d_link *top_link    ;
+          polygon_3d_link *barrel_link ;
+          polygon_3d_link *bottom_link ;
+
+          object3d *top_group_object    ;
+          object3d *barrel_object       ;
+          object3d *bottom_group_object ;
+
+          face3d *top_group_face     ;
+          face3d *barrel_top_face    ;
+          face3d *barrel_bottom_face ;
+          face3d *bottom_group_face  ;
+
+          edge_ref barrel_top_face_first_edge    ;
+          edge_ref barrel_bottom_face_first_edge ;
+          edge_ref e;
+
+          POLYAREA *top_pa    = cntr_in_M_POLYAREA (pa->contours, group_m_polyarea[group    ] , false);
+          POLYAREA *bottom_pa = cntr_in_M_POLYAREA (pa->contours, group_m_polyarea[group + 1] , false);
+
+          /* These conditions should not occur, and can likely only happen because some other
+           * bug in the polygon processing code has created an inconsistent m_polyarea somewhere.
+           * We need to check for them though, since sadly - bad polygon boolean operations are
+           * still far too common.
+           */
+          g_warn_if_fail (top_pa != NULL);
+          g_warn_if_fail (bottom_pa != NULL);
+          if (top_pa == NULL)
+              continue;
+
+          if (bottom_pa == NULL)
+            continue;
+
+          top_link    = top_pa->user_data;
+          barrel_link = pa->user_data;
+          bottom_link = bottom_pa->user_data;
+
+          top_group_object    = top_link->object;
+          barrel_object       = barrel_link->object;
+          bottom_group_object = bottom_link->object;
+
+          top_group_face     = top_link->bottom_face;
+          barrel_top_face    = barrel_link->top_face;
+          barrel_bottom_face = barrel_link->bottom_face;
+          bottom_group_face  = bottom_link->top_face;
+
+          barrel_top_face_first_edge = ((contour3d *)barrel_top_face->contours->data)->first_edge;
+          barrel_bottom_face_first_edge = ((contour3d *)barrel_bottom_face->contours->data)->first_edge;
+
+          /* Do some magic to join the objects */
+
+          g_assert (g_list_length (barrel_top_face->contours) == 1);
+          g_assert (g_list_length (barrel_bottom_face->contours) == 1);
+
+          face3d_add_contour (top_group_face,    make_contour3d (barrel_top_face_first_edge));
+          face3d_add_contour (bottom_group_face, make_contour3d (barrel_bottom_face_first_edge));
+
+          /* Need to walk around the top / bottom edge contours, and re-connect with the linked up copper groups */
+
+          e = barrel_top_face_first_edge;
+          do
+            {
+              /* Check and reassign the edge */
+              g_assert (LDATA (e) == barrel_top_face);
+              LDATA (e) = top_group_face;
+            }
+          while ((e = LNEXT (e)) != barrel_top_face_first_edge);
+
+          e = barrel_bottom_face_first_edge;
+          do
+            {
+              /* Check and reassign the edge */
+              g_assert (LDATA (e) == barrel_bottom_face);
+              LDATA (e) = bottom_group_face;
+            }
+          while ((e = LNEXT (e)) != barrel_bottom_face_first_edge);
+
+          /* XXX: What about destroying the barrel top / bottom face appearance (if any?) */
+
+          barrel_object->faces = g_list_remove (barrel_object->faces, barrel_top_face);
+          barrel_object->faces = g_list_remove (barrel_object->faces, barrel_bottom_face);
+          destroy_face3d (barrel_top_face);    /* This leaves the edges, vertices etc.. it only deletes the face contour list */
+          destroy_face3d (barrel_bottom_face); /* This leaves the edges, vertices etc.. it only deletes the face contour list */
+          /* No vertices should be deleted */
+          /* All edges must end up in the top object, so we leave them */
+
+          /* Steal the data from the barrel object */
+          steal_object_geometry (top_group_object, barrel_object);
+          destroy_object3d (barrel_object);
+
+          if (top_group_object != bottom_group_object)
+            { /* Top object and bottom object were previously distinct */
+
+              /* Update any remaining link pointers to the previous bottom object we are about to delete */
+              update_object_pointers (group_m_polyarea, bottom_group_object, top_group_object);
+
+              /* Remove the old bottom object from the list of output objects */
+              group_objects = g_list_remove (group_objects, bottom_group_object);
+
+              /* Steal the data from the old bottom object */
+              steal_object_geometry (top_group_object, bottom_group_object);
+
+              /* Delete the old bottom object */
+              destroy_object3d (bottom_group_object);
+            }
+
+          free (pa->user_data);
+        }
+      while (pa = pa->f, pa != barrel_m_polyarea);
+
+      g_list_free (barrel_objects);
+#else
+      group_objects = g_list_concat (group_objects, barrel_objects);
+#endif
+    }
+
+  if (drill_m_polyarea != NULL) /* Drill holes */
+    {
+      Coord top_depth;
+      Coord bottom_depth;
+      POLYAREA *pa;
+      GList *drill_objects;
+
+      /* Extrude drill hole */
+      fprintf (stderr, "Extruding drill holes\n");
+
+      /* Depth is the bottom? of the layer? */
+      top_depth = compute_depth (min_copper_group);
+      bottom_depth = compute_depth (max_copper_group);
+
+      drill_objects = object3d_from_contours (drill_m_polyarea,
+#ifdef REVERSED_PCB_CONTOURS
+                                               bottom_depth,                      /* Bottom */
+                                               top_depth + HACK_COPPER_THICKNESS, /* Top */
+#else
+                                              -bottom_depth - HACK_BOARD_THICKNESS / 2,                         /* Bottom */
+                                              -top_depth    - HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS, /* Top */
+#endif
+                                              copper_appearance,
+                                              NULL,
+                                              true); /* Invert */
+
+/* Connect the via drill holes in this block of code */
+#if 1
+      /* Loop over all barrel outline pieces */
+      pa = drill_m_polyarea;
+      do
+        {
+          /* For each drill hole, we want to find the Polyarea it hits on min_copper_group, and max_copper_group.. this tracks to the objects and faces we must manipulate */
+          polygon_3d_link *top_link    = cntr_in_M_POLYAREA (pa->contours, group_m_polyarea[min_copper_group] , false)->user_data;
+          polygon_3d_link *drill_link  = pa->user_data;
+          polygon_3d_link *bottom_link = cntr_in_M_POLYAREA (pa->contours, group_m_polyarea[max_copper_group] , false)->user_data;
+
+          object3d *top_group_object    = top_link->object;
+          object3d *drill_object        = drill_link->object;
+          object3d *bottom_group_object = bottom_link->object;
+
+          face3d *top_group_face    = top_link->top_face;
+          face3d *drill_top_face    = drill_link->top_face;
+          face3d *drill_bottom_face = drill_link->bottom_face;
+          face3d *bottom_group_face = bottom_link->bottom_face;
+
+          edge_ref drill_top_face_first_edge = ((contour3d *)drill_top_face->contours->data)->first_edge;
+          edge_ref drill_bottom_face_first_edge = ((contour3d *)drill_bottom_face->contours->data)->first_edge;
+          edge_ref e;
+
+          g_warn_if_fail (top_group_object == bottom_group_object);
+
+          /* Do some magic to join the objects */
+
+          g_assert (g_list_length (drill_top_face->contours) == 1);
+          g_assert (g_list_length (drill_bottom_face->contours) == 1);
+
+          face3d_add_contour (top_group_face,    make_contour3d (drill_top_face_first_edge));
+          face3d_add_contour (bottom_group_face, make_contour3d (drill_bottom_face_first_edge));
+
+          /* Need to walk around the top / bottom edge contours, and re-connect with the linked up copper groups */
+
+          e = drill_top_face_first_edge;
+          do
+            {
+              /* Check and reassign the edge */
+              g_assert (LDATA (e) == drill_top_face);
+              LDATA (e) = top_group_face;
+            }
+          while ((e = LNEXT (e)) != drill_top_face_first_edge);
+
+          e = drill_bottom_face_first_edge;
+          do
+            {
+              /* Check and reassign the edge */
+              g_assert (LDATA (e) == drill_bottom_face);
+              LDATA (e) = bottom_group_face;
+            }
+          while ((e = LNEXT (e)) != drill_bottom_face_first_edge);
+
+          /* XXX: What about destroying the barrel top / bottom face appearance (if any?) */
+
+          drill_object->faces = g_list_remove (drill_object->faces, drill_top_face);
+          drill_object->faces = g_list_remove (drill_object->faces, drill_bottom_face);
+          destroy_face3d (drill_top_face);    /* This leaves the edges, vertices etc.. it only deletes the face contour list */
+          destroy_face3d (drill_bottom_face); /* This leaves the edges, vertices etc.. it only deletes the face contour list */
+          /* No vertices should be deleted */
+          /* All edges must end up in the top object, so we leave them */
+
+          /* Steal the data from the drill object */
+          steal_object_geometry (top_group_object, drill_object);
+          destroy_object3d (drill_object);
+
+          free (pa->user_data);
+        }
+      while (pa = pa->f, pa != drill_m_polyarea);
+
+      g_list_free (drill_objects);
+#else
+      group_objects = g_list_concat (group_objects, drill_objects);
+#endif
     }
 
 
@@ -1394,5 +1771,17 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
 
   poly_Free (&info.poly);
 
-  return objects;
+  poly_Free (&barrel_m_polyarea);
+  poly_Free (&drill_m_polyarea);
+
+  for (group = min_copper_group; group <= max_copper_group; group++)
+    {
+      if (group_m_polyarea[group] != NULL)
+        {
+          free (group_m_polyarea[group]->user_data);
+          poly_Free (&group_m_polyarea[group]);
+        }
+    }
+
+  return group_objects;
 }
diff --git a/src/hid/common/object3d.h b/src/hid/common/object3d.h
index 13a42c9..82b69fd5 100644
--- a/src/hid/common/object3d.h
+++ b/src/hid/common/object3d.h
@@ -15,7 +15,7 @@ void object3d_set_appearance (object3d *object, appearance *appear);
 void object3d_add_edge (object3d *object, edge_ref edge);
 void object3d_add_vertex (object3d *object, vertex3d *vertex);
 void object3d_add_face (object3d *object, face3d *face);
-GList *object3d_from_contours (const POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance, bool extrude_inverted);
+GList *object3d_from_contours (POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance, bool extrude_inverted);
 GList *object3d_from_board_outline (void);
 GList *object3d_from_soldermask_within_area (POLYAREA *area, int side);
 GList *object3d_from_copper_layers_within_area (POLYAREA *area);
