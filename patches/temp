Bottom: d56d9a26c28e3a6c10ea7dbb8f4d43e00da12a33
Top:    18f59d4767c8a1d99cfe0a756256b150112f2778
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-18 20:35:09 +0000

Temp


---

diff --git a/src/misc.c b/src/misc.c
index 678ec6a..6ef9074 100644
--- a/src/misc.c
+++ b/src/misc.c
@@ -355,6 +355,68 @@ SetLineBoundingBox (LineType *Line)
 }
 
 /* ---------------------------------------------------------------------------
+ * calculates an arc center and radius for the arc described by
+ * two points, and an included angle between them. Return locations for
+ * cx, cy are required. radius, start_angle and delta_angle are optional
+ * and may be NULL if not required.
+ */
+void
+calc_arc_from_points_and_included_angle (PointType *p1, PointType *p2, Angle included_angle,
+                                         Coord *cx, Coord *cy, Coord *radius,
+                                         Angle *start_angle, Angle *delta_angle)
+{
+  Coord hx, hy;
+  double p_to_h_dist;
+  double c_to_h_dist;
+  double unit_hcx, unit_hcy;
+
+  /* The arc center lies on a line passing through hx, hy, perpendicular
+   * to the direction between our two end-points.
+   *
+   *              p2
+   *            / |
+   *          /   |h
+   *    -----c----|-------------- line passing (hx, hy), perpendicular to p1-p2
+   *          \   |
+   *            \ |
+   *              p1
+   *
+   *  Find cx, cy.
+   *
+   *  We know that c-p1 = radius. (But we don't know that radius).
+   *  We have the included angle, /_ p1.c.p2
+   *  |(hx,hy)-p1| = sin(angle/2) * radius
+   *
+   * tan(ang/2) = |(hx,hy)-p1| / |(hx,hy)-(cx,cy)|
+   *
+   * |(hx,hy)-(cx,cy)| = |(hx,hy)-p1| / tan(ang/2)
+   *
+   */
+
+  /* Find the point halfway between the two points the arc spans */
+  hx = p1->X + (p2->X - p1->X) / 2;
+  hy = p1->Y + (p2->Y - p1->Y) / 2;
+
+  p_to_h_dist = hypot (p2->X - p1->X, p2->Y - p1->Y) / 2.;
+  c_to_h_dist = p_to_h_dist / tan (TO_RADIANS (included_angle) / 2.);
+
+  unit_hcx = (double)-(hy - p1->Y) / p_to_h_dist;
+  unit_hcy = (double) (hx - p1->X) / p_to_h_dist;
+
+  *cx = hx + unit_hcx * c_to_h_dist;
+  *cy = hy + unit_hcy * c_to_h_dist;
+
+  if (radius != NULL)
+    *radius = hypot (p1->X - *cx, p1->Y - *cy);
+
+  if (start_angle != NULL)
+    *start_angle = atan2 ((p1->Y - *cy), -(p1->X - *cx)) / M180;
+
+  if (delta_angle != NULL)
+    *delta_angle = included_angle;
+}
+
+/* ---------------------------------------------------------------------------
  * sets the bounding box of a polygons
  */
 void
diff --git a/src/misc.h b/src/misc.h
index 860cfa7..84f62ed 100644
--- a/src/misc.h
+++ b/src/misc.h
@@ -53,6 +53,7 @@ void SetArcEndpoints (ArcType *);
 void SetPointBoundingBox (PointType *);
 void SetPinBoundingBox (PinType *);
 void SetPadBoundingBox (PadType *);
+void calc_arc_from_points_and_included_angle (PointType *p1, PointType *p2, Angle included_angle, Coord *cx, Coord *cy, Coord *radius, Angle *start_angle, Angle *delta_angle);
 void SetPolygonBoundingBox (PolygonType *);
 void SetElementBoundingBox (DataType *, ElementType *, FontType *);
 bool IsDataEmpty (DataType *);
diff --git a/src/polygon.c b/src/polygon.c
index 2e42a3a..e58f7db 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -365,13 +365,7 @@ original_poly (PolygonType * p)
       if (p->Points[n].included_angle != 0)
         {
           Cardinal next_n;
-          Coord px, py;
-          Coord nx, ny;
-          Coord hx, hy;
           Coord cx, cy;
-          double p_to_h_dist;
-          double c_to_h_dist;
-          double unit_hcx, unit_hcy;
 
           next_n = n + 1;
           if (next_n == p->PointN ||
@@ -380,44 +374,9 @@ original_poly (PolygonType * p)
 
           /* XXX: Compute center of arc */
 
-          px = p->Points[     n].X, py = p->Points[     n].Y;
-          nx = p->Points[next_n].X, ny = p->Points[next_n].Y;
-
-          /* Find the point halfway between the to points the arc spans */
-          hx = px + (nx - px) / 2;
-          hy = py + (ny - py) / 2;
-
-          /* The arc center lies on a line passing through hx, hy, perpendicular
-           * to the direction between our two end-points.
-           *
-           *              n
-           *            / |
-           *          /   |h
-           *    -----c----|-------------- line passing (hx, hy), perpendicular to p[n]-p[next_n]
-           *          \   |
-           *            \ |
-           *              p
-           *
-           *  Find cx, cy.
-           *
-           *  We know that c-p[n] = radius. (But we don't know that radius).
-           *  We have the included angle, /_ p[n].c.p[next_n]
-           *  |(hx,hy)-p[n]| = sin(angle/2) * radius
-           *
-           * tan(ang/2) = |(hx,hy)-p[n]| / |(hx,hy)-(cx,cy)|
-           *
-           * |(hx,hy)-(cx,cy)| = |(hx,hy)-p[n]| / tan(ang/2)
-           *
-           */
-
-          p_to_h_dist = sqrt (pow(nx - py, 2) + pow (ny - py, 2)) / 2.;
-          c_to_h_dist = p_to_h_dist / tan (TO_RADIANS (p->Points[n].included_angle) / 2.);
-
-          unit_hcx = (float)-(hy - py) / p_to_h_dist;
-          unit_hcy = (float)(hx - px) / p_to_h_dist;
-
-          cx = hx + unit_hcx * c_to_h_dist;
-          cy = hy + unit_hcy * c_to_h_dist;
+
+          calc_arc_from_points_and_included_angle (&p->Points[n], &p->Points[next_n], p->Points[n].included_angle,
+                                                   &cx, &cy, NULL, NULL, NULL);
 
 #if 0 /* DEBUG TO SHOW THE CENTER OF THE ARC */
           v[0] = cx, v[1] = cy;
