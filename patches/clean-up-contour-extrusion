Bottom: 860e14ff691911ac252ec5b536f7b519104e2bbe
Top:    1086cef704531e92c7d287038deb83fe59d0a7e6
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-28 01:50:13 +0000

Clean up contour extrusion code


---

diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index 1e901e8..a603eba 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -336,8 +336,7 @@ object3d_from_contours (POLYAREA *contours,
                         double ztop,
                         const appearance *master_object_appearance,
                         const appearance *master_top_bot_appearance,
-                        bool sides_inverted,   /* true for extruding positive contours which are to become holes. */
-                        bool top_bot_inverted) /* true if the top and bottom are to be spliced as an inner contour of another face */
+                        bool extrude_inverted)
 {
   GList *objects = NULL;
   object3d *object;
@@ -358,6 +357,12 @@ object3d_from_contours (POLYAREA *contours,
   polygon_3d_link *link;
   bool invert;
 
+#ifdef REVERSED_PCB_CONTOURS
+  invert = extrude_inverted ? false : true;
+#else
+  invert = extrude_inverted ? true : false;
+#endif
+
   if (contours == NULL)
     return NULL;
 
@@ -440,11 +445,6 @@ object3d_from_contours (POLYAREA *contours,
 
       object3d_add_face (object, faces[i]);
       /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
-#ifdef REVERSED_PCB_CONTOURS
-      invert = sides_inverted ? false : true;
-#else
-      invert = sides_inverted ? true : false;
-#endif
       if (invert)
         face3d_add_contour (faces[i], make_contour3d (edges[2 * npoints + i]));
       else
@@ -453,11 +453,6 @@ object3d_from_contours (POLYAREA *contours,
 
     faces[npoints    ] = make_face3d (); /* bottom_face */
     faces[npoints + 1] = make_face3d (); /* top_face */
-#ifdef REVERSED_PCB_CONTOURS
-    invert = top_bot_inverted ? false : true;
-#else
-    invert = top_bot_inverted ? true : false;
-#endif
     if (invert)
       {
         face3d_set_normal (faces[npoints    ], 0., 0., -1.); /* bottom_face */
@@ -474,12 +469,6 @@ object3d_from_contours (POLYAREA *contours,
     object3d_add_face (object, faces[npoints + 1]);
 
     /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
-#ifdef REVERSED_PCB_CONTOURS
-      invert = top_bot_inverted ? false : true;
-#else
-      invert = top_bot_inverted ? true : false;
-#endif
-
     if (invert)
       {
         face3d_add_contour (faces[npoints    ], make_contour3d (edges[0]));
@@ -509,11 +498,6 @@ object3d_from_contours (POLYAREA *contours,
 
         /* If there is more than one contour, it will be an inner contour of the bottom and top faces. Refer to it here */
         /* XXX: Haven't properly thought through how (if) inverting works with multiple contours */
-#ifdef REVERSED_PCB_CONTOURS
-        invert = top_bot_inverted ? false : true;
-#else
-        invert = top_bot_inverted ? true : false;
-#endif
       if (invert)
         {
           face3d_add_contour (faces[npoints    ], make_contour3d (edges[i]));
@@ -531,11 +515,6 @@ object3d_from_contours (POLYAREA *contours,
 
       /* Setup the face normals for the edges along the contour extrusion (top and bottom are handled separaetely) */
       /* Define the (non-normalized) face normal to point to the outside of the contour */
-#if REVERSED_PCB_CONTOURS
-      invert = sides_inverted ? false : true;
-#else
-      invert = sides_inverted ? true : false;
-#endif
       if (invert)
         /* Vertex ordering of the edge we're finding the normal to is reversed in this case */
         face3d_set_normal (faces[i], -(vertices[next_i_around_ct]->y - vertices[i]->y),
@@ -551,13 +530,8 @@ object3d_from_contours (POLYAREA *contours,
       DDATA (edges[1 * npoints + i]) = vertices[1 * npoints + next_i_around_ct];
       ODATA (edges[2 * npoints + i]) = vertices[0 * npoints + i];
       DDATA (edges[2 * npoints + i]) = vertices[1 * npoints + i];
-      /* XXX: Do we need to differently with this for inverted sides / top? */
+      /* XXX: Do we need to differently with this for inverted contours? */
 
-#if REVERSED_PCB_CONTOURS
-      invert = top_bot_inverted ? false : true;
-#else
-      invert = top_bot_inverted ? true : false;
-#endif
       if (invert)
         {
           RDATA (edges[              i]) = faces[i];
@@ -573,11 +547,6 @@ object3d_from_contours (POLYAREA *contours,
           RDATA (edges[1 * npoints + i]) = faces[i];
         }
 
-#if REVERSED_PCB_CONTOURS
-      invert = sides_inverted ? false : true;
-#else
-      invert = sides_inverted ? true : false;
-#endif
       if (invert)
         {
           RDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
@@ -614,50 +583,22 @@ object3d_from_contours (POLYAREA *contours,
        */
 
 #ifdef REVERSED_PCB_CONTOURS  /* UNDERLYING DATA HAS CW CONTOURS FOR OUTER, CCW FOR INNER - E.g. PCB's polygons when translated into STEP coordinates */
-      if (!top_bot_inverted && !sides_inverted)
-        {
-          /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
-          splice (SYM(edges[prev_i_around_ct]), edges[2 * npoints + i]);
-          splice (edges[2 * npoints + i], edges[i]);
-          /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
-          splice (edges[npoints + i], SYM(edges[2 * npoints + i]));
-          splice (SYM(edges[2 * npoints + i]), SYM(edges[npoints + prev_i_around_ct]));
-        }
-      else if (top_bot_inverted && !sides_inverted)
-        {
-          /* XXX: CANT BE BOTHERED RIGHT NOW - NOT IMPLEMENTED */
-          g_assert_not_reached ();
-        }
-      else if (top_bot_inverted && sides_inverted)
+      if (extrude_inverted)
         {
           /* XXX: CANT BE BOTHERED RIGHT NOW - NOT IMPLEMENTED */
           g_assert_not_reached ();
         }
       else
         {
-          /* XXX: THIS COMBINATION IS CURRENTLY NOT USED */
-          g_assert_not_reached ();
-        }
-#else /* UNDERLYING DATA HAS CCW CONTOURS FOR OUTER, CW FOR INNER. E.g. PCB's raw coordinates in X, Y */
-      if (!top_bot_inverted && !sides_inverted)
-        {
           /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
-          splice (edges[i], edges[2 * npoints + i]);
-          splice (edges[2 * npoints + i], SYM(edges[prev_i_around_ct]));
-          /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
-          splice (SYM(edges[npoints + prev_i_around_ct]), SYM(edges[2 * npoints + i]));
-          splice (SYM(edges[2 * npoints + i]),  edges[npoints + i]);
-        }
-      else if (top_bot_inverted && !sides_inverted)
-        {
-          /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
-          splice (SYM(edges[i]), edges[2 * npoints + i]);
-          splice (edges[2 * npoints + i], edges[prev_i_around_ct]);
+          splice (SYM(edges[prev_i_around_ct]), edges[2 * npoints + i]);
+          splice (edges[2 * npoints + i], edges[i]);
           /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
-          splice (edges[npoints + prev_i_around_ct], SYM(edges[2 * npoints + i]));
-          splice (SYM(edges[2 * npoints + i]),  SYM(edges[npoints + i]));
+          splice (edges[npoints + i], SYM(edges[2 * npoints + i]));
+          splice (SYM(edges[2 * npoints + i]), SYM(edges[npoints + prev_i_around_ct]));
         }
-      else if (top_bot_inverted && sides_inverted)
+#else /* UNDERLYING DATA HAS CCW CONTOURS FOR OUTER, CW FOR INNER. E.g. PCB's raw coordinates in X, Y */
+      if (extrude_inverted)
         {
           /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
           splice (SYM(edges[i]), SYM(edges[2 * npoints + i]));
@@ -668,8 +609,12 @@ object3d_from_contours (POLYAREA *contours,
         }
       else
         {
-          /* XXX: THIS COMBINATION IS CURRENTLY NOT USED */
-          g_assert_not_reached ();
+          /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
+          splice (edges[i], edges[2 * npoints + i]);
+          splice (edges[2 * npoints + i], SYM(edges[prev_i_around_ct]));
+          /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
+          splice (SYM(edges[npoints + prev_i_around_ct]), SYM(edges[2 * npoints + i]));
+          splice (SYM(edges[2 * npoints + i]),  edges[npoints + i]);
         }
 #endif
 
@@ -684,7 +629,7 @@ object3d_from_contours (POLYAREA *contours,
 
         /* AXIS DIRECTON NOT DEPEND ON WHETHER WE INVERT THE TOP/BOT CONTOUR.. THE EDGE LOOP IS APPROPRIATE ALREADY */
         face3d_set_cylindrical (faces[i], cx, cy, 0., /* A point on the axis of the cylinder */
-                                          0., 0., /*sides_inverted ? -1. :*/ 1., /* Direction of the cylindrical axis */
+                                          0., 0., 1., /* Direction of the cylindrical axis */
                                           radius);
 
         /* XXX: DEPENDS ON INSIDE / OUTSIDE CORNER!! */
@@ -692,18 +637,17 @@ object3d_from_contours (POLYAREA *contours,
          *      CYLINDRICAL SURFACE ORIENTATION IS ALWAYS POINTING OUTWARD FROM ITS AXIS, SO
          *      ORIENTATION REVERSED IS USED FOR HOLES
          */
-        if ((ct->Flags.orient == PLF_INV) != sides_inverted)
+        if ((ct->Flags.orient == PLF_INV) != extrude_inverted)
           face3d_set_surface_orientation_reversed (faces[i]);
 
         face3d_set_normal (faces[i], 1., 0., 0.);  /* A normal to the axis direction */
                                   /* XXX: ^^^ Could line this up with the direction to the vertex in the corresponding circle edge */
 
-        /* DOES NOT DEPEND ON WHETHER WE INVERT THE TOP/BOT CONTOUR.. THE EDGE TRAVERSAL IS REVERSED DURING EMISSION */
+        /* DOES NOT DEPEND ON WHETHER WE INVERT THE CONTOUR.. THE EDGE TRAVERSAL IS REVERSED DURING EMISSION */
 #ifdef REVERSED_PCB_CONTOURS
         normal_z = cw ? 1. : -1.; /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
 #else
         normal_z = cw ? -1. : 1.; /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
-        //normal_z = (top_bot_inverted != cw) ? -1. : 1.; /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
 #endif
 
         edge_info_set_round (UNDIR_DATA (edges[i]),
@@ -854,7 +798,7 @@ object3d_from_board_outline (void)
 #endif
                                     board_appearance,
                                     top_bot_appearance,
-                                    false, false);
+                                    false); /* Don't invert */
 
 //  destroy_appearance (board_appearance); /* XXX: HANGING ON TO THIS FOR NOW */
 //  destroy_appearance (top_bot_appearance); /* XXX: HANGING ON TO THIS FOR NOW */
@@ -1137,7 +1081,7 @@ object3d_from_soldermask_within_area (POLYAREA *area, int side)
 #endif
                                     mask_appearance,
                                     NULL,
-                                    false, false);
+                                    false); /* Don't invert */
 
 //  destroy_appearance (mask_appearance); /* XXX: HANGING ON TO THIS FOR NOW */
 
@@ -1833,7 +1777,7 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
 #endif
                                 copper_appearance,
                                 NULL,
-                                false, false));
+                                false)); /* Don't invert */
 
       group_m_polyarea[group] = info.poly;
     }
@@ -1894,7 +1838,7 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
 #endif
                                                copper_appearance,
                                                NULL,
-                                               false, false/*true*/);
+                                               false); /* Don't invert */
 
 /* Connect the via barrels in this block of code */
 #if 1
@@ -2080,7 +2024,7 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
 #endif
                                               copper_appearance,
                                               NULL,
-                                              true, true);
+                                              true); /* Invert */
 
 /* Connect the via drill holes in this block of code */
 #if 1
diff --git a/src/hid/common/object3d.h b/src/hid/common/object3d.h
index 7d444cb..82b69fd 100644
--- a/src/hid/common/object3d.h
+++ b/src/hid/common/object3d.h
@@ -15,7 +15,7 @@ void object3d_set_appearance (object3d *object, appearance *appear);
 void object3d_add_edge (object3d *object, edge_ref edge);
 void object3d_add_vertex (object3d *object, vertex3d *vertex);
 void object3d_add_face (object3d *object, face3d *face);
-GList *object3d_from_contours (POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance, bool sides_inverted, bool top_bot_inverted);
+GList *object3d_from_contours (POLYAREA *contours, double zbot, double ztop, const appearance *master_object_appearance, const appearance *master_top_bot_appearance, bool extrude_inverted);
 GList *object3d_from_board_outline (void);
 GList *object3d_from_soldermask_within_area (POLYAREA *area, int side);
 GList *object3d_from_copper_layers_within_area (POLYAREA *area);
