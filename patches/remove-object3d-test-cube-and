Bottom: 90408ca2b2c27561262001cdd699e1fc2d779420
Top:    f770d4809e65dc847984a3c603dea89f9a59510a
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 15:56:03 +0000

Remove object3d test cube and associated debug


---

diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index d08a189..162e2c0 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -36,31 +36,9 @@
 
 static GList *object3d_test_objects = NULL;
 
-static void
-print_edge_id (edge_ref e)
-{
-  printf ("ID %i.%i", ID(e), (unsigned int)e & 3u);
-}
-
-static void
-debug_print_edge (edge_ref e, void *data)
-{
-  printf ("Edge ID %i.%i\n", ID(e), (int)e & 3u);
-
-  printf ("Edge ONEXT is "); print_edge_id (ONEXT(e)); printf ("\n");
-  printf ("Edge OPREV is "); print_edge_id (OPREV(e)); printf ("\n");
-  printf ("Edge DNEXT is "); print_edge_id (DNEXT(e)); printf ("\n");
-  printf ("Edge DPREV is "); print_edge_id (DPREV(e)); printf ("\n");
-  printf ("Edge RNEXT is "); print_edge_id (RNEXT(e)); printf ("\n");
-  printf ("Edge RPREV is "); print_edge_id (RPREV(e)); printf ("\n");
-  printf ("Edge LNEXT is "); print_edge_id (LNEXT(e)); printf ("\n");
-  printf ("Edge LPREV is "); print_edge_id (LPREV(e)); printf ("\n");
-}
-
 void
 object3d_test_init (void)
 {
-  //object3d_test_objects = g_list_append (NULL, object3d_create_test_cube ());
   object3d_test_objects = object3d_from_board_outline ();
 }
 
@@ -111,81 +89,6 @@ object3d_add_face (object3d *object, face3d *face)
   object->faces = g_list_append (object->faces, face);
 }
 
-#define XOFFSET 50
-#define YOFFSET 50
-#define ZOFFSET 0
-#define SCALE  10
-object3d *
-object3d_create_test_cube (void)
-{
-  object3d *object;
-  vertex3d *cube_vertices[8];
-  edge_ref cube_edges[12];
-  face3d *faces[6];
-  int i;
-
-  object = make_object3d ("TEST CUBE");
-
-  cube_vertices[0] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 0., ZOFFSET + SCALE *  0.);
-  cube_vertices[1] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 0., ZOFFSET + SCALE *  0.);
-  cube_vertices[2] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 0., ZOFFSET + SCALE * -1.);
-  cube_vertices[3] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 0., ZOFFSET + SCALE * -1.);
-  cube_vertices[4] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 1., ZOFFSET + SCALE *  0.);
-  cube_vertices[5] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 1., ZOFFSET + SCALE *  0.);
-  cube_vertices[6] = make_vertex3d (XOFFSET + SCALE * 1., YOFFSET + SCALE * 1., ZOFFSET + SCALE * -1.);
-  cube_vertices[7] = make_vertex3d (XOFFSET + SCALE * 0., YOFFSET + SCALE * 1., ZOFFSET + SCALE * -1.);
-
-  for (i = 0; i < 8; i++)
-    object3d_add_vertex (object, cube_vertices[i]);
-
-  for (i = 0; i < 12; i++)
-    {
-      cube_edges[i] = make_edge ();
-      UNDIR_DATA (cube_edges[i]) = make_edge_info ();
-      object3d_add_edge (object, cube_edges[i]);
-    }
-
-  for (i = 0; i < 6; i++)
-    {
-      faces[i] = make_face3d ();
-      /* XXX: Face normal */
-      /* XXX: Face contours */
-      object3d_add_face (object, faces[i]);
-    }
-
-  for (i = 0; i < 4; i++)
-    {
-      int next_vertex = (i + 1) % 4;
-      int prev_vertex = (i + 3) % 4;
-
-      /* Assign bottom edge endpoints */
-      ODATA (cube_edges[i]) = cube_vertices[i];
-      DDATA (cube_edges[i]) = cube_vertices[next_vertex];
-
-      /* Assign top edge endpoints */
-      ODATA (cube_edges[4 + i]) = cube_vertices[4 + i];
-      DDATA (cube_edges[4 + i]) = cube_vertices[4 + next_vertex];
-
-      /* Assign side edge endpoints */
-      ODATA (cube_edges[8 + i]) = cube_vertices[i];
-      DDATA (cube_edges[8 + i]) = cube_vertices[4 + i];
-
-      /* Link up edges orbiting around each bottom vertex */
-      splice (cube_edges[i], cube_edges[8 + i]);
-      splice (cube_edges[8 + i], SYM(cube_edges[prev_vertex]));
-
-      /* Link up edges orbiting around each bottom top */
-      splice (cube_edges[4 + i], SYM(cube_edges[4 + prev_vertex]));
-      splice (SYM(cube_edges[4 + prev_vertex]), SYM(cube_edges[8 + i]));
-
-    }
-
-  quad_enum (cube_edges[0], debug_print_edge, NULL);
-
-
-  return object;
-}
-
 
 float colors[12][3] = {{1., 0., 0.},
                        {1., 1., 0.},
diff --git a/src/hid/common/object3d.h b/src/hid/common/object3d.h
index 314e377..e8c26e2 100644
--- a/src/hid/common/object3d.h
+++ b/src/hid/common/object3d.h
@@ -15,5 +15,4 @@ void object3d_set_appearance (object3d *object, appearance *appear);
 void object3d_add_edge (object3d *object, edge_ref edge);
 void object3d_add_vertex (object3d *object, vertex3d *vertex);
 void object3d_add_face (object3d *object, face3d *face);
-object3d *object3d_create_test_cube (void);
 GList *object3d_from_board_outline (void);
