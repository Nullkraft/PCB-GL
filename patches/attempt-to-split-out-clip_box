Bottom: 62bdb109bee2b7c5271596f0fcf76855b85e064a
Top:    efeec103a10310ee5f6d2f152a3158db1fadae18
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-01-07 01:46:26 +0000

Attempt to split out clip_box using code from big re-write


---

diff --git a/src/draw.c b/src/draw.c
index 2993fac..fa9458b 100644
--- a/src/draw.c
+++ b/src/draw.c
@@ -84,7 +84,7 @@ static HID_DRAW *hid_draw = NULL;
 static void DrawEverything (const BoxType *);
 static void AddPart (void *);
 /* static */ void DrawEMark (ElementType *, Coord, Coord, bool);
-/* static */ void DrawRats (HID_DRAW *hid_draw, const BoxType *);
+/* static */ void DrawRats (HID_DRAW *hid_draw);
 
 static void
 set_object_color (AnyObjectType *obj, char *warn_color, char *selected_color,
@@ -284,17 +284,17 @@ element_callback (const BoxType * b, void *cl)
  */
 
 void
-PrintAssembly (int side, const BoxType * drawn_area)
+PrintAssembly (HID_DRAW *hid_draw, int side)
 {
   int side_group = GetLayerGroupNumberBySide (side);
 
   doing_assy = true;
   hid_draw_set_draw_faded (Output.fgGC, 1);
-  DrawLayerGroup (side_group, drawn_area);
+  DrawLayerGroup (hid_draw, side_group);
   hid_draw_set_draw_faded (Output.fgGC, 0);
 
   /* draw package */
-  DrawSilk (hid_draw, side, drawn_area);
+  DrawSilk (hid_draw, side);
   doing_assy = false;
 }
 
@@ -340,11 +340,11 @@ DrawEverything (const BoxType *drawn_area)
       side = SWAP_IDENT ? TOP_SIDE : BOTTOM_SIDE;
       if (PCB->ElementOn)
 	{
-	  r_search (PCB->Data->element_tree, drawn_area, NULL, element_callback, &side);
-	  r_search (PCB->Data->name_tree[NAME_INDEX (PCB)], drawn_area, NULL, name_callback, &side);
-	  dapi->draw_layer (&(PCB->Data->Layer[max_copper_layer + side]), drawn_area, NULL);
+	  r_search (PCB->Data->element_tree, hid_draw->clip_box, NULL, element_callback, &side);
+	  r_search (PCB->Data->name_tree[NAME_INDEX (PCB)], hid_draw->clip_box, NULL, name_callback, &side);
+	  dapi->draw_layer (&(PCB->Data->Layer[max_copper_layer + side]), hid_draw->clip_box, NULL);
 	}
-      r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_callback, &side);
+      r_search (PCB->Data->pad_tree, hid_draw->clip_box, NULL, pad_callback, &side);
       hid_draw_end_layer (hid_draw);
     }
 
@@ -355,7 +355,7 @@ DrawEverything (const BoxType *drawn_area)
 
       if (hid_draw_set_layer (hid_draw, 0, group, 0))
         {
-          DrawLayerGroup (group, drawn_area);
+          DrawLayerGroup (hid_draw, group);
           hid_draw_end_layer (hid_draw);
         }
     }
@@ -365,20 +365,20 @@ DrawEverything (const BoxType *drawn_area)
 
   /* Draw pins, pads, vias below silk */
   if (hid_draw_is_gui (hid_draw))
-    dapi->draw_ppv (SWAP_IDENT ? bottom_group : top_group, drawn_area, NULL);
+    dapi->draw_ppv (SWAP_IDENT ? bottom_group : top_group, hid_draw->clip_box, NULL);
   else
     {
-      CountHoles (&plated, &unplated, drawn_area);
+      CountHoles (&plated, &unplated, hid_draw->clip_box);
 
       if (plated && hid_draw_set_layer (hid_draw, "plated-drill", SL (PDRILL, 0), 0))
         {
-          dapi->draw_holes (1, drawn_area, NULL);
+          dapi->draw_holes (1, hid_draw->clip_box, NULL);
           hid_draw_end_layer (hid_draw);
         }
 
       if (unplated && hid_draw_set_layer (hid_draw, "unplated-drill", SL (UDRILL, 0), 0))
         {
-          dapi->draw_holes (0, drawn_area, NULL);
+          dapi->draw_holes (0, hid_draw->clip_box, NULL);
           hid_draw_end_layer (hid_draw);
         }
     }
@@ -386,25 +386,25 @@ DrawEverything (const BoxType *drawn_area)
   /* Draw the solder mask if turned on */
   if (hid_draw_set_layer (hid_draw, "componentmask", SL (MASK, TOP), 0))
     {
-      DrawMask (TOP_SIDE, drawn_area);
+      DrawMask (hid_draw, TOP_SIDE);
       hid_draw_end_layer (hid_draw);
     }
 
   if (hid_draw_set_layer (hid_draw, "soldermask", SL (MASK, BOTTOM), 0))
     {
-      DrawMask (BOTTOM_SIDE, drawn_area);
+      DrawMask (hid_draw, BOTTOM_SIDE);
       hid_draw_end_layer (hid_draw);
     }
 
   if (hid_draw_set_layer (hid_draw, "topsilk", SL (SILK, TOP), 0))
     {
-      DrawSilk (hid_draw, TOP_SIDE, drawn_area);
+      DrawSilk (hid_draw, TOP_SIDE);
       hid_draw_end_layer (hid_draw);
     }
 
   if (hid_draw_set_layer (hid_draw, "bottomsilk", SL (SILK, BOTTOM), 0))
     {
-      DrawSilk (hid_draw, BOTTOM_SIDE, drawn_area);
+      DrawSilk (hid_draw, BOTTOM_SIDE);
       hid_draw_end_layer (hid_draw);
     }
 
@@ -412,12 +412,11 @@ DrawEverything (const BoxType *drawn_area)
     {
       /* Draw element Marks */
       if (PCB->PinOn)
-	r_search (PCB->Data->element_tree, drawn_area, NULL, EMark_callback,
-		  NULL);
+	r_search (PCB->Data->element_tree, hid_draw->clip_box, NULL, EMark_callback, NULL);
       /* Draw rat lines on top */
       if (hid_draw_set_layer (hid_draw, "rats", SL (RATS, 0), 0))
         {
-          DrawRats (hid_draw, drawn_area);
+          DrawRats (hid_draw);
           hid_draw_end_layer (hid_draw);
         }
     }
@@ -425,26 +424,26 @@ DrawEverything (const BoxType *drawn_area)
   paste_empty = IsPasteEmpty (TOP_SIDE);
   if (hid_draw_set_layer (hid_draw, "toppaste", SL (PASTE, TOP), paste_empty))
     {
-      DrawPaste (TOP_SIDE, drawn_area);
+      DrawPaste (hid_draw, TOP_SIDE);
       hid_draw_end_layer (hid_draw);
     }
 
   paste_empty = IsPasteEmpty (BOTTOM_SIDE);
   if (hid_draw_set_layer (hid_draw, "bottompaste", SL (PASTE, BOTTOM), paste_empty))
     {
-      DrawPaste (BOTTOM_SIDE, drawn_area);
+      DrawPaste (hid_draw, BOTTOM_SIDE);
       hid_draw_end_layer (hid_draw);
     }
 
   if (hid_draw_set_layer (hid_draw, "topassembly", SL (ASSY, TOP), 0))
     {
-      PrintAssembly (TOP_SIDE, drawn_area);
+      PrintAssembly (hid_draw, TOP_SIDE);
       hid_draw_end_layer (hid_draw);
     }
 
   if (hid_draw_set_layer (hid_draw, "bottomassembly", SL (ASSY, BOTTOM), 0))
     {
-      PrintAssembly (BOTTOM_SIDE, drawn_area);
+      PrintAssembly (hid_draw, BOTTOM_SIDE);
       hid_draw_end_layer (hid_draw);
     }
 
@@ -527,7 +526,7 @@ pad_mask_callback (const BoxType * b, void *cl)
  */
 
 void
-DrawSilk (HID_DRAW *new_hid_draw, int side, const BoxType * drawn_area)
+DrawSilk (HID_DRAW *new_hid_draw, int side)
 {
   HID_DRAW *old_hid_draw = hid_draw;
   hid_draw = new_hid_draw;
@@ -543,25 +542,25 @@ DrawSilk (HID_DRAW *new_hid_draw, int side, const BoxType * drawn_area)
     {
       hid_draw_use_mask (hid_draw, HID_MASK_BEFORE);
 #endif
-      dapi->draw_layer (LAYER_PTR (max_copper_layer + side), drawn_area, NULL);
+      dapi->draw_layer (LAYER_PTR (max_copper_layer + side), hid_draw->clip_box, NULL);
       /* draw package */
-      r_search (PCB->Data->element_tree, drawn_area, NULL, element_callback, &side);
-      r_search (PCB->Data->name_tree[NAME_INDEX (PCB)], drawn_area, NULL, name_callback, &side);
+      r_search (PCB->Data->element_tree, hid_draw->clip_box, NULL, element_callback, &side);
+      r_search (PCB->Data->name_tree[NAME_INDEX (PCB)], hid_draw->clip_box, NULL, name_callback, &side);
 #if 0
     }
 
   hid_draw_use_mask (hid_draw, HID_MASK_CLEAR);
-  r_search (PCB->Data->pin_tree, drawn_area, NULL, pin_mask_callback, NULL);
-  r_search (PCB->Data->via_tree, drawn_area, NULL, via_mask_callback, NULL);
-  r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_mask_callback, &side);
+  r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, pin_mask_callback, NULL);
+  r_search (PCB->Data->via_tree, hid_draw->clip_box, NULL, via_mask_callback, NULL);
+  r_search (PCB->Data->pad_tree, hid_draw->clip_box, NULL, pad_mask_callback, &side);
 
   if (hid_draw->poly_after)
     {
       hid_draw_use_mask (hid_draw, HID_MASK_AFTER);
-      dapi->draw_layer (LAYER_PTR (max_copper_layer + layer), drawn_area, NULL);
+      dapi->draw_layer (LAYER_PTR (max_copper_layer + layer), hid_draw->clip_box, NULL);
       /* draw package */
-      r_search (PCB->Data->element_tree, drawn_area, NULL, element_callback, &side);
-      r_search (PCB->Data->name_tree[NAME_INDEX (PCB)], drawn_area, NULL, name_callback, &side);
+      r_search (PCB->Data->element_tree, hid_draw->clip_box, NULL, element_callback, &side);
+      r_search (PCB->Data->name_tree[NAME_INDEX (PCB)], hid_draw->clip_box, NULL, name_callback, &side);
     }
   hid_draw_use_mask (hid_draw, HID_MASK_OFF);
 #endif
@@ -571,7 +570,7 @@ DrawSilk (HID_DRAW *new_hid_draw, int side, const BoxType * drawn_area)
 
 
 static void
-DrawMaskBoardArea (int mask_type, const BoxType *drawn_area)
+DrawMaskBoardArea (HID_DRAW *hid_draw, int mask_type)
 {
   /* Skip the mask drawing if the GUI doesn't want this type */
   if ((mask_type == HID_MASK_BEFORE && !hid_draw->poly_before) ||
@@ -580,11 +579,11 @@ DrawMaskBoardArea (int mask_type, const BoxType *drawn_area)
 
   hid_draw_use_mask (hid_draw, mask_type);
   hid_draw_set_color (Output.fgGC, PCB->MaskColor);
-  if (drawn_area == NULL)
+  if (hid_draw->clip_box == NULL)
     hid_draw_fill_rect (Output.fgGC, 0, 0, PCB->MaxWidth, PCB->MaxHeight);
   else
-    hid_draw_fill_rect (Output.fgGC, drawn_area->X1, drawn_area->Y1,
-                                     drawn_area->X2, drawn_area->Y2);
+    hid_draw_fill_rect (Output.fgGC, hid_draw->clip_box->X1, hid_draw->clip_box->Y1,
+                                     hid_draw->clip_box->X2, hid_draw->clip_box->Y2);
 }
 
 struct poly_info {
@@ -640,7 +639,7 @@ mask_text_callback (const BoxType * b, void *cl)
  * draws solder mask layer - this will cover nearly everything
  */
 void
-DrawMask (int side, const BoxType *screen)
+DrawMask (HID_DRAW *hid_draw, int side)
 {
   int thin = TEST_FLAG(THINDRAWFLAG, PCB) || TEST_FLAG(THINDRAWPOLYFLAG, PCB);
   LayerType *Layer = LAYER_PTR (side == TOP_SIDE ? top_soldermask_layer : bottom_soldermask_layer);
@@ -650,26 +649,24 @@ DrawMask (int side, const BoxType *screen)
     hid_draw_set_color (Output.pmGC, PCB->MaskColor);
   else
     {
-      DrawMaskBoardArea (HID_MASK_BEFORE, screen);
+      DrawMaskBoardArea (hid_draw, HID_MASK_BEFORE);
       hid_draw_use_mask (hid_draw, HID_MASK_CLEAR);
     }
 
-  info.layer = Layer;
-  info.drawn_area = screen;
-  r_search (Layer->polygon_tree, screen, NULL, mask_poly_callback, &info);
-  r_search (Layer->line_tree,    screen, NULL, mask_line_callback, Layer);
-  r_search (Layer->arc_tree,     screen, NULL, mask_arc_callback,  Layer);
-  r_search (Layer->text_tree,    screen, NULL, mask_text_callback, Layer);
+  r_search (Layer->polygon_tree, hid_draw->clip_box, NULL, mask_poly_callback, &info);
+  r_search (Layer->line_tree,    hid_draw->clip_box, NULL, mask_line_callback, Layer);
+  r_search (Layer->arc_tree,     hid_draw->clip_box, NULL, mask_arc_callback,  Layer);
+  r_search (Layer->text_tree,    hid_draw->clip_box, NULL, mask_text_callback, Layer);
 
-  r_search (PCB->Data->pin_tree, screen, NULL, pin_mask_callback, NULL);
-  r_search (PCB->Data->via_tree, screen, NULL, via_mask_callback, NULL);
-  r_search (PCB->Data->pad_tree, screen, NULL, pad_mask_callback, &side);
+  r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, pin_mask_callback, NULL);
+  r_search (PCB->Data->via_tree, hid_draw->clip_box, NULL, via_mask_callback, NULL);
+  r_search (PCB->Data->pad_tree, hid_draw->clip_box, NULL, pad_mask_callback, &side);
 
   if (thin)
     hid_draw_set_color (Output.pmGC, "erase");
   else
     {
-      DrawMaskBoardArea (HID_MASK_AFTER, screen);
+      DrawMaskBoardArea (hid_draw, HID_MASK_AFTER);
       hid_draw_use_mask (hid_draw, HID_MASK_OFF);
     }
 }
@@ -678,7 +675,7 @@ DrawMask (int side, const BoxType *screen)
  * draws solder paste layer for a given side of the board
  */
 void
-DrawPaste (int side, const BoxType *drawn_area)
+DrawPaste (HID_DRAW *hid_draw, int side)
 {
   hid_draw_set_color (Output.fgGC, PCB->ElementColor);
   ALLPAD_LOOP (PCB->Data);
@@ -690,11 +687,8 @@ DrawPaste (int side, const BoxType *drawn_area)
 }
 
 /* static */ void
-DrawRats (HID_DRAW *new_hid_draw, const BoxType *drawn_area)
+DrawRats (HID_DRAW *hid_draw)
 {
-  HID_DRAW *old_hid_draw = hid_draw;
-  hid_draw = new_hid_draw;
-
   /*
    * XXX lesstif allows positive AND negative drawing in HID_MASK_CLEAR.
    * XXX gtk only allows negative drawing.
@@ -703,11 +697,9 @@ DrawRats (HID_DRAW *new_hid_draw, const BoxType *drawn_area)
 
   if (hid_draw_can_draw_in_mask_clear (hid_draw))
     hid_draw_use_mask (hid_draw, HID_MASK_CLEAR);
-  r_search (PCB->Data->rat_tree, drawn_area, NULL, rat_callback, NULL);
+  r_search (PCB->Data->rat_tree, hid_draw->clip_box, NULL, rat_callback, NULL);
   if (hid_draw_can_draw_in_mask_clear (hid_draw))
     hid_draw_use_mask (hid_draw, HID_MASK_OFF);
-
-  hid_draw = old_hid_draw;
 }
 
 /* ---------------------------------------------------------------------------
@@ -715,7 +707,7 @@ DrawRats (HID_DRAW *new_hid_draw, const BoxType *drawn_area)
  * also draws the pins / pads / vias in this layer group.
  */
 void
-DrawLayerGroup (int group, const BoxType *drawn_area)
+DrawLayerGroup (HID_DRAW *hid_draw, int group)
 {
   int i, rv = 1;
   int layernum;
@@ -731,13 +723,13 @@ DrawLayerGroup (int group, const BoxType *drawn_area)
           strcmp (Layer->Name, "route") == 0)
         rv = 0;
       if (layernum < max_copper_layer && Layer->On)
-        dapi->draw_layer (Layer, drawn_area, NULL);
+        dapi->draw_layer (Layer, hid_draw->clip_box, NULL);
     }
   if (n_entries > 1)
     rv = 1;
 
   if (rv && !hid_draw_is_gui (hid_draw))
-    dapi->draw_ppv (group, drawn_area, NULL);
+    dapi->draw_ppv (group, hid_draw->clip_box, NULL);
 }
 
 static void
@@ -1256,9 +1248,10 @@ draw_element (ElementType *element)
  */
 
 void
-hid_expose_callback (HID_DRAW *expose_hid_draw, BoxType *region, void *item)
+hid_expose_callback (HID_DRAW *expose_hid_draw, void *item)
 {
   hid_draw = expose_hid_draw;
+
   Output.fgGC = hid_draw_make_gc (hid_draw);
   Output.bgGC = hid_draw_make_gc (hid_draw);
   Output.pmGC = hid_draw_make_gc (hid_draw);
@@ -1273,7 +1266,7 @@ hid_expose_callback (HID_DRAW *expose_hid_draw, BoxType *region, void *item)
       doing_pinout = false;
     }
   else
-    DrawEverything (region);
+    DrawEverything (hid_draw->clip_box);
 
   hid_draw_destroy_gc (Output.fgGC);
   hid_draw_destroy_gc (Output.bgGC);
diff --git a/src/draw.h b/src/draw.h
index bae0cd8..5c70583 100644
--- a/src/draw.h
+++ b/src/draw.h
@@ -66,11 +66,11 @@ void EraseElementPinsAndPads (ElementType *);
 void EraseElementName (ElementType *);
 void EraseObject (int, void *, void *);
 
-void DrawLayerGroup (int side, const BoxType *drawn_area);
-void DrawPaste (int side, const BoxType *drawn_area);
-void DrawSilk (HID_DRAW *hid_draw, int side, const BoxType *drawn_area);
-void DrawMask (int side, const BoxType *drawn_area);
-void PrintAssembly (int side, const BoxType *drawn_area);
+void DrawLayerGroup (HID_DRAW *hid_draw, int side);
+void DrawPaste (HID_DRAW *hid_draw, int side);
+void DrawSilk (HID_DRAW *hid_draw, int side);
+void DrawMask (HID_DRAW *hid_draw, int side);
+void PrintAssembly (HID_DRAW *hid_draw, int side);
 
 /* TEMPORARY */
 void ClearPad (PadType *, bool);
@@ -80,7 +80,7 @@ void DrawPlainVia (PinType *, bool);
 void DrawRegularText (LayerType *, TextType *);
 void DrawEMark (ElementType *, Coord, Coord, bool);
 void DrawHole (PinType *);
-void DrawRats (HID_DRAW *hid_draw, const BoxType *);
+void DrawRats (HID_DRAW *hid_draw);
 /* TEMPORARY */
 
 #endif
diff --git a/src/hid.h b/src/hid.h
index 580e47e..f453dbb 100644
--- a/src/hid.h
+++ b/src/hid.h
@@ -532,7 +532,7 @@ typedef enum
 
    Do *not* assume that the hid that is passed is the GUI hid.  This
    callback is also used for printing and exporting. */
-  void hid_expose_callback (HID_DRAW *hid_draw, struct BoxType *region_, void *item_);
+  void hid_expose_callback (HID_DRAW *hid_draw, void *item_);
 
 /* This is initially set to a "no-gui" gui, and later reset by
    main. hid_expose_callback also temporarily set it for drawing. */
diff --git a/src/hid/common/draw_helpers.c b/src/hid/common/draw_helpers.c
index 923aa9f..872ff8b 100644
--- a/src/hid/common/draw_helpers.c
+++ b/src/hid/common/draw_helpers.c
@@ -205,6 +205,7 @@ fill_contour_cb (PLINE *pl, void *user_data)
 static void
 fill_clipped_contour (hidGC gc, PLINE *pl, const BoxType *clip_box)
 {
+  HID_DRAW *hid_draw = gc->hid_draw;
   PLINE *pl_copy;
   POLYAREA *clip_poly;
   POLYAREA *piece_poly;
@@ -212,8 +213,8 @@ fill_clipped_contour (hidGC gc, PLINE *pl, const BoxType *clip_box)
   POLYAREA *draw_piece;
   int x;
 
-  clip_poly = RectPoly (clip_box->X1, clip_box->X2,
-                        clip_box->Y1, clip_box->Y2);
+  clip_poly = RectPoly (hid_draw->clip_box->X1, hid_draw->clip_box->X2,
+                        hid_draw->clip_box->Y1, hid_draw->clip_box->Y2);
   poly_CopyContour (&pl_copy, pl);
   piece_poly = poly_Create ();
   poly_InclContour (piece_poly, pl_copy);
@@ -287,13 +288,15 @@ common_gui_draw_pcb_polygon (hidGC gc, PolygonType *polygon, const BoxType *clip
       for (poly.Clipped = polygon->Clipped->f;
            poly.Clipped != polygon->Clipped;
            poly.Clipped = poly.Clipped->f)
-        hid_draw__thin_pcb_polygon (gc, &poly, clip_box);
+        hid_draw__thin_pcb_polygon (gc, &poly, gc->hid_draw->clip_box);
     }
 }
 
 void
 common_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 {
+  HID_DRAW *hid_draw = gc->hid_draw;
+
   if (poly->Clipped == NULL)
     return;
 
@@ -303,10 +306,10 @@ common_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
        * NoHoles version and cache it for later rendering, otherwise
        * just compute what we need to render now.
        */
-      if (should_compute_no_holes (poly, clip_box))
+      if (should_compute_no_holes (poly, hid_draw->clip_box))
         ComputeNoHoles (poly);
       else
-        NoHolesPolygonDicer (poly, clip_box, fill_contour_cb, gc);
+        NoHolesPolygonDicer (poly, hid_draw->clip_box, fill_contour_cb, gc);
     }
   if (poly->NoHolesValid && poly->NoHoles)
     {
@@ -314,10 +317,10 @@ common_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 
       for (pl = poly->NoHoles; pl != NULL; pl = pl->next)
         {
-          if (clip_box == NULL)
+          if (hid_draw->clip_box == NULL)
             fill_contour (gc, pl);
           else
-            fill_clipped_contour (gc, pl, clip_box);
+            fill_clipped_contour (gc, pl, hid_draw->clip_box);
         }
     }
 
@@ -330,7 +333,7 @@ common_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
       for (p.Clipped = poly->Clipped->f;
            p.Clipped != poly->Clipped;
            p.Clipped = p.Clipped->f)
-        NoHolesPolygonDicer (&p, clip_box, fill_contour_cb, gc);
+        NoHolesPolygonDicer (&p, hid_draw->clip_box, fill_contour_cb, gc);
     }
 }
 
@@ -346,11 +349,13 @@ void
 common_thindraw_pcb_polygon (hidGC gc, PolygonType *poly,
                              const BoxType *clip_box)
 {
+  HID_DRAW *hid_draw = gc->hid_draw;
+
   if (poly->Clipped == NULL)
     return;
 
   thindraw_contour (gc, poly->Clipped->contours);
-  PolygonHoles (poly, clip_box, thindraw_hole_cb, gc);
+  PolygonHoles (poly, hid_draw->clip_box, thindraw_hole_cb, gc);
 
   /* Draw other parts of the polygon if fullpoly flag is set */
   if (TEST_FLAG (FULLPOLYFLAG, poly))
@@ -362,7 +367,7 @@ common_thindraw_pcb_polygon (hidGC gc, PolygonType *poly,
            p.Clipped = p.Clipped->f)
         {
           thindraw_contour (gc, p.Clipped->contours);
-          PolygonHoles (&p, clip_box, thindraw_hole_cb, gc);
+          PolygonHoles (&p, hid_draw->clip_box, thindraw_hole_cb, gc);
         }
     }
 }
diff --git a/src/hid/common/extents.c b/src/hid/common/extents.c
index d145915..58949c4 100644
--- a/src/hid/common/extents.c
+++ b/src/hid/common/extents.c
@@ -226,7 +226,7 @@ hid_get_extents (void *item)
   region.Y2 = COORD_MAX;
 
   common_set_clip_box (&extents_graphics, &region);
-  hid_expose_callback (&extents_graphics, &region, item);
+  hid_expose_callback (&extents_graphics, item);
 
   return &box;
 }
diff --git a/src/hid/common/hidgl.c b/src/hid/common/hidgl.c
index b8409e3..f65293a 100644
--- a/src/hid/common/hidgl.c
+++ b/src/hid/common/hidgl.c
@@ -293,7 +293,7 @@ hidgl_set_depth (hidGC gc, float depth)
 }
 
 void
-hidgl_draw_grid (hidGC gc, BoxType *drawn_area)
+hidgl_draw_grid (hidGC gc)
 {
   hidglGC hidgl_gc = (hidglGC)gc;
   HID_DRAW *hid_draw = gc->hid_draw;
@@ -914,7 +914,7 @@ polygon_contains_user_holes (PolygonType *polygon)
 }
 
 static void
-fill_polyarea (hidGC gc, POLYAREA *pa, const BoxType *clip_box, bool use_new_stencil)
+fill_polyarea (hidGC gc, POLYAREA *pa, bool use_new_stencil)
 {
   HID_DRAW *hid_draw = gc->hid_draw;
   hidgl_priv *priv = hid_draw->priv;
@@ -970,7 +970,7 @@ fill_polyarea (hidGC gc, POLYAREA *pa, const BoxType *clip_box, bool use_new_ste
 
   /* Drawing operations now set our reference bit in the stencil buffer */
 
-  r_search (pa->contour_tree, clip_box, NULL, do_hole, gc);
+  r_search (pa->contour_tree, hid_draw->clip_box, NULL, do_hole, gc);
   hidgl_flush_triangles (hid_draw);
 
   glPopAttrib ();                                   /* Restore the colour and stencil buffer write-mask etc.. */
@@ -998,7 +998,7 @@ fill_polyarea (hidGC gc, POLYAREA *pa, const BoxType *clip_box, bool use_new_ste
 }
 
 void
-hidgl_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
+hidgl_fill_pcb_polygon (hidGC gc, PolygonType *poly)
 {
   bool use_new_stencil;
 
@@ -1008,14 +1008,14 @@ hidgl_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
   use_new_stencil = polygon_contains_user_holes (poly) ||
                     TEST_FLAG (FULLPOLYFLAG, poly);
 
-  fill_polyarea (gc, poly->Clipped, clip_box, use_new_stencil);
+  fill_polyarea (gc, poly->Clipped, use_new_stencil);
 
   if (TEST_FLAG (FULLPOLYFLAG, poly))
     {
       POLYAREA *pa;
 
       for (pa = poly->Clipped->f; pa != poly->Clipped; pa = pa->f)
-        fill_polyarea (gc, pa, clip_box, use_new_stencil);
+        fill_polyarea (gc, pa, use_new_stencil);
     }
 }
 
diff --git a/src/hid/common/hidgl.h b/src/hid/common/hidgl.h
index a4fe876..042476b 100644
--- a/src/hid/common/hidgl.h
+++ b/src/hid/common/hidgl.h
@@ -147,14 +147,14 @@ hidgl_add_triangle (hidGC gc,
                              x3, y3, hidgl_gc->depth);
 }
 
-void hidgl_draw_grid (hidGC gc, BoxType *drawn_area);
+void hidgl_draw_grid (hidGC gc);
 void hidgl_set_depth (hidGC gc, float depth);
 void hidgl_draw_line (hidGC gc, int cap, Coord width, Coord x1, Coord y1, Coord x2, Coord y2, double scale);
 void hidgl_draw_arc (hidGC gc, Coord width, Coord vx, Coord vy, Coord vrx, Coord vry, Angle start_angle, Angle delta_angle, double scale);
 void hidgl_draw_rect (hidGC gc, Coord x1, Coord y1, Coord x2, Coord y2);
 void hidgl_fill_circle (hidGC gc, Coord vx, Coord vy, Coord vr);
 void hidgl_fill_polygon (hidGC gc, int n_coords, Coord *x, Coord *y);
-void hidgl_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box);
+void hidgl_fill_pcb_polygon (hidGC gc, PolygonType *poly);
 void hidgl_fill_rect (hidGC gc, Coord x1, Coord y1, Coord x2, Coord y2);
 
 void hidgl_init (void);
diff --git a/src/hid/common/hidnogui.c b/src/hid/common/hidnogui.c
index f82c498..71c518f 100644
--- a/src/hid/common/hidnogui.c
+++ b/src/hid/common/hidnogui.c
@@ -143,7 +143,7 @@ nogui_fill_polygon (hidGC gc, int n_coords, Coord *x, Coord *y)
 }
 
 static void
-nogui_draw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
+nogui_draw_pcb_polygon (hidGC gc, PolygonType *poly)
 {
   CRASH;
 }
diff --git a/src/hid/gcode/gcode.c b/src/hid/gcode/gcode.c
index 2ec69e5..c47d133 100644
--- a/src/hid/gcode/gcode.c
+++ b/src/hid/gcode/gcode.c
@@ -472,7 +472,7 @@ gcode_start_png_export ()
   lastbrush = (gdImagePtr)((void *) -1);
 
   common_set_clip_box (&gcode_graphics, &region);
-  hid_expose_callback (&gcode_graphics, &region, 0);
+  hid_expose_callback (&gcode_graphics, 0);
 }
 
 static FILE *
diff --git a/src/hid/gerber/gerber.c b/src/hid/gerber/gerber.c
index ab1c2ed..4ef080e 100644
--- a/src/hid/gerber/gerber.c
+++ b/src/hid/gerber/gerber.c
@@ -685,11 +685,11 @@ gerber_do_export (HID_Attr_Val * options)
 
   common_set_clip_box (&gerber_graphics, &region);
 
-  hid_expose_callback (&gerber_graphics, &region, 0);
+  hid_expose_callback (&gerber_graphics, 0);
 
   layer_list_idx = 0;
   finding_apertures = 0;
-  hid_expose_callback (&gerber_graphics, &region, 0);
+  hid_expose_callback (&gerber_graphics, 0);
 
   memcpy (LayerStack, saved_layer_stack, sizeof (LayerStack));
 
@@ -913,12 +913,12 @@ gerber_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
       && strcmp (name, "outline")
       && strcmp (name, "route"))
     {
+      hidGC gc = hid_draw_make_gc (&gerber_graphics);
       if (outline_layer
 	  && outline_layer != PCB->Data->Layer+idx)
-	dapi->draw_layer (outline_layer, &region, NULL);
+	dapi->draw_layer (outline_layer, gerber_graphics.clip_box, NULL);
       else if (!outline_layer)
 	{
-	  hidGC gc = hid_draw_make_gc (&gerber_graphics);
 	  printf("name %s idx %d\n", name, idx);
 	  if (SL_TYPE (idx) == SL_SILK)
 	    hid_draw_set_line_width (gc, PCB->minSlk);
@@ -930,8 +930,8 @@ gerber_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
 	  hid_draw_line (gc, 0, 0, 0, PCB->MaxHeight);
 	  hid_draw_line (gc, PCB->MaxWidth, 0, PCB->MaxWidth, PCB->MaxHeight);
 	  hid_draw_line (gc, 0, PCB->MaxHeight, PCB->MaxWidth, PCB->MaxHeight);
-	  hid_draw_destroy_gc (gc);
 	}
+      hid_draw_destroy_gc (gc);
     }
 
   return 1;
diff --git a/src/hid/gtk/gtkhid-gdk.c b/src/hid/gtk/gtkhid-gdk.c
index 7cebfe7..2bfb003 100644
--- a/src/hid/gtk/gtkhid-gdk.c
+++ b/src/hid/gtk/gtkhid-gdk.c
@@ -15,7 +15,8 @@
 #endif
 
 extern HID ghid_hid;
-extern HID_DRAW ghid_graphics;
+HID_DRAW ghid_graphics;
+extern HID_DRAW_CLASS ghid_graphics_class;
 
 /* Sets priv->u_gc to the "right" GC to use (wrt mask or window)
 */
@@ -861,7 +862,7 @@ redraw_region (GdkRectangle *rect)
   ghid_draw_bg_image();
 
   common_set_clip_box (&ghid_graphics, &region);
-  hid_expose_callback (&ghid_graphics, &region, 0);
+  hid_expose_callback (&ghid_graphics, 0);
   ghid_draw_grid ();
 
   /* In some cases we are called with the crosshair still off */
@@ -1112,6 +1113,14 @@ draw_crosshair (render_priv *priv)
 void
 ghid_init_renderer (int *argc, char ***argv, GHidPort *port)
 {
+  /* Init ghid_graphics HID_DRAW instance */
+  memset (&ghid_graphics, 0, sizeof (HID_DRAW));
+
+  ghid_graphics.klass = &ghid_graphics_class;
+  ghid_graphics.poly_after = true;
+  common_nogui_graphics_init (&ghid_graphics);
+  common_draw_helpers_init (&ghid_graphics);
+
   /* Init any GC's required */
   port->render_priv = g_new0 (render_priv, 1);
   port->render_priv->crosshair_gc = hid_draw_make_gc (&ghid_graphics);
@@ -1239,7 +1248,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
                       0, 0, allocation.width, allocation.height);
 
   /* call the drawing routine */
-  hid_expose_callback (&ghid_graphics, NULL, pinout->element);
+  hid_expose_callback (&ghid_graphics, pinout->element);
 
   gport->drawable = save_drawable;
   gport->view = save_view;
@@ -1297,7 +1306,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   region.Y2 = MAX (0, MIN (PCB->MaxHeight, region.Y2));
 
   common_set_clip_box (&ghid_graphics, &region);
-  hid_expose_callback (&ghid_graphics, &region, NULL);
+  hid_expose_callback (&ghid_graphics, NULL);
 
   gport->drawable = save_drawable;
   gport->view = save_view;
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index 7b4006a..b4be3a5 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -403,7 +403,7 @@ ghid_make_gc (HID_DRAW *hid_draw)
 }
 
 static void
-ghid_draw_grid (hidGC gc, BoxType *drawn_area)
+ghid_draw_grid (hidGC gc)
 {
   if (Vz (PCB->Grid) < MIN_GRID_DISTANCE)
     return;
@@ -425,7 +425,7 @@ ghid_draw_grid (hidGC gc, BoxType *drawn_area)
              gport->grid_color.green / 65535.,
              gport->grid_color.blue / 65535.);
 
-  hidgl_draw_grid (gc, drawn_area);
+  hidgl_draw_grid (gc);
 
   glDisable (GL_COLOR_LOGIC_OP);
   glEnable (GL_STENCIL_TEST);
@@ -884,18 +884,19 @@ ghid_fill_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 {
   USE_GC (gc);
 
-  hidgl_fill_pcb_polygon (gc, poly, clip_box);
+  hidgl_fill_pcb_polygon (gc, poly);
 }
 
 void
 ghid_thindraw_pcb_polygon (hidGC gc, PolygonType *poly, const BoxType *clip_box)
 {
+  HID_DRAW *hid_draw = gc->hid_draw;
   gtkGC gtk_gc = (gtkGC)gc;
 
   double old_alpha_mult = gtk_gc->alpha_mult;
-  common_thindraw_pcb_polygon (gc, poly, clip_box);
+  common_thindraw_pcb_polygon (gc, poly, hid_draw->clip_box);
   ghid_set_alpha_mult (gc, gtk_gc->alpha_mult * 0.25);
-  hid_draw__fill_pcb_polygon (gc, poly, clip_box);
+  hid_draw__fill_pcb_polygon (gc, poly, hid_draw->clip_box);
   ghid_set_alpha_mult (gc, old_alpha_mult);
 }
 
@@ -1040,6 +1041,7 @@ static void
 draw_crosshair (hidGC gc, render_priv *priv)
 {
   gtkGC gtk_gc = (gtkGC)gc;
+
   gint x, y, z;
   static int done_once = 0;
   static GdkColor cross_color;
@@ -1242,13 +1244,13 @@ set_pv_inlayer_color (PinType *pv, LayerType *layer, int type)
   else if (TEST_FLAG (FOUNDFLAG, pv))     hid_draw_set_color (Output.fgGC, PCB->FoundColor);
   else
     {
-      int top_group = GetLayerGroupNumberBySide (TOP_SIDE);
+      int top_group    = GetLayerGroupNumberBySide (TOP_SIDE);
       int bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
-      int this_group      = GetLayerGroupNumberByPointer (layer);
+      int this_group   = GetLayerGroupNumberByPointer (layer);
 
       if (this_group == top_group || this_group == bottom_group)
         hid_draw_set_color (Output.fgGC, (SWAP_IDENT == (this_group == bottom_group)) ?
-                                         PCB->ViaColor : PCB->InvisibleObjectsColor);
+                                          PCB->ViaColor : PCB->InvisibleObjectsColor);
       else
         hid_draw_set_color (Output.fgGC, layer->Color);
     }
@@ -1641,19 +1643,20 @@ ensure_board_outline (void)
 }
 
 static void
-fill_board_outline (hidGC gc, const BoxType *drawn_area)
+fill_board_outline (hidGC gc)
 {
+  HID_DRAW *hid_draw = gc->hid_draw;
   PolygonType polygon;
 
   ensure_board_outline ();
 
   memset (&polygon, 0, sizeof (polygon));
   polygon.Clipped = PCB->Data->outline;
-  if (drawn_area)
-    polygon.BoundingBox = *drawn_area;
+  if (gc->hid_draw->clip_box)
+    polygon.BoundingBox = *hid_draw->clip_box;
   polygon.Flags = NoFlags ();
   SET_FLAG (FULLPOLYFLAG, &polygon);
-  hid_draw__fill_pcb_polygon (gc, &polygon, drawn_area);
+  hid_draw__fill_pcb_polygon (gc, &polygon, hid_draw->clip_box);
   poly_FreeContours (&polygon.NoHoles);
 }
 
@@ -1695,7 +1698,7 @@ fill_outline_hole_cb (PLINE *pl, void *user_data)
 }
 
 static void
-fill_board_outline_holes (hidGC gc, const BoxType *drawn_area)
+fill_board_outline_holes (hidGC gc)
 {
   render_priv *priv = gport->render_priv;
   PolygonType polygon, p;
@@ -1705,8 +1708,8 @@ fill_board_outline_holes (hidGC gc, const BoxType *drawn_area)
 
   memset (&polygon, 0, sizeof (polygon));
   polygon.Clipped = PCB->Data->outline;
-  if (drawn_area)
-    polygon.BoundingBox = *drawn_area;
+  if (gc->hid_draw->clip_box)
+    polygon.BoundingBox = *gc->hid_draw->clip_box;
   polygon.Flags = NoFlags ();
   SET_FLAG (FULLPOLYFLAG, &polygon);
 
@@ -1714,7 +1717,7 @@ fill_board_outline_holes (hidGC gc, const BoxType *drawn_area)
 
   p = polygon;
   do {
-    PolygonHoles (&p, drawn_area, fill_outline_hole_cb, &info);
+    PolygonHoles (&p, gc->hid_draw->clip_box, fill_outline_hole_cb, &info);
   } while ((p.Clipped = p.Clipped->f) != polygon.Clipped);
 
 //  poly_FreeContours (&polygon.NoHoles);
@@ -1723,7 +1726,7 @@ fill_board_outline_holes (hidGC gc, const BoxType *drawn_area)
 }
 
 static void
-GhidDrawMask (int side, BoxType * screen)
+GhidDrawMask (HID_DRAW *hid_draw, int side)
 {
 //  static bool first_run = true;
 //  static GLuint texture;
@@ -1737,24 +1740,22 @@ GhidDrawMask (int side, BoxType * screen)
     {
       hid_draw_set_line_width (Output.pmGC, 0);
       hid_draw_set_color (Output.pmGC, PCB->MaskColor);
-      r_search (PCB->Data->pin_tree, screen, NULL, clearPin_callback, NULL);
-      r_search (PCB->Data->via_tree, screen, NULL, clearPin_callback, NULL);
-      r_search (PCB->Data->pad_tree, screen, NULL, clearPad_callback, &side);
+      r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, clearPin_callback, NULL);
+      r_search (PCB->Data->via_tree, hid_draw->clip_box, NULL, clearPin_callback, NULL);
+      r_search (PCB->Data->pad_tree, hid_draw->clip_box, NULL, clearPad_callback, &side);
       hid_draw_set_color (Output.pmGC, "erase");
     }
 
   hid_draw_use_mask (&ghid_graphics, HID_MASK_CLEAR);
 
-  info.layer = Layer;
-  info.drawn_area = screen;
-  r_search (Layer->polygon_tree, screen, NULL, poly_callback, &info);
-  r_search (Layer->line_tree, screen, NULL, line_callback, Layer);
-  r_search (Layer->arc_tree, screen, NULL, arc_callback, Layer);
-  r_search (Layer->text_tree, screen, NULL, text_callback, Layer);
+  r_search (Layer->polygon_tree, hid_draw->clip_box, NULL, poly_callback, &info);
+  r_search (Layer->line_tree,    hid_draw->clip_box, NULL, line_callback, Layer);
+  r_search (Layer->arc_tree,     hid_draw->clip_box, NULL, arc_callback,  Layer);
+  r_search (Layer->text_tree,    hid_draw->clip_box, NULL, text_callback, Layer);
 
-  r_search (PCB->Data->pin_tree, screen, NULL, clearPin_callback_solid, NULL);
-  r_search (PCB->Data->via_tree, screen, NULL, clearPin_callback_solid, NULL);
-  r_search (PCB->Data->pad_tree, screen, NULL, clearPad_callback_solid, &side);
+  r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, clearPin_callback_solid, NULL);
+  r_search (PCB->Data->via_tree, hid_draw->clip_box, NULL, clearPin_callback_solid, NULL);
+  r_search (PCB->Data->pad_tree, hid_draw->clip_box, NULL, clearPad_callback_solid, &side);
 
   hid_draw_use_mask (&ghid_graphics, HID_MASK_AFTER);
   hid_draw_set_color (out->fgGC, PCB->MaskColor);
@@ -1795,15 +1796,15 @@ GhidDrawMask (int side, BoxType * screen)
 
   memset (&polygon, 0, sizeof (polygon));
   polygon.Clipped = PCB->Data->outline;
-  if (screen)
-    polygon.BoundingBox = *screen;
+  if (hid_draw->clip_box)
+    polygon.BoundingBox = *hid_draw->clip_box;
   polygon.Flags = NoFlags ();
   SET_FLAG (FULLPOLYFLAG, &polygon);
-  hid_draw__fill_pcb_polygon (out->fgGC, &polygon, screen);
+  hid_draw__fill_pcb_polygon (out->fgGC, &polygon, hid_draw->clip_box);
   poly_FreeContours (&polygon.NoHoles);
 #endif
 
-  fill_board_outline (out->fgGC, screen);
+  fill_board_outline (out->fgGC);
 
   ghid_set_alpha_mult (out->fgGC, 1.0);
 //  hidgl_flush_triangles (priv->hid_draw);
@@ -1863,9 +1864,10 @@ outline_hole_cb (PLINE *pl, void *user_data)
 }
 
 static void
-ghid_draw_outline_between_layers (int from_layer, int to_layer, BoxType *drawn_area)
+ghid_draw_outline_between_layers (int from_layer, int to_layer)
 {
   render_priv *priv = gport->render_priv;
+  HID_DRAW *hid_draw = priv->hid_draw;
   PolygonType polygon, p;
   struct outline_info info;
 
@@ -1873,8 +1875,8 @@ ghid_draw_outline_between_layers (int from_layer, int to_layer, BoxType *drawn_a
 
   memset (&polygon, 0, sizeof (polygon));
   polygon.Clipped = PCB->Data->outline;
-  if (drawn_area)
-    polygon.BoundingBox = *drawn_area;
+  if (hid_draw->clip_box)
+    polygon.BoundingBox = *hid_draw->clip_box;
   polygon.Flags = NoFlags ();
   SET_FLAG (FULLPOLYFLAG, &polygon);
 
@@ -1885,18 +1887,19 @@ ghid_draw_outline_between_layers (int from_layer, int to_layer, BoxType *drawn_a
   p = polygon;
   do {
     draw_outline_contour (info.gc, p.Clipped->contours, info.z1, info.z2);
-    PolygonHoles (&p, drawn_area, outline_hole_cb, &info);
+    PolygonHoles (&p, hid_draw->clip_box, outline_hole_cb, &info);
   } while ((p.Clipped = p.Clipped->f) != polygon.Clipped);
 
   poly_FreeContours (&polygon.NoHoles);
 
-  hidgl_flush_triangles (priv->hid_draw);
+  hidgl_flush_triangles (hid_draw);
 }
 
 static int
-GhidDrawLayerGroup (int group, const BoxType * screen)
+GhidDrawLayerGroup (hidGC gc, int group)
 {
   render_priv *priv = gport->render_priv;
+  HID_DRAW *hid_draw = gc->hid_draw;
   int i;
   int layernum;
   int side;
@@ -1934,9 +1937,9 @@ GhidDrawLayerGroup (int group, const BoxType * screen)
         glColorMask (0, 0, 0, 0);
         glDepthMask (GL_FALSE);
         hid_draw_set_color (Output.bgGC, PCB->MaskColor);
-        if (PCB->PinOn) r_search (PCB->Data->pin_tree, screen, NULL, hole_callback, NULL);
-        if (PCB->ViaOn) r_search (PCB->Data->via_tree, screen, NULL, hole_callback, NULL);
-        fill_board_outline_holes (Output.bgGC, screen);
+        if (PCB->PinOn) r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, hole_callback, NULL);
+        if (PCB->ViaOn) r_search (PCB->Data->via_tree, hid_draw->clip_box, NULL, hole_callback, NULL);
+        fill_board_outline_holes (Output.bgGC);
         hidgl_flush_triangles (priv->hid_draw);
         glPopAttrib ();
       }
@@ -1944,9 +1947,9 @@ GhidDrawLayerGroup (int group, const BoxType * screen)
       /* draw all polygons on this layer */
       if (Layer->PolygonN) {
         info.layer = Layer;
-        info.drawn_area = screen;
-        r_search (Layer->polygon_tree, screen, NULL, poly_callback_no_clear, &info);
-        r_search (Layer->polygon_tree, screen, NULL, poly_callback_clearing, &info);
+        info.drawn_area = hid_draw->clip_box;
+        r_search (Layer->polygon_tree, hid_draw->clip_box, NULL, poly_callback_no_clear, &info);
+        r_search (Layer->polygon_tree, hid_draw->clip_box, NULL, poly_callback_clearing, &info);
 
         /* HACK: Subcomposite polygons separately from other layer primitives */
         /* Reset the compositing */
@@ -1959,9 +1962,9 @@ GhidDrawLayerGroup (int group, const BoxType * screen)
           glColorMask (0, 0, 0, 0);
           glDepthMask (GL_FALSE);
           /* Mask out drilled holes on this layer */
-          if (PCB->PinOn) r_search (PCB->Data->pin_tree, screen, NULL, hole_callback, NULL);
-          if (PCB->ViaOn) r_search (PCB->Data->via_tree, screen, NULL, hole_callback, NULL);
-          fill_board_outline_holes (Output.bgGC, screen);
+          if (PCB->PinOn) r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, hole_callback, NULL);
+          if (PCB->ViaOn) r_search (PCB->Data->via_tree, hid_draw->clip_box, NULL, hole_callback, NULL);
+          fill_board_outline_holes (Output.bgGC);
           hidgl_flush_triangles (priv->hid_draw);
           glPopAttrib ();
         }
@@ -1971,27 +1974,27 @@ GhidDrawLayerGroup (int group, const BoxType * screen)
       if (!global_view_2d && !is_outline) {
         if (PCB->PinOn &&
             (group == bottom_group || group == top_group))
-          r_search (PCB->Data->pin_tree, screen, NULL, pin_name_callback, Layer);
-        if (PCB->PinOn) r_search (PCB->Data->pin_tree, screen, NULL, pin_inlayer_callback, Layer);
-        if (PCB->ViaOn) r_search (PCB->Data->via_tree, screen, NULL, via_inlayer_callback, Layer);
+          r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, pin_name_callback, Layer);
+        if (PCB->PinOn) r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, pin_inlayer_callback, Layer);
+        if (PCB->ViaOn) r_search (PCB->Data->via_tree, hid_draw->clip_box, NULL, via_inlayer_callback, Layer);
         if (PCB->PinOn && group == top_group)
           {
             side = TOP_SIDE;
-            r_search (PCB->Data->pad_tree, screen, NULL, pad_callback, &side);
+            r_search (PCB->Data->pad_tree, hid_draw->clip_box, NULL, pad_callback, &side);
           }
         if (PCB->PinOn && group == bottom_group)
           {
             side = BOTTOM_SIDE;
-            r_search (PCB->Data->pad_tree, screen, NULL, pad_callback, &side);
+            r_search (PCB->Data->pad_tree, hid_draw->clip_box, NULL, pad_callback, &side);
           }
       }
 
       if (TEST_FLAG (CHECKPLANESFLAG, PCB))
         continue;
 
-      r_search (Layer->line_tree, screen, NULL, line_callback, Layer);
-      r_search (Layer->arc_tree, screen, NULL, arc_callback, Layer);
-      r_search (Layer->text_tree, screen, NULL, text_callback, Layer);
+      r_search (Layer->line_tree, hid_draw->clip_box, NULL, line_callback, Layer);
+      r_search (Layer->arc_tree,  hid_draw->clip_box, NULL, arc_callback,  Layer);
+      r_search (Layer->text_tree, hid_draw->clip_box, NULL, text_callback, Layer);
     }
   }
 
@@ -2136,9 +2139,10 @@ ghid_draw_packages (BoxType *drawn_area)
 }
 
 void
-ghid_draw_everything (BoxType *drawn_area)
+ghid_draw_everything (void)
 {
   render_priv *priv = gport->render_priv;
+  HID_DRAW *hid_draw = priv->hid_draw;
   int i, ngroups;
   int number_phys_on_top;
   int side;
@@ -2206,10 +2210,10 @@ ghid_draw_everything (BoxType *drawn_area)
 
   if (!TEST_FLAG (CHECKPLANESFLAG, PCB) &&
       hid_draw_set_layer (&ghid_graphics, "invisible", SL (INVISIBLE, 0), 0)) {
-    DrawSilk (&ghid_graphics, side, drawn_area);
+    DrawSilk (&ghid_graphics, side);
 
     if (global_view_2d)
-      r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_callback, &side);
+      r_search (PCB->Data->pad_tree, hid_draw->clip_box, NULL, pad_callback, &side);
 
     hid_draw_end_layer (&ghid_graphics);
 
@@ -2217,7 +2221,7 @@ ghid_draw_everything (BoxType *drawn_area)
     if (!global_view_2d &&
         hid_draw_set_layer (&ghid_graphics, SWAP_IDENT ? "componentmask" : "soldermask",
                         SWAP_IDENT ? SL (MASK, TOP) : SL (MASK, BOTTOM), 0)) {
-        GhidDrawMask (side, drawn_area);
+        GhidDrawMask (&ghid_graphics, side);
         hid_draw_end_layer (&ghid_graphics);
       }
   }
@@ -2239,7 +2243,7 @@ ghid_draw_everything (BoxType *drawn_area)
       number_phys_on_top --;
 
     ghid_set_alpha_mult (Output.fgGC, alpha_mult);
-    GhidDrawLayerGroup (drawn_groups [i], drawn_area);
+    GhidDrawLayerGroup (Output.fgGC, drawn_groups [i]);
 
 #if 1
     if (!global_view_2d && is_this_physical && is_next_physical) {
@@ -2248,9 +2252,9 @@ ghid_draw_everything (BoxType *drawn_area)
       cyl_info.scale = gport->view.coord_per_px;
       hid_draw_set_color (Output.fgGC, "drill");
       ghid_set_alpha_mult (Output.fgGC, alpha_mult * 0.75);
-      ghid_draw_outline_between_layers (cyl_info.from_layer, cyl_info.to_layer, drawn_area);
-      if (PCB->PinOn) r_search (PCB->Data->pin_tree, drawn_area, NULL, pin_hole_cyl_callback, &cyl_info);
-      if (PCB->ViaOn) r_search (PCB->Data->via_tree, drawn_area, NULL, via_hole_cyl_callback, &cyl_info);
+      ghid_draw_outline_between_layers (cyl_info.from_layer, cyl_info.to_layer);
+      if (PCB->PinOn) r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, pin_hole_cyl_callback, &cyl_info);
+      if (PCB->ViaOn) r_search (PCB->Data->via_tree, hid_draw->clip_box, NULL, via_hole_cyl_callback, &cyl_info);
     }
 #endif
   }
@@ -2265,7 +2269,7 @@ ghid_draw_everything (BoxType *drawn_area)
 
   /* Draw pins, pads, vias below silk */
   if (global_view_2d) {
-    start_subcomposite (priv->hid_draw);
+    start_subcomposite (hid_draw);
 
     if (!TEST_FLAG (THINDRAWFLAG, PCB)) {
       /* Mask out drilled holes */
@@ -2273,40 +2277,40 @@ ghid_draw_everything (BoxType *drawn_area)
       glPushAttrib (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
       glColorMask (0, 0, 0, 0);
       glDepthMask (GL_FALSE);
-      if (PCB->PinOn) r_search (PCB->Data->pin_tree, drawn_area, NULL, hole_callback, NULL);
-      if (PCB->ViaOn) r_search (PCB->Data->via_tree, drawn_area, NULL, hole_callback, NULL);
-      fill_board_outline_holes (Output.bgGC, drawn_area);
+      if (PCB->PinOn) r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, hole_callback, NULL);
+      if (PCB->ViaOn) r_search (PCB->Data->via_tree, hid_draw->clip_box, NULL, hole_callback, NULL);
+      fill_board_outline_holes (Output.bgGC);
       hidgl_flush_triangles (priv->hid_draw);
       glPopAttrib ();
     }
 
-    if (PCB->PinOn) r_search (PCB->Data->pad_tree, drawn_area, NULL, pad_callback, &side);
-    if (PCB->PinOn) r_search (PCB->Data->pin_tree, drawn_area, NULL, pin_callback, NULL);
-    if (PCB->ViaOn) r_search (PCB->Data->via_tree, drawn_area, NULL, via_callback, NULL);
+    if (PCB->PinOn) r_search (PCB->Data->pad_tree, hid_draw->clip_box, NULL, pad_callback, &side);
+    if (PCB->PinOn) r_search (PCB->Data->pin_tree, hid_draw->clip_box, NULL, pin_callback, NULL);
+    if (PCB->ViaOn) r_search (PCB->Data->via_tree, hid_draw->clip_box, NULL, via_callback, NULL);
 
-    end_subcomposite (priv->hid_draw);
+    end_subcomposite (hid_draw);
   }
 
   /* Draw the solder mask if turned on */
   if (hid_draw_set_layer (&ghid_graphics, SWAP_IDENT ? "soldermask" : "componentmask",
                       SWAP_IDENT ? SL (MASK, BOTTOM) : SL (MASK, TOP), 0)) {
-    GhidDrawMask (side, drawn_area);
+    GhidDrawMask (&ghid_graphics, side);
     hid_draw_end_layer (&ghid_graphics);
   }
 
   if (hid_draw_set_layer (&ghid_graphics, SWAP_IDENT ? "bottomsilk" : "topsilk",
                       SWAP_IDENT ? SL (SILK, BOTTOM) : SL (SILK, TOP), 0)) {
-      DrawSilk (&ghid_graphics, side, drawn_area);
+      DrawSilk (&ghid_graphics, side);
       hid_draw_end_layer (&ghid_graphics);
   }
 
   /* Draw element Marks */
   if (PCB->PinOn)
-    r_search (PCB->Data->element_tree, drawn_area, NULL, EMark_callback, NULL);
+    r_search (PCB->Data->element_tree, hid_draw->clip_box, NULL, EMark_callback, NULL);
 
   /* Draw rat lines on top */
-  if (PCB->RatOn && hid_draw_set_layer (&ghid_graphics, "rats", SL (RATS, 0), 0)) {
-    DrawRats (&ghid_graphics, drawn_area);
+  if (PCB->RatOn && hid_draw_set_layer (hid_draw, "rats", SL (RATS, 0), 0)) {
+    DrawRats (&ghid_graphics);
     hid_draw_end_layer (&ghid_graphics);
   }
 
@@ -2581,8 +2585,8 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
   ghid_draw_bg_image ();
 
   common_set_clip_box (priv->hid_draw, &region);
-  /* hid_expose_callback (priv->hid_draw, &region, 0); */
-  ghid_draw_everything (&region);
+  /* hid_expose_callback (priv->hid_draw, 0); */
+  ghid_draw_everything ();
   hidgl_flush_triangles (priv->hid_draw);
 
   glTexCoord2f (0., 0.);
@@ -2629,7 +2633,7 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
   priv->edit_depth = compute_depth (GetLayerGroupNumberByNumber (INDEXOFCURRENT));
   hidgl_set_depth (Output.fgGC, priv->edit_depth);
 
-  ghid_draw_grid (Output.fgGC, &region);
+  ghid_draw_grid (Output.fgGC);
 
   ghid_invalidate_current_gc ();
 
@@ -2848,7 +2852,7 @@ ghid_pinout_preview_expose (GtkWidget *widget,
                 gport->view.flip_y ? gport->view.y0 - PCB->MaxHeight :
                                     -gport->view.y0, 0);
 
-  hid_expose_callback (hid_draw, NULL, pinout->element);
+  hid_expose_callback (hid_draw, pinout->element);
   hidgl_flush_triangles (priv->hid_draw);
   glPopMatrix ();
 
@@ -2877,7 +2881,6 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   view_data save_view;
   int save_width, save_height;
   BoxType region;
-  HID_DRAW *hid_draw = priv->hid_draw;
 
   save_view = gport->view;
   save_width = gport->width;
@@ -2972,7 +2975,7 @@ ghid_render_pixmap (int cx, int cy, double zoom, int width, int height, int dept
   region.Y2 = MAX (0, MIN (PCB->MaxHeight, region.Y2));
 
   common_set_clip_box (priv->hid_draw, &region);
-  hid_expose_callback (priv->hid_draw, &region, NULL);
+  hid_expose_callback (priv->hid_draw, NULL);
   hidgl_flush_triangles (priv->hid_draw);
   glPopMatrix ();
 
diff --git a/src/hid/lesstif/main.c b/src/hid/lesstif/main.c
index 6ff5efd..ad3b3b8 100644
--- a/src/hid/lesstif/main.c
+++ b/src/hid/lesstif/main.c
@@ -836,7 +836,7 @@ Benchmark (int argc, char **argv, Coord x, Coord y)
   do
     {
       XFillRectangle (display, pixmap, bg_gc, 0, 0, view_width, view_height);
-      hid_expose_callback (&lesstif_graphics, &region, 0);
+      hid_expose_callback (&lesstif_graphics, 0);
       XSync (display, 0);
       time (&end);
       i++;
@@ -2587,7 +2587,7 @@ idle_proc (XtPointer dummy)
       common_set_clip_box (&lesstif_graphics, &region);
 
       DrawBackgroundImage();
-      hid_expose_callback (&lesstif_graphics, &region, 0);
+      hid_expose_callback (&lesstif_graphics, 0);
       draw_grid ();
       lesstif_use_mask (&lesstif_graphics, HID_MASK_OFF);
       show_crosshair (0); /* To keep the drawn / not drawn info correct */
@@ -3814,7 +3814,7 @@ pinout_callback (Widget da, PinoutData * pd,
   XFillRectangle (display, pixmap, bg_gc, 0, 0, pd->v_width, pd->v_height);
 
   common_set_clip_box (&lesstif_graphics, &region);
-  hid_expose_callback (&lesstif_graphics, &region, pd->item);
+  hid_expose_callback (&lesstif_graphics, pd->item);
 
   pinout = 0;
   view_left_x = save_vx;
diff --git a/src/hid/nelma/nelma.c b/src/hid/nelma/nelma.c
index a9e854bd..55e88bd 100644
--- a/src/hid/nelma/nelma.c
+++ b/src/hid/nelma/nelma.c
@@ -650,7 +650,7 @@ nelma_start_png_export()
 	lastbrush = (gdImagePtr)((void *) -1);
 
 	common_set_clip_box (&nelma_graphics, &region);
-	hid_expose_callback(&nelma_graphics, &region, 0);
+	hid_expose_callback (&nelma_graphics, 0);
 }
 
 static void 
diff --git a/src/hid/png/png.c b/src/hid/png/png.c
index b582198..f11e313 100644
--- a/src/hid/png/png.c
+++ b/src/hid/png/png.c
@@ -656,7 +656,7 @@ png_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
     }
 
   common_set_clip_box (&png_graphics, bounds);
-  hid_expose_callback (&png_graphics, bounds, 0);
+  hid_expose_callback (&png_graphics, 0);
 
   memcpy (LayerStack, saved_layer_stack, sizeof (LayerStack));
   PCB->Flags = save_flags;
diff --git a/src/hid/ps/eps.c b/src/hid/ps/eps.c
index 63b7337..d7cc194 100644
--- a/src/hid/ps/eps.c
+++ b/src/hid/ps/eps.c
@@ -300,7 +300,7 @@ eps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 	   "/a { gsave setlinewidth translate scale 0 0 1 5 3 roll arc stroke grestore} bind def\n");
 
   common_set_clip_box (&eps_graphics, bounds);
-  hid_expose_callback (&eps_graphics, bounds, 0);
+  hid_expose_callback (&eps_graphics, 0);
 
   fprintf (f, "showpage\n");
 
diff --git a/src/hid/ps/ps.c b/src/hid/ps/ps.c
index d3720d9..85ab8f5 100644
--- a/src/hid/ps/ps.c
+++ b/src/hid/ps/ps.c
@@ -399,8 +399,6 @@ static struct {
 
   double scale_factor;
 
-  BoxType region;
-
   HID_Attr_Val ps_values[NUM_OPTIONS];
 
   bool is_mask;
@@ -598,6 +596,7 @@ ps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
   int i;
   static int saved_layer_stack[MAX_LAYER];
   FlagType save_thindraw;
+  BoxType region;
 
   save_thindraw = PCB->Flags;
   CLEAR_FLAG(THINDRAWFLAG, PCB);
@@ -678,12 +677,12 @@ ps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
   ps_set_layer (&ps_graphics, NULL, 0, -1);
   use_gc (NULL);
 
-  global.region.X1 = 0;
-  global.region.Y1 = 0;
-  global.region.X2 = PCB->MaxWidth;
-  global.region.Y2 = PCB->MaxHeight;
+  region.X1 = 0;
+  region.Y1 = 0;
+  region.X2 = PCB->MaxWidth;
+  region.Y2 = PCB->MaxHeight;
 
-  common_set_clip_box (&ps_graphics, &global.region);
+  common_set_clip_box (&ps_graphics, &region);
 
   if (!global.multi_file)
     {
@@ -696,13 +695,13 @@ ps_hid_export_to_file (FILE * the_file, HID_Attr_Val * options)
 
       global.doing_toc = 1;
       global.pagecount = 1;  /* 'pagecount' is modified by hid_expose_callback() call */
-      hid_expose_callback (&ps_graphics, &global.region, 0);
+      hid_expose_callback (&ps_graphics, 0);
     }
 
   global.pagecount = 1; /* Reset 'pagecount' if single file */
   global.doing_toc = 0;
   ps_set_layer (&ps_graphics, NULL, 0, -1);  /* reset static vars */
-  hid_expose_callback (&ps_graphics, &global.region, 0);
+  hid_expose_callback (&ps_graphics, 0);
 
   if (the_file)
     fprintf (the_file, "showpage\n");
@@ -1010,7 +1009,7 @@ ps_set_layer (HID_DRAW *hid_draw, const char *name, int group, int empty)
       strcmp (name, "route") != 0
       )
     {
-      dapi->draw_layer (global.outline_layer, &global.region, NULL);
+      dapi->draw_layer (global.outline_layer, hid_draw->clip_box, NULL);
     }
 
   return 1;
