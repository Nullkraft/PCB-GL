Bottom: b1a8d956c3f2c1ad1bea4322d1efd46d61c5c8fd
Top:    f988203c11a34d85a294079d55f25ad4b8689f23
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-05 21:32:09 +0000

Dangling fixup from old way of emitting board contours


---

diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index 769b7a5..6c1178f 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -259,8 +259,70 @@ object3d_from_board_outline (void)
 
   /* Loop over all board outline pieces */
   pa = board_outline;
-  do
-    {
+  do {
+
+    contour = pa->contours;
+    ncontours = 0;
+    npoints = 0;
+
+    ct = contour;
+    while (ct != NULL) {
+      ncontours ++;
+      npoints += get_contour_npoints (ct);
+      ct = ct->next;
+    }
+
+    board_object = make_object3d (PCB->Name);
+    board_appearance = make_appearance ();
+    top_bot_appearance = make_appearance ();
+    appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
+    appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
+
+    object3d_set_appearance (board_object, board_appearance);
+
+    vertices = malloc (sizeof (vertex3d *) * 2 * npoints); /* (n-bottom, n-top) */
+    edges    = malloc (sizeof (edge_ref  ) * 3 * npoints); /* (n-bottom, n-top, n-sides) */
+    faces    = malloc (sizeof (face3d *) * (npoints + 2)); /* (n-sides, 1-bottom, 1-top */
+
+    /* Define the vertices */
+    ct = contour;
+    offset_in_ct = 0;
+    ct_npoints = get_contour_npoints (ct);
+
+    for (i = 0; i < npoints; i++, offset_in_ct++) {
+      double x1, y1;
+
+      /* Update which contour we're looking at */
+      if (offset_in_ct == ct_npoints) {
+        offset_in_ct = 0;
+        ct = ct->next;
+        ct_npoints = get_contour_npoints (ct);
+      }
+
+      get_contour_coord_n_in_step_mm (ct, offset_in_ct, &x1, &y1);
+
+#ifdef REVERSED_PCB_CONTOURS
+      vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS)); /* Bottom */
+      vertices[npoints + i] = make_vertex3d (x1, y1, 0);                                            /* Top */
+#else
+      vertices[i]           = make_vertex3d (x1, y1,  COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS) / 2.); /* Bottom */
+      vertices[npoints + i] = make_vertex3d (x1, y1, -COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS) / 2.); /* Top */
+#endif
+
+      object3d_add_vertex (board_object, vertices[i]);
+      object3d_add_vertex (board_object, vertices[npoints + i]);
+    }
+
+    /* Define the edges */
+    for (i = 0; i < 3 * npoints; i++) {
+      edges[i] = make_edge ();
+      UNDIR_DATA (edges[i]) = make_edge_info ();
+      object3d_add_edge (board_object, edges[i]);
+    }
+
+    /* Define the faces */
+    for (i = 0; i < npoints; i++) {
+      faces[i] = make_face3d ();
 
       contour = pa->contours;
       ncontours = 0;
@@ -334,15 +396,23 @@ object3d_from_board_outline (void)
 #endif
         }
 
-      faces[npoints] = make_face3d (); /* bottom_face */
-      face3d_set_normal (faces[npoints], 0., 0., -1.);
-      face3d_set_appearance (faces[npoints], top_bot_appearance);
-      object3d_add_face (object, faces[npoints]);
+    faces[npoints] = make_face3d (); /* bottom_face */
+#ifdef REVERSED_PCB_CONTOURS
+    face3d_set_normal (faces[npoints], 0., 0., -1.);
+#else
+    face3d_set_normal (faces[npoints], 0., 0., 1.);
+#endif
+    face3d_set_appearance (faces[npoints], top_bot_appearance);
+    object3d_add_face (board_object, faces[npoints]);
 
-      faces[npoints + 1] = make_face3d (); /* top_face */
-      face3d_set_normal (faces[npoints + 1], 0., 0., 1.);
-      face3d_set_appearance (faces[npoints + 1], top_bot_appearance);
-      object3d_add_face (object, faces[npoints + 1]);
+    faces[npoints + 1] = make_face3d (); /* top_face */
+#ifdef REVERSED_PCB_CONTOURS
+    face3d_set_normal (faces[npoints + 1], 0., 0., 1.);
+#else
+    face3d_set_normal (faces[npoints + 1], 0., 0., -1.);
+#endif
+    face3d_set_appearance (faces[npoints + 1], top_bot_appearance);
+    object3d_add_face (board_object, faces[npoints + 1]);
 
       /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
 #ifdef REVERSED_PCB_CONTOURS
@@ -461,11 +531,11 @@ object3d_from_board_outline (void)
                                    0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
 #else
               edge_info_set_round (UNDIR_DATA (edges[i]),
-                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), COORD_TO_STEP_Z (PCB, -HACK_BOARD_THICKNESS), /* Center of circle */
-                                   0., 0., -1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
+                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy),  COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS) / 2., /* Center of circle */ /* BOTTOM */
+                                   0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
               edge_info_set_round (UNDIR_DATA (edges[npoints + i]),
-                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), 0., /* Center of circle */
-                                   0., 0., -1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
+                                   COORD_TO_STEP_X (PCB, ct->cx), COORD_TO_STEP_Y (PCB, ct->cy), COORD_TO_STEP_Z (PCB, -HACK_BOARD_THICKNESS) / 2. , /* Center of circle */ /* TOP */
+                                   0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
 #endif
               edge_info_set_stitch (UNDIR_DATA (edges[2 * npoints + i]));
             }
