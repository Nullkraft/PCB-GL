Bottom: 91340eaea02c93cdbbe7f14e8c33c90f49ce4242
Top:    d650821e2d23132d1ac65651fe2e76598d562188
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 20:31:13 +0000

Add action to set netclass


---

diff --git a/src/netlist.c b/src/netlist.c
index 7114ae0..73dd42e 100644
--- a/src/netlist.c
+++ b/src/netlist.c
@@ -241,19 +241,17 @@ netlist_style (LibraryMenuType *net, const char *style)
   net->Style = STRDUP ((char *)style);
 }
 
-#if 0
 static void
 netlist_netclass (LibraryMenuType *net, const char *netclass)
 {
   free (net->Netclass);
-  net->Style = STRDUP ((char *)netclass);
+  net->Netclass = STRDUP ((char *)netclass);
 }
-#endif
 
 /* The primary purpose of this action is to rebuild a netlist from a
    script, in conjunction with the clear action above.  */
 static int
-netlist_add (const char *netname, const char *pinname, const char *netclass)
+netlist_add (const char *netname, const char *pinname)
 {
   int ni, pi;
   LibraryType *netlist = &PCB->NetlistLib;
@@ -268,12 +266,7 @@ netlist_add (const char *netname, const char *pinname, const char *netclass)
       }
   if (net == NULL)
     {
-      net = CreateNewNet (netlist, (char *)netname, NULL, (char *)netclass); /* XXX: Only takes class from the first net */
-    }
-  else
-    {
-      if (strcmp (net->Netclass, netclass) != 0)
-        g_warning ("Netclass '%s' different to initial '%s'... being ignored", netclass, net->Netclass);
+      net = CreateNewNet (netlist, (char *)netname, NULL, NULL);
     }
 
   for (pi=0; pi<net->EntryN; pi++)
@@ -398,10 +391,12 @@ Netlist (int argc, char **argv, Coord x, Coord y)
     }
   else if (strcasecmp (argv[0], "style") == 0)
     func = (NFunc)netlist_style;
+  else if (strcasecmp (argv[0], "class") == 0)
+    func = (NFunc)netlist_netclass;
   else if (strcasecmp (argv[0], "add") == 0)
     {
       /* Add is different, because the net/pin won't already exist.  */
-      return netlist_add (ARG(1), ARG(2), NULL); /* Net class? */
+      return netlist_add (ARG(1), ARG(2)); /* Net class? */
     }
   else if (strcasecmp (argv[0], "sort") == 0)
     {
@@ -504,6 +499,10 @@ Netlist (int argc, char **argv, Coord x, Coord y)
 	{
 	  netlist_style (net, ARG(2));
 	}
+      else if (func == (void *)netlist_netclass)
+	{
+	  netlist_netclass (net, ARG(2));
+	}
       else if (argc > 2)
 	{
 	  int l = strlen (argv[2]);
@@ -513,7 +512,7 @@ Netlist (int argc, char **argv, Coord x, Coord y)
 		    && net->Entry[j].ListEntry[l] == '-'))
 	      {
 		pin = net->Entry + j;
-		pin_found = 1;
+	pin_found = 1;
 		func (net, pin);
 	      }
 	}
diff --git a/tools/gnet-pcbfwd.scm b/tools/gnet-pcbfwd.scm
index 29274a6..9067978 100644
--- a/tools/gnet-pcbfwd.scm
+++ b/tools/gnet-pcbfwd.scm
@@ -49,10 +49,16 @@
 	(format port "Netlist(Add,~a,~a)~%" net (pcbfwd:pinfmt pin))
 	(pcbfwd:each-pin net (cdr pins) port))))
 
+(define (pcbfwd:net-class netname port)
+  (let ((netclass (gnetlist:get-net-class netname)))
+  (if (not (null? netclass))
+    (format port "Netlist(Class,~a,~a)~%" netname netclass))))
+
 (define (pcbfwd:each-net netnames port)
   (if (not (null? netnames))
       (let ((netname (car netnames)))
 	(pcbfwd:each-pin netname (gnetlist:get-all-connections netname) port)
+	(pcbfwd:net-class netname port)
 	(pcbfwd:each-net (cdr netnames) port))))
 
 (define (pcbfwd:each-attr refdes attrs port)
