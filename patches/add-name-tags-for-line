Bottom: 375c41de40364dadde360992ac7d18d44b0bc3b0
Top:    da7eff7a9c4cc24f148c7fcaaf078ec709b61359
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-18 20:46:25 +0000

Add name tags for line contours (and provide partial support for arcs)


---

diff --git a/src/find.c b/src/find.c
index 99d243a..2b6496f 100644
--- a/src/find.c
+++ b/src/find.c
@@ -2359,7 +2359,7 @@ IsArcInPolygon (ArcType *Arc, PolygonType *Polygon)
     {
       POLYAREA *ap;
 
-      if (!(ap = ArcPoly (Arc, Arc->Thickness + Bloat)))
+      if (!(ap = ArcPoly (Arc, Arc->Thickness + Bloat, NULL)))
         return false;           /* error */
       return isects (ap, Polygon, true);
     }
@@ -2401,7 +2401,7 @@ IsLineInPolygon (LineType *Line, PolygonType *Polygon)
       && Box->Y1 <= Polygon->Clipped->contours->ymax + Bloat
       && Box->Y2 >= Polygon->Clipped->contours->ymin - Bloat)
     {
-      if (!(lp = LinePoly (Line, Line->Thickness + Bloat)))
+      if (!(lp = LinePoly (Line, Line->Thickness + Bloat, NULL)))
         return FALSE;           /* error */
       return isects (lp, Polygon, true);
     }
diff --git a/src/polygon.c b/src/polygon.c
index 77d24ca..0e2c670 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -508,7 +508,7 @@ RoundRect (Coord x1, Coord x2, Coord y1, Coord y2, Coord t)
 
 #define ARC_ANGLE 5
 static POLYAREA *
-ArcPolyNoIntersect (ArcType * a, Coord thick)
+ArcPolyNoIntersect (ArcType * a, Coord thick, char *name)
 {
   PLINE *contour = NULL;
   POLYAREA *np = NULL;
@@ -545,6 +545,7 @@ ArcPolyNoIntersect (ArcType * a, Coord thick)
   v[1] = a->Y + ry * sin (ang * M180);
   if ((contour = poly_NewContour (poly_CreateNode (v))) == NULL)
     return 0;
+  contour->name = name;
   for (i = 0; i < segs - 1; i++)
     {
       ang += da;
@@ -582,7 +583,7 @@ ArcPolyNoIntersect (ArcType * a, Coord thick)
 
 #define MIN_CLEARANCE_BEFORE_BISECT 10.
 POLYAREA *
-ArcPoly (ArcType * a, Coord thick)
+ArcPoly (ArcType * a, Coord thick, char *name)
 {
   double delta;
   ArcType seg1, seg2;
@@ -602,17 +603,17 @@ ArcPoly (ArcType * a, Coord thick)
       seg2.Delta -= half_delta;
       seg2.StartAngle += half_delta;
 
-      tmp1 = ArcPolyNoIntersect (&seg1, thick);
-      tmp2 = ArcPolyNoIntersect (&seg2, thick);
+      tmp1 = ArcPolyNoIntersect (&seg1, thick, name);
+      tmp2 = ArcPolyNoIntersect (&seg2, thick, name);
       poly_Boolean_free (tmp1, tmp2, &res, PBO_UNITE);
       return res;
     }
 
-  return ArcPolyNoIntersect (a, thick);
+  return ArcPolyNoIntersect (a, thick, name);
 }
 
 POLYAREA *
-LinePoly (LineType * L, Coord thick)
+LinePoly (LineType * L, Coord thick, char *name)
 {
   PLINE *contour = NULL;
   POLYAREA *np = NULL;
@@ -628,7 +629,7 @@ LinePoly (LineType * L, Coord thick)
           SQUARE (l->Point1.Y - l->Point2.Y));
   if (!TEST_FLAG (SQUAREFLAG,l))
     if (d == 0)                   /* line is a point */
-      return CirclePoly (l->Point1.X, l->Point1.Y, half, NULL);
+      return CirclePoly (l->Point1.X, l->Point1.Y, half, name);
   if (d != 0)
     {
       d = half / d;
@@ -652,6 +653,7 @@ LinePoly (LineType * L, Coord thick)
   v[1] = l->Point2.Y - dy;
   if ((contour = poly_NewContour (poly_CreateNode (v))) == NULL)
     return 0;
+  contour->name = name;
 
   if (TEST_FLAG (SQUAREFLAG,l))
     {
@@ -862,7 +864,7 @@ SubtractLine (LineType * line, PolygonType * p)
 
   if (!TEST_FLAG (CLEARLINEFLAG, line))
     return 0;
-  if (!(np = LinePoly (line, line->Thickness + line->Clearance)))
+  if (!(np = LinePoly (line, line->Thickness + line->Clearance, NULL)))
     return -1;
   return Subtract (np, p, true);
 }
@@ -874,7 +876,7 @@ SubtractArc (ArcType * arc, PolygonType * p)
 
   if (!TEST_FLAG (CLEARLINEFLAG, arc))
     return 0;
-  if (!(np = ArcPoly (arc, arc->Thickness + arc->Clearance)))
+  if (!(np = ArcPoly (arc, arc->Thickness + arc->Clearance, NULL)))
     return -1;
   return Subtract (np, p, true);
 }
@@ -909,7 +911,7 @@ SubtractPad (PadType * pad, PolygonType * p)
   else
     {
       if (!
-          (np = LinePoly ((LineType *) pad, pad->Thickness + pad->Clearance)))
+          (np = LinePoly ((LineType *) pad, pad->Thickness + pad->Clearance, NULL)))
         return -1;
     }
   return Subtract (np, p, true);
@@ -1035,7 +1037,7 @@ line_sub_callback (const BoxType * b, void *cl)
     return 0;
   polygon = info->polygon;
 
-  if (!(np = LinePoly (line, line->Thickness + line->Clearance)))
+  if (!(np = LinePoly (line, line->Thickness + line->Clearance, NULL)))
     longjmp (info->env, 1);
 
   poly_Boolean_free (info->accumulate, np, &merged, PBO_UNITE);
@@ -2043,8 +2045,11 @@ arc_outline_callback (const BoxType * b, void *cl)
   ArcType *arc = (ArcType *)b;
   struct clip_outline_info *info = cl;
   POLYAREA *np, *res;
+  char *feature_name;
 
-  if (!(np = ArcPoly (arc, ROUTER_THICKNESS)))
+  feature_name = NULL; /* XXX: PCB does not have any concept of naming arcs */
+
+  if (!(np = ArcPoly (arc, ROUTER_THICKNESS, feature_name)))
     return 0;
 
   poly_Boolean_free (info->poly, np, &res, PBO_SUB);
@@ -2059,8 +2064,11 @@ line_outline_callback (const BoxType * b, void *cl)
   LineType *line = (LineType *)b;
   struct clip_outline_info *info = cl;
   POLYAREA *np, *res;
+  char *feature_name;
+
+  feature_name = STRDUP(line->Number);
 
-  if (!(np = LinePoly (line, ROUTER_THICKNESS)))
+  if (!(np = LinePoly (line, ROUTER_THICKNESS, feature_name)))
     return 0;
 
   poly_Boolean_free (info->poly, np, &res, PBO_SUB);
diff --git a/src/polygon.h b/src/polygon.h
index e07c133..3737f35 100644
--- a/src/polygon.h
+++ b/src/polygon.h
@@ -71,8 +71,8 @@ POLYAREA * PolygonToPoly (PolygonType *);
 POLYAREA * RectPoly (Coord x1, Coord x2, Coord y1, Coord y2);
 POLYAREA * CirclePoly (Coord x, Coord y, Coord radius, char *name);
 POLYAREA * OctagonPoly(Coord x, Coord y, Coord radius);
-POLYAREA * LinePoly(LineType *l, Coord thick);
-POLYAREA * ArcPoly(ArcType *l, Coord thick);
+POLYAREA * LinePoly(LineType *l, Coord thick, char *name);
+POLYAREA * ArcPoly(ArcType *l, Coord thick, char *name);
 POLYAREA * PinPoly(PinType *l, Coord thick, Coord clear);
 POLYAREA * BoxPolyBloated (BoxType *box, Coord radius);
 void frac_circle (PLINE *, Coord, Coord, Vector, int);
diff --git a/src/thermal.c b/src/thermal.c
index e004bf3..8980836 100644
--- a/src/thermal.c
+++ b/src/thermal.c
@@ -206,26 +206,26 @@ square_therm (PinType *pin, Cardinal style)
         l.Point1.X = pin->X - d;
         l.Point2.Y = l.Point1.Y = pin->Y + out;
         l.Point2.X = pin->X + d;
-        p = LinePoly (&l, in);
+        p = LinePoly (&l, in, NULL);
         /* right */
         l.Point1.X = l.Point2.X = pin->X + out;
         l.Point1.Y = pin->Y - d;
         l.Point2.Y = pin->Y + d;
-        p2 = LinePoly (&l, in);
+        p2 = LinePoly (&l, in, NULL);
         p->f = p2;
         p2->b = p;
         /* bottom */
         l.Point1.X = pin->X - d;
         l.Point2.Y = l.Point1.Y = pin->Y - out;
         l.Point2.X = pin->X + d;
-        p2 = LinePoly (&l, in);
+        p2 = LinePoly (&l, in, NULL);
         p->f->f = p2;
         p2->b = p->f;
         /* left */
         l.Point1.X = l.Point2.X = pin->X - out;
         l.Point1.Y = pin->Y - d;
         l.Point2.Y = pin->Y + d;
-        p2 = LinePoly (&l, in);
+        p2 = LinePoly (&l, in, NULL);
         p->f->f->f = p2;
         p2->b = p->f->f;
         p->b = p2;
@@ -462,23 +462,23 @@ ThermPoly (PCBType *p, PinType *pin, Cardinal laynum)
         90 -
         (a.Clearance * (1. + 2. * pcb->ThermScale) * 180) / (M_PI * a.Width);
       a.StartAngle = 90 - a.Delta / 2 + (style == 4 ? 0 : 45);
-      pa = ArcPoly (&a, a.Clearance);
+      pa = ArcPoly (&a, a.Clearance, NULL);
       if (!pa)
         return NULL;
       a.StartAngle += 90;
-      arc = ArcPoly (&a, a.Clearance);
+      arc = ArcPoly (&a, a.Clearance, NULL);
       if (!arc)
         return NULL;
       pa->f = arc;
       arc->b = pa;
       a.StartAngle += 90;
-      arc = ArcPoly (&a, a.Clearance);
+      arc = ArcPoly (&a, a.Clearance, NULL);
       if (!arc)
         return NULL;
       pa->f->f = arc;
       arc->b = pa->f;
       a.StartAngle += 90;
-      arc = ArcPoly (&a, a.Clearance);
+      arc = ArcPoly (&a, a.Clearance, NULL);
       if (!arc)
         return NULL;
       pa->b = arc;
