Bottom: 2bc6c9ae8676fbeb8a35b5d0e84e37e8167e021c
Top:    ff7f4e84f8bf88783619ba9d17c30bb14b57ccef
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-01-10 23:58:59 +0000

Attempt to fix GTK hid zooming/panning/flipping


---

diff --git a/src/hid/common/trackball.c b/src/hid/common/trackball.c
index c4b8501..7691e77 100644
--- a/src/hid/common/trackball.c
+++ b/src/hid/common/trackball.c
@@ -299,7 +299,7 @@ normalize_quat(float q[4])
  *
  */
 void
-build_rotmatrix(float m[4][4], float q[4])
+build_rotmatrix(double m[4][4], float q[4])
 {
     m[0][0] = 1.0f - 2.0f * (q[1] * q[1] + q[2] * q[2]);
     m[0][1] = 2.0f * (q[0] * q[1] - q[2] * q[3]);
diff --git a/src/hid/common/trackball.h b/src/hid/common/trackball.h
index ed0c267..6713b11 100644
--- a/src/hid/common/trackball.h
+++ b/src/hid/common/trackball.h
@@ -66,7 +66,7 @@ add_quats(float *q1, float *q2, float *dest);
  * given quaternion.
  */
 void
-build_rotmatrix(float m[4][4], float q[4]);
+build_rotmatrix(double m[4][4], float q[4]);
 
 /*
  * This function computes a quaternion based on an axis (defined by
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index c67fbd1..4ac2518 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -50,11 +50,11 @@ static hidGC current_gc = NULL;
 #define USE_GC(gc) if (!use_gc(gc)) return
 
 static enum mask_mode cur_mask = HID_MASK_OFF;
-static GLfloat view_matrix[4][4] = {{1.0, 0.0, 0.0, 0.0},
+static GLdouble view_matrix[4][4] = {{1.0, 0.0, 0.0, 0.0},
                                     {0.0, 1.0, 0.0, 0.0},
                                     {0.0, 0.0, 1.0, 0.0},
                                     {0.0, 0.0, 0.0, 1.0}};
-static GLfloat last_modelview_matrix[4][4] = {{1.0, 0.0, 0.0, 0.0},
+static GLdouble last_modelview_matrix[4][4] = {{1.0, 0.0, 0.0, 0.0},
                                               {0.0, 1.0, 0.0, 0.0},
                                               {0.0, 0.0, 1.0, 0.0},
                                               {0.0, 0.0, 0.0, 1.0}};
@@ -909,7 +909,7 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
   glMatrixMode (GL_MODELVIEW);
   glLoadIdentity ();
   glTranslatef (widget->allocation.width / 2., widget->allocation.height / 2., 0);
-  glMultMatrixf ((GLfloat *)view_matrix);
+  glMultMatrixd ((GLdouble *)view_matrix);
   glTranslatef (-widget->allocation.width / 2., -widget->allocation.height / 2., 0);
   glScalef ((port->view.flip_x ? -1. : 1.) / port->view.coord_per_px,
             (port->view.flip_y ? -1. : 1.) / port->view.coord_per_px,
@@ -918,7 +918,7 @@ ghid_drawing_area_expose_cb (GtkWidget *widget,
                                     -port->view.x0,
                 port->view.flip_y ?  port->view.y0 - PCB->MaxHeight :
                                     -port->view.y0, 0);
-  glGetFloatv (GL_MODELVIEW_MATRIX, (GLfloat *)last_modelview_matrix);
+  glGetDoublev (GL_MODELVIEW_MATRIX, (GLdouble *)last_modelview_matrix);
 
   glEnable (GL_STENCIL_TEST);
   glClearColor (port->offlimits_color.red / 65535.,
@@ -1368,10 +1368,10 @@ ghid_finish_debug_draw (void)
   ghid_end_drawing (gport, gport->drawing_area);
 }
 
-static float
-determinant_2x2 (float m[2][2])
+static double
+determinant_2x2 (double m[2][2])
 {
-  float det;
+  double det;
   det = m[0][0] * m[1][1] -
         m[0][1] * m[1][0];
   return det;
@@ -1399,9 +1399,9 @@ determinant_4x4 (float m[4][4])
 #endif
 
 static void
-invert_2x2 (float m[2][2], float out[2][2])
+invert_2x2 (double m[2][2], double out[2][2])
 {
-  float scale = 1 / determinant_2x2 (m);
+  double scale = 1 / determinant_2x2 (m);
   out[0][0] =  m[1][1] * scale;
   out[0][1] = -m[0][1] * scale;
   out[1][0] = -m[1][0] * scale;
@@ -1469,9 +1469,9 @@ invert_4x4 (float m[4][4], float out[4][4])
 static void
 ghid_unproject_to_z_plane (int ex, int ey, Coord pcb_z, Coord *pcb_x, Coord *pcb_y)
 {
-  float mat[2][2];
-  float inv_mat[2][2];
-  float x, y;
+  double mat[2][2];
+  double inv_mat[2][2];
+  double x, y;
 
   /*
     ex = view_matrix[0][0] * vx +
@@ -1499,11 +1499,11 @@ ghid_unproject_to_z_plane (int ex, int ey, Coord pcb_z, Coord *pcb_x, Coord *pcb
   */
 
   /* NB: last_modelview_matrix is transposed in memory! */
-  x = (float)ex - last_modelview_matrix[3][0] * 1
-                - last_modelview_matrix[2][0] * pcb_z;
+  x = (double)ex - last_modelview_matrix[3][0] * 1.
+                 - last_modelview_matrix[2][0] * pcb_z;
 
-  y = (float)ey - last_modelview_matrix[3][1] * 1
-                - last_modelview_matrix[2][1] * pcb_z;
+  y = (double)ey - last_modelview_matrix[3][1] * 1.
+                 - last_modelview_matrix[2][1] * pcb_z;
 
   /*
     x = view_matrix[0][0] * vx +
@@ -1526,8 +1526,8 @@ ghid_unproject_to_z_plane (int ex, int ey, Coord pcb_z, Coord *pcb_x, Coord *pcb
 
   invert_2x2 (mat, inv_mat);
 
-  *pcb_x = (int)(inv_mat[0][0] * x + inv_mat[0][1] * y);
-  *pcb_y = (int)(inv_mat[1][0] * x + inv_mat[1][1] * y);
+  *pcb_x = (inv_mat[0][0] * x + inv_mat[0][1] * y);
+  *pcb_y = (inv_mat[1][0] * x + inv_mat[1][1] * y);
 }
 
 
@@ -1543,17 +1543,17 @@ bool
 ghid_pcb_to_event_coords (Coord pcb_x, Coord pcb_y, int *event_x, int *event_y)
 {
   /* NB: last_modelview_matrix is transposed in memory */
-  float w = last_modelview_matrix[0][3] * (float)pcb_x +
-            last_modelview_matrix[1][3] * (float)pcb_y +
-            last_modelview_matrix[2][3] * 0. +
-            last_modelview_matrix[3][3] * 1.;
+  double w = last_modelview_matrix[0][3] * (double)pcb_x +
+             last_modelview_matrix[1][3] * (double)pcb_y +
+             last_modelview_matrix[2][3] * 0. +
+             last_modelview_matrix[3][3] * 1.;
 
-  *event_x = (last_modelview_matrix[0][0] * (float)pcb_x +
-              last_modelview_matrix[1][0] * (float)pcb_y +
+  *event_x = (last_modelview_matrix[0][0] * (double)pcb_x +
+              last_modelview_matrix[1][0] * (double)pcb_y +
               last_modelview_matrix[2][0] * 0. +
               last_modelview_matrix[3][0] * 1.) / w;
-  *event_y = (last_modelview_matrix[0][1] * (float)pcb_x +
-              last_modelview_matrix[1][1] * (float)pcb_y +
+  *event_y = (last_modelview_matrix[0][1] * (double)pcb_x +
+              last_modelview_matrix[1][1] * (double)pcb_y +
               last_modelview_matrix[2][1] * 0. +
               last_modelview_matrix[3][1] * 1.) / w;
 
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 3a3bd75..bd199da 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -28,22 +28,27 @@ static void
 pan_common (GHidPort *port)
 {
   int event_x, event_y;
+  Coord old_x, old_y;
 
   /* We need to fix up the PCB coordinates corresponding to the last
   * event so convert it back to event coordinates temporarily. */
-  ghid_pcb_to_event_coords (gport->pcb_x, gport->pcb_y, &event_x, &event_y);
+//  ghid_pcb_to_event_coords (gport->pcb_x, gport->pcb_y, &event_x, &event_y);
 
+#if 1
   /* Don't pan so far the board is completely off the screen */
   port->view.x0 = MAX (-port->view.width,  port->view.x0);
   port->view.y0 = MAX (-port->view.height, port->view.y0);
   port->view.x0 = MIN ( port->view.x0, PCB->MaxWidth);
   port->view.y0 = MIN ( port->view.y0, PCB->MaxHeight);
+#endif
 
   /* Fix up noted event coordinates to match where we clamped. Alternatively
    * we could call ghid_note_event_location (NULL); to get a new pointer
    * location, but this costs us an xserver round-trip (on X11 platforms)
    */
-  ghid_event_to_pcb_coords (event_x, event_y, &gport->pcb_x, &gport->pcb_y);
+//  ghid_event_to_pcb_coords (event_x, event_y, &gport->pcb_x, &gport->pcb_y);
+
+  ghid_note_event_location (NULL); /* Force an update of the cursor position */
 
   ghidgui->adjustment_changed_holdoff = TRUE;
   gtk_range_set_value (GTK_RANGE (ghidgui->h_range), gport->view.x0);
@@ -135,6 +140,7 @@ ghid_flip_view (Coord center_x, Coord center_y, bool flip_x, bool flip_y)
 
   /* Work out where on the screen the flip point is */
   ghid_pcb_to_event_coords (center_x, center_y, &widget_x, &widget_y);
+  printf ("Reconstituted screen coordinates are (%i, %i)\n", widget_x, widget_y);
 
   gport->view.flip_x = gport->view.flip_x != flip_x;
   gport->view.flip_y = gport->view.flip_y != flip_y;
@@ -1427,6 +1433,9 @@ SwapSides (int argc, char **argv, Coord x, Coord y)
   bool top_on = LAYER_PTR (PCB->LayerGroups.Entries[top_group][0])->On;
   bool bottom_on = LAYER_PTR (PCB->LayerGroups.Entries[bottom_group][0])->On;
 
+  pcb_fprintf (stderr, "(gport->pcb_x, gport->pcb_y) = (%mn, %mn)\n", gport->pcb_x, gport->pcb_y);
+
+
   if (argc > 0)
     {
       switch (argv[0][0]) {
diff --git a/src/hid/gtk/gui-output-events.c b/src/hid/gtk/gui-output-events.c
index f9ac4bd..6bc45c5 100644
--- a/src/hid/gtk/gui-output-events.c
+++ b/src/hid/gtk/gui-output-events.c
@@ -30,6 +30,8 @@
 #include "config.h"
 #endif
 
+#include <inttypes.h>
+
 #include "gui.h"
 #include "gtkhid.h"
 #include "hid/common/hid_resource.h"
@@ -129,14 +131,17 @@ ghid_note_event_location (GdkEventButton * ev)
     {
       gdk_window_get_pointer (gtk_widget_get_window (ghid_port.drawing_area),
                               &event_x, &event_y, NULL);
+      fprintf (stderr, "NULL NOTEING Mouse at (%i, %i) ", event_x, event_y);
     }
   else
     {
       event_x = ev->x;
       event_y = ev->y;
+      fprintf (stderr, "Actual event Mouse at (%i, %i) ", event_x, event_y);
     }
 
   ghid_event_to_pcb_coords (event_x, event_y, &gport->pcb_x, &gport->pcb_y);
+  fprintf (stderr, "pcb (%" PRIi64 ", %" PRIi64 ")\n", gport->pcb_x, gport->pcb_y);
 
   moved = MoveCrosshairAbsolute (gport->pcb_x, gport->pcb_y);
   if (moved)
