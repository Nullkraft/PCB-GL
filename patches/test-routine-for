Bottom: f384d9ed5a8bb8cd0542fd3efba32a13f1626b48
Top:    42a5c20e1276e56f75843217e9c7686b76b54c52
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-24 21:59:02 +0000

Test routine for poly_InvContour


---

diff --git a/src/polygon1.c b/src/polygon1.c
index e3ed7b8..3442cca 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -2879,6 +2879,8 @@ M_Set_Parentage (POLYAREA *poly, POLYPARENTAGE parentage)
 
 }
 
+static void test_polyInvContour (void);
+
 /* just like poly_Boolean but frees the input polys */
 int
 poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
@@ -2891,6 +2893,8 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
   CVCList *the_list;
   POLYAREA *a_copy, *b_copy;
 
+  test_polyInvContour ();
+
   *res = NULL;
 
   /* Make copies for tracking polygon parentage (DEBUG) */
@@ -3272,6 +3276,32 @@ flip_cb (const BoxType * b, void *cl)
   return 1;
 }
 
+static void
+test_polyInvContour (void)
+{
+  static bool done = false;
+  PLINE *contour;
+  Vector v;
+
+  if (done)
+    return;
+
+  printf ("Testing inv_contour\n");
+
+  v[0] = 0, v[1] = 0;           contour = poly_NewContour (poly_CreateNodeArcApproximation (v, 0, 0, 1));
+  v[0] = 0, v[1] = 2; poly_InclVertex (contour->head.prev, poly_CreateNodeArcApproximation (v, 0, 0, 3));
+  v[0] = 0, v[1] = 4; poly_InclVertex (contour->head.prev, poly_CreateNodeArcApproximation (v, 0, 0, 5));
+  v[0] = 0; v[1] = 6; poly_InclVertex (contour->head.prev, poly_CreateNodeArcApproximation (v, 0, 0, 7));
+
+  pline_dump (&contour->head);
+  poly_InvContour (contour);
+  pline_dump (&contour->head);
+
+  poly_FreeContours (&contour);
+
+  done = true;
+}
+
 void
 poly_InvContour (PLINE * c)
 {
