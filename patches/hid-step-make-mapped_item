Bottom: 6b0c2eb0865e367156f75fa9adbb3c43b4518331
Top:    f7819da7bb99d1727f4b5c7f6770db9345905721
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 19:11:30 +0000

hid/step: Make MAPPED_ITEM style assembly of the board

This makes loading in freecad quicker.. (for some reason it gets slow when you present it with
lots of bodies in a multi-body part).


---

diff --git a/src/hid/step/assembly.cpp b/src/hid/step/assembly.cpp
index 1cc4a3f..d095fae 100644
--- a/src/hid/step/assembly.cpp
+++ b/src/hid/step/assembly.cpp
@@ -744,6 +744,7 @@ append_model_from_file (Registry *registry,
   /*  Try to determine the root product */
   find_and_remove_child_pd (instance_list, &pd_list, "Next_assembly_usage_occurrence"); // Remove any PD which are children of another via NAUO
   find_and_remove_child_pd (instance_list, &pd_list, "Assembly_component_usage");       // Remove any PD which are children of another via ACU
+  find_and_remove_child_pd_mi_rm_sr (instance_list, &pd_list); // Remove any PD which are children of another via MAPPED_ITEM->REPRESENTATION_MAP->SHAPE_REPRESENTATION
 
 #ifdef DEBUG_PRODUCT_DEFINITION_SEARCH
   std::cout << "Hopefully left with the root product definition" << std::endl;
diff --git a/src/hid/step/object3d_step.c b/src/hid/step/object3d_step.c
index 6f67e90..9b78fc9 100644
--- a/src/hid/step/object3d_step.c
+++ b/src/hid/step/object3d_step.c
@@ -372,6 +372,14 @@ object3d_to_step_body_fragment (step_file *step,
 #undef REV
 }
 
+static step_id
+make_origin_axis (step_file *step)
+{
+  return step_axis2_placement_3d (step, "NONE",
+                                  step_cartesian_point (step, "NONE", 0.0, 0.0, 0.0),
+                                        step_direction (step, "NONE", 0.0, 0.0, 1.0),
+                                        step_direction (step, "NONE", 1.0, 0.0, 0.0));
+}
 
 static void
 step_absr_fragment (step_file *step,
@@ -388,10 +396,16 @@ step_absr_fragment (step_file *step,
   step_id shape_definition_representation_identifier;
 
   /* Need an anchor in 3D space to orient the shape */
-  anchor_axis_identifier = step_axis2_placement_3d (step, "NONE",
-                                                    step_cartesian_point (step, "NONE", 0.0, 0.0, 0.0),
-                                                          step_direction (step, "NONE", 0.0, 0.0, 1.0),
-                                                          step_direction (step, "NONE", 1.0, 0.0, 0.0)),
+  if (placement_axis == NULL || *placement_axis == 0)
+    {
+      anchor_axis_identifier = make_origin_axis (step);
+      if (placement_axis != NULL)
+        *placement_axis = anchor_axis_identifier;
+    }
+  else
+    {
+      anchor_axis_identifier = *placement_axis;
+    }
 
   shape_representation_identifier =
     step_advanced_brep_shape_representation (step, "test_pcb_absr_name",
@@ -404,11 +418,12 @@ step_absr_fragment (step_file *step,
   /* Emit references to the styled and over_ridden styled items */
   step_mechanical_design_geometric_presentation_representation (step, "", styled_item_list, geometric_representation_context_identifier);
 
+  if (shape_representation != NULL)
+    *shape_representation = shape_representation_identifier;
+
   if (shape_definition_representation != NULL)
     *shape_definition_representation = shape_definition_representation_identifier;
 
-  if (placement_axis != NULL)
-    *placement_axis = anchor_axis_identifier;
 }
 
 void
@@ -419,7 +434,6 @@ object3d_list_export_to_step_part (GList *objects, const char *filename)
   step_id product_definition_shape;
   step_id shape_representation;
   step_id shape_definition_representation;
-  step_id placement_axis;
   step_id comp_brep;
   GList *object_iter;
   int part;
@@ -482,7 +496,7 @@ object3d_list_export_to_step_part (GList *objects, const char *filename)
                       product_definition_shape,
                       &shape_representation,
                       &shape_definition_representation,
-                      &placement_axis);
+                      NULL /* placement_axis */);
 
   g_hash_table_destroy (appear_hash);
   finish_ap214_file (step);
@@ -490,7 +504,8 @@ object3d_list_export_to_step_part (GList *objects, const char *filename)
 
 static void
 object3d_to_step_fragment (step_file *step, object3d *object, char *part_id, char *part_name, char *part_description, char *body_name,
-                           step_id *shape_definition_representation, step_id *placement_axis, GHashTable *appear_hash)
+                           step_id *shape_representation,step_id *shape_definition_representation,
+                           step_id *placement_axis, GHashTable *appear_hash)
 {
   step_id product_definition_shape_identifier;
   step_id geometric_representation_context_identifier;
@@ -508,7 +523,7 @@ object3d_to_step_fragment (step_file *step, object3d *object, char *part_id, cha
                       styled_item_identifiers,
                       geometric_representation_context_identifier,
                       product_definition_shape_identifier,
-                      NULL /* shape_representation */,
+                      shape_representation,
                       shape_definition_representation,
                       placement_axis);
 }
@@ -517,25 +532,33 @@ void
 object3d_list_export_to_step_assy (GList *objects, const char *filename)
 {
   step_file *step;
-  step_id comp_shape_definition_representation;
-  step_id comp_placement_axis;
+  step_id origin_axis;
+  step_id comp_shape_representation;
+  step_id_list sub_items;
   GList *object_iter;
   int part;
   bool multiple_parts;
   GHashTable *appear_hash;
 
+  step_id assy_product_definition_shape_identifier;
+  step_id assy_geometric_representation_context_identifier;
+
   appear_hash = g_hash_table_new_full (g_direct_hash, g_direct_equal, NULL, (GDestroyNotify)g_list_free);
 
   multiple_parts = (g_list_next (objects) != NULL);
 
   step = start_ap214_file (filename);
+  sub_items = make_step_id_list (0);
+  origin_axis = make_origin_axis (step);
 
   for (object_iter = objects, part = 1;
        object_iter != NULL;
        object_iter = g_list_next (object_iter), part++)
     {
-
       object3d *object = object_iter->data;
+      step_id comp_placement_axis = 0;
+      step_id representation_map;
+      step_id mapped_item;
       GString *part_id;
       GString *part_name;
       GString *body_name;
@@ -563,17 +586,39 @@ object3d_list_export_to_step_assy (GList *objects, const char *filename)
         }
 
       object3d_to_step_fragment (step, object, part_id->str, part_name->str, "PCB model", body_name->str,
-                                 &comp_shape_definition_representation, &comp_placement_axis, appear_hash);
+                                 &comp_shape_representation, NULL /*shape_definition_representation*/, &comp_placement_axis, appear_hash);
+
+      representation_map = step_representation_map (step, origin_axis, comp_shape_representation);
+      mapped_item = step_mapped_item (step, "", representation_map, origin_axis /*new_axis*/);
+      sub_items = step_id_list_append (sub_items, mapped_item);
 
       g_string_free (part_id, true);
       g_string_free (part_name, true);
       g_string_free (body_name, true);
     }
 
+  /* XXX: TODO: MAKE AN ASSEMBLY PRODUCT AND GATHER THE ABOVE PIECES INSIDE IT */
+
+  sub_items = step_id_list_append (sub_items, origin_axis);
+
+  step_product_fragment (step, "Assem1", "Assem1", "PART-Assem1-DESC",
+                         &assy_geometric_representation_context_identifier,
+                         &assy_product_definition_shape_identifier);
+
+//  object3d_to_step_body_fragment (step, object, body_name, &brep_identifier, &styled_item_identifiers, appear_hash);
+
+  step_absr_fragment (step,
+                      sub_items,
+                      NULL, //styled_item_identifiers,
+                      assy_geometric_representation_context_identifier,
+                      assy_product_definition_shape_identifier,
+                      NULL /* shape_representation */,
+                      NULL /* shape_definition_representation */,
+                      &origin_axis); /* This is set, not NULL so is taken as an input */
+
+
   g_hash_table_destroy (appear_hash);
   finish_ap214_file (step);
-
-  /* XXX: TODO: MAKE AN ASSEMBLY PRODUCT AND GATHER THE ABOVE PIECES INSIDE IT */
 }
 
 void
@@ -582,6 +627,6 @@ object3d_export_to_step (object3d *object, const char *filename)
   step_file *step;
 
   step = start_ap214_file (filename);
-  object3d_to_step_fragment (step, object, "board", "PCB board", "PCB model", "PCB board body", NULL, NULL, NULL);
+  object3d_to_step_fragment (step, object, "board", "PCB board", "PCB model", "PCB board body", NULL, NULL, NULL, NULL);
   finish_ap214_file (step);
 }
diff --git a/src/hid/step/step.c b/src/hid/step/step.c
index 075f811..76ab121 100644
--- a/src/hid/step/step.c
+++ b/src/hid/step/step.c
@@ -225,8 +225,8 @@ step_do_export (HID_Attr_Val * options)
   } while ((piece = piece->f) != board_outline);
   poly_Free (&board_outline);
 
-  object3d_list_export_to_step_part (board_outline_list, temp_pcb_filename);
-//  object3d_list_export_to_step_assy (board_outline_list, temp_pcb_filename);
+//  object3d_list_export_to_step_part (board_outline_list, temp_pcb_filename);
+  object3d_list_export_to_step_assy (board_outline_list, temp_pcb_filename);
   g_list_free_full (board_outline_list, (GDestroyNotify)destroy_object3d);
 
   if (1) {
diff --git a/src/hid/step/step_writer.c b/src/hid/step/step_writer.c
index 30add5e..800f713 100644
--- a/src/hid/step/step_writer.c
+++ b/src/hid/step/step_writer.c
@@ -491,3 +491,19 @@ step_mechanical_design_geometric_presentation_representation (step_file *file, c
 
   return file->next_id++;
 }
+
+step_id
+step_representation_map (step_file *file, step_id mapping_origin, step_id mapped_representation)
+{
+  fprintf (file->f, "#%i=REPRESENTATION_MAP(#%i,#%i);\n", file->next_id, mapping_origin, mapped_representation);
+
+  return file->next_id++;
+}
+
+step_id
+step_mapped_item (step_file *file, char *name, step_id mapping_source, step_id mapping_target)
+{
+  fprintf (file->f, "#%i=MAPPED_ITEM('%s',#%i,#%i);\n", file->next_id, name, mapping_source, mapping_target);
+
+  return file->next_id++;
+}
diff --git a/src/hid/step/step_writer.h b/src/hid/step/step_writer.h
index 3fe3ca4..df5c775 100644
--- a/src/hid/step/step_writer.h
+++ b/src/hid/step/step_writer.h
@@ -63,3 +63,5 @@ step_id step_styled_item (step_file *file, char *name, step_id_list styles, step
 step_id step_over_riding_styled_item (step_file *file, char *name, step_id_list styles, step_id item, step_id over_ridden_style);
 step_id step_presentation_layer_assignment (step_file *file, char *name, char *description, step_id_list assigned_items);
 step_id step_mechanical_design_geometric_presentation_representation (step_file *file, char *name, step_id_list items, step_id context_of_items);
+step_id step_representation_map (step_file *file, step_id mapping_origin, step_id mapped_representation);
+step_id step_mapped_item (step_file *file, char *name, step_id mapping_source, step_id mapping_target);
diff --git a/src/hid/step/utils.cpp b/src/hid/step/utils.cpp
index e44b78a..f258958 100644
--- a/src/hid/step/utils.cpp
+++ b/src/hid/step/utils.cpp
@@ -146,6 +146,71 @@ find_and_remove_child_pd (InstMgr *instance_list, pd_list *pd_list, const char *
 #endif
 }
 
+static SdaiProduct_definition *
+find_pd_for_sr (InstMgr *instance_list, SdaiShape_representation *target_sr)
+{
+  int search_index = 0;
+
+  // Loop over the instances of SHAPE_DEFITION_REPRESENTATION in the file
+  SdaiShape_definition_representation *sdr;
+  while (ENTITY_NULL != (sdr = (SdaiShape_definition_representation *)
+                               instance_list->GetApplication_instance ("Shape_definition_representation", search_index)))
+    {
+      SdaiShape_representation *sr = (SdaiShape_representation *)sdr->used_representation_ ();
+      SdaiProduct_definition_shape *pds = (SdaiProduct_definition_shape *)(SdaiProperty_definition_ptr)(*sdr->definition_ ());
+      SdaiProduct_definition *pd = *(SdaiCharacterized_product_definition_ptr)(*pds->definition_ ());
+
+      if (sr == target_sr)
+        return pd;
+
+      int id = sdr->StepFileId ();
+      MgrNode * mnode = instance_list->FindFileId (id);
+      search_index = instance_list->GetIndex (mnode) + 1;
+    }
+
+  return NULL;
+}
+
+void
+find_and_remove_child_pd_mi_rm_sr (InstMgr *instance_list, pd_list *pd_list)
+{
+  int search_index = 0;
+
+  SdaiMapped_item *mi;
+  while (ENTITY_NULL != (mi = (SdaiMapped_item *)
+                               instance_list->GetApplication_instance ("Mapped_item", search_index)))
+    {
+      SdaiRepresentation_map *mapping_source = mi->mapping_source_ ();
+//      SdaiRepresentation_item *mapping_item = mi->mapping_item_ (); // E.g. an axis
+
+//      SdaiRepresentation_item *mapping_origin = mapping_source->mapping_origin_ (); // <- Eg. an axis
+      SdaiRepresentation *mapped_representation = mapping_source->mapped_representation_ (); // <- Shape representation of the product which is a child
+
+      SdaiProduct_definition *child_pd = find_pd_for_sr (instance_list, (SdaiShape_representation *)mapped_representation);
+      /* Need to find product_definition which has PD<-PDS.definition_<-SDR.definition_SDR.used_representation->SR */
+
+//      SdaiProduct_definition *related_pd = mi->related_product_definition_ ();
+
+#ifdef DEBUG_CHILD_REMOVAL
+//      SdaiProduct_definition *relating_pd = acu->relating_product_definition_ ();
+
+      std::cout << "Product " << child_pd->formation_ ()->of_product_ ()->id_ ().c_str ();
+      std::cout << " is a child of " << "???"; // << relating_pd->formation_ ()->of_product_ ()->id_ ().c_str ();
+      std::cout << ".. removing it from list of possible root products";
+      std::cout << std::endl;
+#endif
+
+      /* Remove related_pd from the list of viable product definitions */
+      pd_list->remove (child_pd);
+
+      int id = mi->StepFileId ();
+      MgrNode * mnode = instance_list->FindFileId (id);
+      search_index = instance_list->GetIndex (mnode) + 1;
+    }
+#ifdef DEBUG_CHILD_REMOVAL
+  std::cout << std::endl;
+#endif
+}
 
 SdaiShape_definition_representation *
 find_sdr_for_pd (InstMgr *instance_list, SdaiProduct_definition *target_pd)
diff --git a/src/hid/step/utils.h b/src/hid/step/utils.h
index b5dd55a..43ead5c 100644
--- a/src/hid/step/utils.h
+++ b/src/hid/step/utils.h
@@ -35,6 +35,7 @@ void find_all_pd_with_sdr (InstMgr *instance_list, pd_list *pd_list);
  * typically this will be "Assembly_component_usage" or "Next_assembly_usage_occurance"
  */
 void find_and_remove_child_pd (InstMgr *instance_list, pd_list *pd_list, const char *entityName);
+void find_and_remove_child_pd_mi_rm_sr (InstMgr *instance_list, pd_list *pd_list);
 
 SdaiShape_definition_representation *find_sdr_for_pd (InstMgr *instance_list, SdaiProduct_definition *target_pd);
