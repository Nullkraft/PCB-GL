Bottom: d9abd7e6611566e47d901f56993ebdb72cab83ab
Top:    ea0b83de8bf53612fa5bc6c02dc854a8d57f7c71
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-29 19:13:04 +0000

Try from first principles on object3d stuff


---

diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index aef3ded..6a58231 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -25,7 +25,7 @@
 
 #define PERFECT_ROUND_CONTOURS
 
-//#define REVERSED_PCB_CONTOURS 1 /* PCB Contours are reversed from the expected CCW for outer ordering - once the Y-coordinate flip is taken into account */
+#define REVERSED_PCB_CONTOURS 1 /* PCB Contours are reversed from the expected CCW for outer ordering - once the Y-coordinate flip is taken into account */
 #undef REVERSED_PCB_CONTOURS
 
 #ifdef REVERSED_PCB_CONTOURS
@@ -316,7 +316,7 @@ get_contour_edge_n_round_geometry_in_step_mm (PLINE *contour, int n, double *cx,
   *cx = COORD_TO_STEP_X (PCB, edge->cx);
   *cy = COORD_TO_STEP_Y (PCB, edge->cy);
   *r = COORD_TO_MM (edge->radius);
-  *cw = (compare_ccw_cw (EDGE_BACKWARD_VERTEX (edge)->point, center, EDGE_FORWARD_VERTEX (edge)->point) < 0);
+  *cw = (compare_ccw_cw (EDGE_BACKWARD_VERTEX (edge)->point, center, EDGE_FORWARD_VERTEX (edge)->point) > 0);
 }
 
 typedef struct
@@ -356,6 +356,8 @@ object3d_from_contours (POLYAREA *contours,
   int ct_npoints;
   polygon_3d_link *link;
   bool invert;
+  double length;
+  double nx, ny;
 
 #ifdef REVERSED_PCB_CONTOURS
   invert = extrude_inverted ? false : true;
@@ -425,6 +427,8 @@ object3d_from_contours (POLYAREA *contours,
 
       get_contour_coord_n_in_step_mm (ct, offset_in_ct, &x1, &y1);
 
+      fprintf (stderr, "Vertex %i at (%f, %f, %f)\n", i, x1, y1);
+
       vertices[i]           = make_vertex3d (x1, y1, COORD_TO_STEP_Z (PCB, zbot)); /* Bottom */
       vertices[npoints + i] = make_vertex3d (x1, y1, COORD_TO_STEP_Z (PCB, ztop)); /* Top */
 
@@ -445,7 +449,7 @@ object3d_from_contours (POLYAREA *contours,
 
       object3d_add_face (object, faces[i]);
       /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
-      if (invert)
+      if (0) //invert)
         face3d_add_contour (faces[i], make_contour3d (edges[2 * npoints + i]));
       else
         face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
@@ -469,7 +473,7 @@ object3d_from_contours (POLYAREA *contours,
     object3d_add_face (object, faces[npoints + 1]);
 
     /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
-    if (invert)
+    if (0) //(invert)
       {
         face3d_add_contour (faces[npoints    ], make_contour3d (edges[0]));
         face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(edges[npoints])));
@@ -498,7 +502,7 @@ object3d_from_contours (POLYAREA *contours,
 
         /* If there is more than one contour, it will be an inner contour of the bottom and top faces. Refer to it here */
         /* XXX: Haven't properly thought through how (if) inverting works with multiple contours */
-      if (invert)
+      if (0) //invert)
         {
           face3d_add_contour (faces[npoints    ], make_contour3d (edges[i]));
           face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(edges[npoints + i])));
@@ -515,13 +519,21 @@ object3d_from_contours (POLYAREA *contours,
 
       /* Setup the face normals for the edges along the contour extrusion (top and bottom are handled separaetely) */
       /* Define the (non-normalized) face normal to point to the outside of the contour */
+      /* Vertex ordering of the edge we're finding the normal to is reversed in this case */
+
+      nx =  (vertices[next_i_around_ct]->y - vertices[i]->y);
+      ny = -(vertices[next_i_around_ct]->x - vertices[i]->x);
+      length = hypot (nx, ny);
+      nx /= length;
+      ny /= length;
+
       if (invert)
-        /* Vertex ordering of the edge we're finding the normal to is reversed in this case */
-        face3d_set_normal (faces[i], -(vertices[next_i_around_ct]->y - vertices[i]->y),
-                                      (vertices[next_i_around_ct]->x - vertices[i]->x), 0.);
-      else
-        face3d_set_normal (faces[i],  (vertices[next_i_around_ct]->y - vertices[i]->y),
-                                     -(vertices[next_i_around_ct]->x - vertices[i]->x), 0.);
+        {
+          nx = -nx;
+          ny = -ny;
+        }
+
+      face3d_set_normal (faces[i], nx, ny, 0.);
 
       /* Assign the appropriate vertex geometric data to each edge end */
       ODATA (edges[              i]) = vertices[0 * npoints + i];
@@ -532,7 +544,7 @@ object3d_from_contours (POLYAREA *contours,
       DDATA (edges[2 * npoints + i]) = vertices[1 * npoints + i];
       /* XXX: Do we need to differently with this for inverted contours? */
 
-      if (invert)
+      if (0) //(invert) // IS THIS CASE CORRECT IN ANY CASE - OR IS IT THE CRUX OF CREATING AN INVERTED CONTOUR??
         {
           RDATA (edges[              i]) = faces[i];
           LDATA (edges[              i]) = faces[npoints];
@@ -575,13 +587,17 @@ object3d_from_contours (POLYAREA *contours,
        *     edges[2*npoints-3*npoints-1] are the upright edges, oriented from bottom to top
        */
 
-#ifdef REVERSED_PCB_CONTOURS  /* UNDERLYING DATA HAS CW CONTOURS FOR OUTER, CCW FOR INNER - E.g. PCB's polygons when translated into STEP coordinates */
+#if 0 //def REVERSED_PCB_CONTOURS  /* UNDERLYING DATA HAS CW CONTOURS FOR OUTER, CCW FOR INNER - E.g. PCB's polygons when translated into STEP coordinates */
       if (extrude_inverted)
         {
-          /* XXX: CANT BE BOTHERED RIGHT NOW - NOT IMPLEMENTED */
-          g_assert_not_reached ();
+          /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
+          splice (edges[prev_i_around_ct], SYM(edges[2 * npoints + i]));
+          splice (SYM(edges[2 * npoints + i]), SYM(edges[i]));
+          /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
+          splice (SYM(edges[npoints + i]), edges[2 * npoints + i]);
+          splice (edges[2 * npoints + i], edges[npoints + prev_i_around_ct]);
         }
-      else
+      else // IS THIS CASE CORRECT IN ANY SITUATION? REVERSED CONTOURS OR NOT?
         {
           /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
           splice (SYM(edges[prev_i_around_ct]), edges[2 * npoints + i]);
@@ -593,6 +609,8 @@ object3d_from_contours (POLYAREA *contours,
 #else /* UNDERLYING DATA HAS CCW CONTOURS FOR OUTER, CW FOR INNER. E.g. PCB's raw coordinates in X, Y */
       if (extrude_inverted)
         {
+          g_assert_not_reached (); // FOR NOW..
+
           /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
           splice (SYM(edges[i]), SYM(edges[2 * npoints + i]));
           splice (SYM(edges[2 * npoints + i]), edges[prev_i_around_ct]);
@@ -602,15 +620,36 @@ object3d_from_contours (POLYAREA *contours,
         }
       else
         {
+#if 0
           /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
           splice (edges[i], edges[2 * npoints + i]);
           splice (edges[2 * npoints + i], SYM(edges[prev_i_around_ct]));
           /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
           splice (SYM(edges[npoints + prev_i_around_ct]), SYM(edges[2 * npoints + i]));
           splice (SYM(edges[2 * npoints + i]),  edges[npoints + i]);
+#else
+          /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
+          splice (edges[2 * npoints + i]       , edges[i]              );
+          splice (SYM(edges[prev_i_around_ct]) , edges[2 * npoints + i]);
+          /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
+          splice (SYM(edges[2 * npoints + i]) , SYM(edges[npoints + prev_i_around_ct]));
+          splice (edges[npoints + i]          , SYM(edges[2 * npoints + i])           );
+#endif
         }
 #endif
 
+      g_assert (LDATA (edges[              i]) == faces[i]);
+      g_assert (RDATA (edges[              i]) == faces[npoints]);
+      g_assert (LDATA (edges[1 * npoints + i]) == faces[npoints + 1]);
+      g_assert (RDATA (edges[1 * npoints + i]) == faces[i]);
+      g_assert (LDATA (edges[2 * npoints + i]) == faces[prev_i_around_ct]);
+      g_assert (RDATA (edges[2 * npoints + i]) == faces[i]);
+      g_assert (       ONEXT (edges[              i])  == edges[2 * npoints + i]);
+      g_assert (ONEXT (ONEXT (edges[              i])) == SYM (edges[prev_i_around_ct]));
+      g_assert (       ONEXT (edges[1 * npoints + i])  == SYM (edges[1 * npoints + prev_i_around_ct]));
+      g_assert (ONEXT (ONEXT (edges[1 * npoints + i])) == SYM (edges[2 * npoints + i]));
+
+
       if (get_contour_edge_n_is_round (ct, offset_in_ct)) {
         double cx;
         double cy;
@@ -656,97 +695,45 @@ object3d_from_contours (POLYAREA *contours,
 
     }
 
-    if (0) {
-      /* Cylinder centers on 45x45mm, stitch vertex is at 40x45mm. Radius is thus 5mm */
-
-      edge_ref cylinder_edges[3];
-      vertex3d *cylinder_vertices[2];
-      face3d *cylinder_faces[2];
-
-      /* Edge on top of board */
-      cylinder_edges[0] = make_edge ();
-      UNDIR_DATA (cylinder_edges[0]) = make_edge_info ();
-#ifdef REVERSED_PCB_CONTOURS
-      edge_info_set_round (UNDIR_DATA (cylinder_edges[0]),
-                           COORD_TO_STEP_X (PCB, MM_TO_COORD (45.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 0., /* Center of circle */
-                            0.,   0., 1., /* Normal */
-                            5.);          /* Radius */
-#else
-      edge_info_set_round (UNDIR_DATA (cylinder_edges[0]),
-                           COORD_TO_STEP_X (PCB, MM_TO_COORD (45.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 0., /* Center of circle */
-                            0.,   0., 1., /* Normal */
-                            5.);         /* Radius */
-#endif
-      object3d_add_edge (object, cylinder_edges[0]);
-
-      /* Edge on top of cylinder */
-      cylinder_edges[1] = make_edge ();
-      UNDIR_DATA (cylinder_edges[1]) = make_edge_info ();
-      edge_info_set_round (UNDIR_DATA (cylinder_edges[1]),
-                           COORD_TO_STEP_X (PCB, MM_TO_COORD (45.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 10., /* Center of circle */
-                            0.,   0., 1.,  /* Normal */
-                            5.);          /* Radius */
-      object3d_add_edge (object, cylinder_edges[1]);
-
-      /* Edge stitching cylinder */
-      cylinder_edges[2] = make_edge ();
-      UNDIR_DATA (cylinder_edges[2]) = make_edge_info ();
-      edge_info_set_stitch (UNDIR_DATA (cylinder_edges[2]));
-      object3d_add_edge (object, cylinder_edges[2]);
-
-      /* Vertex on board top surface */
-      cylinder_vertices[0] = make_vertex3d (COORD_TO_STEP_X (PCB, MM_TO_COORD (40.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 0.); /* Bottom */
-      object3d_add_vertex (object, cylinder_vertices[0]);
-
-      /* Vertex on cylinder top surface */
-      cylinder_vertices[1] = make_vertex3d (COORD_TO_STEP_X (PCB, MM_TO_COORD (40.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 10.); /* Top */
-      object3d_add_vertex (object, cylinder_vertices[1]);
-
-      /* Cylindrical face */
-      cylinder_faces[0] = make_face3d ();
-      face3d_set_cylindrical (cylinder_faces[0], COORD_TO_STEP_X (PCB, MM_TO_COORD (45.)), COORD_TO_STEP_Y (PCB, MM_TO_COORD (45.)), 0., /* A point on the axis of the cylinder */
-                                        0., 0., 1.,             /* Direction of the cylindrical axis */
-                                        5.);                   /* Radius of cylinder */
-      face3d_set_normal (cylinder_faces[0], 1., 0., 0.);       /* A normal to the axis direction */
-                                   /* XXX: ^^^ Could line this up with the direction to the vertex in the corresponding circle edge */
-      object3d_add_face (object, cylinder_faces[0]);
-      face3d_add_contour (cylinder_faces[0], make_contour3d (cylinder_edges[0]));
-
-      /* Top face of cylinder */
-      cylinder_faces[1] = make_face3d (); /* top face of cylinder */
-      face3d_set_normal (cylinder_faces[1], 0., 0., 1.);
-      face3d_set_appearance (cylinder_faces[1], top_bot_appearance);
-      object3d_add_face (object, cylinder_faces[1]);
-      face3d_add_contour (cylinder_faces[1], make_contour3d (cylinder_edges[1]));
+    ct = contour;
+    start_of_ct = 0;
+    offset_in_ct = 0;
+    ct_npoints = get_contour_npoints (ct);
 
-      /* Splice onto board */
-      face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(cylinder_edges[0])));
+    for (i = 0; i < npoints; i++, offset_in_ct++) {
+      int next_i_around_ct;
+      int prev_i_around_ct;
 
-      /* Assign the appropriate vertex geometric data to each edge end */
-      ODATA (cylinder_edges[0]) = cylinder_vertices[0];
-      DDATA (cylinder_edges[0]) = cylinder_vertices[0];
-      ODATA (cylinder_edges[1]) = cylinder_vertices[1];
-      DDATA (cylinder_edges[1]) = cylinder_vertices[1];
-      ODATA (cylinder_edges[2]) = cylinder_vertices[0];
-      DDATA (cylinder_edges[2]) = cylinder_vertices[1];
-      LDATA (cylinder_edges[0]) = cylinder_faces[0];
-      RDATA (cylinder_edges[0]) = faces[npoints + 1]; /* TOP OF BOARD FACE */
-      LDATA (cylinder_edges[1]) = cylinder_faces[1];
-      RDATA (cylinder_edges[1]) = cylinder_faces[0];
-      LDATA (cylinder_edges[2]) = cylinder_faces[0];
-      RDATA (cylinder_edges[2]) = cylinder_faces[0];
+      /* Update which contour we're looking at */
+      if (offset_in_ct == ct_npoints) {
+        start_of_ct = i;
+        offset_in_ct = 0;
+        ct = ct->next;
+        ct_npoints = get_contour_npoints (ct);
 
-      /* Splice things together.... */
+      }
 
-      /* Link edges orbiting the cylinder bottom vertex */
-      splice (cylinder_edges[0], cylinder_edges[2]);
-      splice (cylinder_edges[2], SYM(cylinder_edges[0]));
+      next_i_around_ct = start_of_ct + (offset_in_ct + 1) % ct_npoints;
+      prev_i_around_ct = start_of_ct + (offset_in_ct + ct_npoints - 1) % ct_npoints;
 
-      /* Link edges orbiting the cylinder top vertex */
-      splice (SYM(cylinder_edges[2]), cylinder_edges[1]);
-      splice (cylinder_edges[1], SYM(cylinder_edges[1]));
+      g_assert (LDATA (edges[              i]) == faces[i]);
+      g_assert (RDATA (edges[              i]) == faces[npoints]);
+      g_assert (LDATA (edges[1 * npoints + i]) == faces[npoints + 1]);
+      g_assert (RDATA (edges[1 * npoints + i]) == faces[i]);
+      g_assert (LDATA (edges[2 * npoints + i]) == faces[prev_i_around_ct]);
+      g_assert (RDATA (edges[2 * npoints + i]) == faces[i]);
+      g_assert (              ONEXT (edges[              i])   ==      edges[2 * npoints + i]);
+      g_assert (       ONEXT (ONEXT (edges[              i]))  == SYM (edges[              prev_i_around_ct]));
+      g_assert (ONEXT (ONEXT (ONEXT (edges[              i]))) ==      edges[              i]);
+      g_assert (              ONEXT (edges[1 * npoints + i])   == SYM (edges[1 * npoints + prev_i_around_ct]));
+      g_assert (       ONEXT (ONEXT (edges[1 * npoints + i]))  == SYM (edges[2 * npoints + i]));
+      g_assert (ONEXT (ONEXT (ONEXT (edges[1 * npoints + i]))) ==      edges[1 * npoints + i]);
+      g_assert (LNEXT (edges[              i]) ==      edges[2 * npoints + next_i_around_ct]);
+      g_assert (LNEXT (edges[1 * npoints + i]) ==      edges[1 * npoints + next_i_around_ct]);
+      g_assert (LNEXT (edges[2 * npoints + i]) == SYM (edges[1 * npoints + prev_i_around_ct]));
     }
 
+
     objects = g_list_prepend (objects, object);
 
     link = malloc (sizeof (polygon_3d_link));
@@ -1764,8 +1751,8 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
       group_objects = g_list_concat (group_objects,
         object3d_from_contours (info.poly,
 #ifdef REVERSED_PCB_CONTOURS
-                                depth - HACK_BOARD_THICKNESS,                         /* Bottom */
-                                depth - HACK_BOARD_THICKNESS + HACK_COPPER_THICKNESS, /* Top */
+                                depth,                         /* Bottom */
+                                depth + HACK_COPPER_THICKNESS, /* Top */
 #else
                                 -depth - HACK_BOARD_THICKNESS / 2,                         /* Bottom */
                                 -depth - HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS, /* Top */
@@ -1814,8 +1801,13 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
       POLYAREA *pa;
       GList *barrel_objects;
 
+      /* HACK - LET US EMIT BLANK BOARDS.. SHOULD CHECK BEFORE WE START TO LOOP? */
+      if (barrel_m_polyarea == NULL)
+        break;
+
       /* Extrude barrel from group to group + 1 */
       fprintf (stderr, "Extruding barrels from layer group %i to %i\n", group, group + 1);
+
       g_assert (group_m_polyarea[group] != NULL);
       g_assert (group_m_polyarea[group + 1] != NULL);
 
@@ -1825,8 +1817,8 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
 
       barrel_objects = object3d_from_contours (barrel_m_polyarea,
 #ifdef REVERSED_PCB_CONTOURS
-                                               bottom_depth - HACK_BOARD_THICKNESS,                         /* Bottom */
-                                               top_depth    - HACK_BOARD_THICKNESS + HACK_COPPER_THICKNESS, /* Top */
+                                               bottom_depth + HACK_COPPER_THICKNESS, /* Bottom */
+                                               top_depth,                            /* Top */
 #else
                                                -bottom_depth - HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS, /* Bottom */
                                                -top_depth    - HACK_BOARD_THICKNESS / 2,                         /* Top */
@@ -1995,7 +1987,7 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
 #endif
     }
 
-  if (0) /* Drill holes */
+  if (0) //drill_m_polyarea != NULL) /* Drill holes */
     {
       Coord top_depth;
       Coord bottom_depth;
@@ -2011,8 +2003,8 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
 
       drill_objects = object3d_from_contours (drill_m_polyarea,
 #ifdef REVERSED_PCB_CONTOURS
-                                               bottom_depth - HACK_BOARD_THICKNESS + HACK_COPPER_THICKNESS,     /* Bottom */
-                                               top_depth    - HACK_BOARD_THICKNESS + HACK_COPPER_THICKNESS,     /* Top */
+                                               bottom_depth,                      /* Bottom */
+                                               top_depth + HACK_COPPER_THICKNESS, /* Top */
 #else
                                               -bottom_depth - HACK_BOARD_THICKNESS / 2,                         /* Bottom */
                                               -top_depth    - HACK_BOARD_THICKNESS / 2 - HACK_COPPER_THICKNESS, /* Top */
@@ -2059,21 +2051,6 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
           face3d_add_contour (top_group_face,    make_contour3d (drill_top_face_first_edge));
           face3d_add_contour (bottom_group_face, make_contour3d (drill_bottom_face_first_edge));
 
-//          if (1)
-//            {
-//              edge_info *info;
-//
-//              info = UNDIR_DATA (drill_top_face_first_edge);
-//              if (info->is_round)
-//                info->nz = -info->nz; /* Flip circular normal, if this contour is a circle */
-//
-//              info = UNDIR_DATA (drill_bottom_face_first_edge);
-//              if (info->is_round)
-//                info->nz = -info->nz; /* Flip circular normal, if this contour is a circle */
-//            }
-
-          /* XXX: Need to flip the edge wall orientations too - particularly considering cylindrical edges */
-
           /* Need to walk around the top / bottom edge contours, and re-connect with the linked up copper groups */
 
           e = drill_top_face_first_edge;
@@ -2136,8 +2113,11 @@ object3d_from_copper_layers_within_area (POLYAREA *area)
 
   for (group = min_copper_group; group <= max_copper_group; group++)
     {
-      free (group_m_polyarea[group]->user_data);
-      poly_Free (&group_m_polyarea[group]);
+      if (group_m_polyarea[group] != NULL)
+        {
+          free (group_m_polyarea[group]->user_data);
+          poly_Free (&group_m_polyarea[group]);
+        }
     }
 
   return group_objects;
diff --git a/src/hid/step/object3d_step.c b/src/hid/step/object3d_step.c
index a7bc294..b450ea1 100644
--- a/src/hid/step/object3d_step.c
+++ b/src/hid/step/object3d_step.c
@@ -26,7 +26,7 @@
 
 
 //#define REVERSED_PCB_CONTOURS 1 /* PCB Contours are reversed from the expected CCW for outer ordering - once the Y-coordinate flip is taken into account */
-#undef REVERSED_PCB_CONTOURS
+//#undef REVERSED_PCB_CONTOURS
 
 #define EPSILON 1e-5 /* XXX: Unknown  what this needs to be */
 
@@ -282,7 +282,8 @@ object3d_to_step_body_fragment (step_file *step,
     step_id ev = ((vertex3d *)DDATA (edge))->vertex_identifier;
 
     /* XXX: The lookup of these edges by adding to info->edge_identifier requires the step_* functions to assign sequential identifiers */
-    info->edge_identifier = step_edge_curve (step, "NONE", sv, ev, info->infinite_line_identifier, /*true*/ !info->is_round);
+    info->edge_identifier = step_edge_curve (step, "NONE", sv, ev, info->infinite_line_identifier, true);
+    //info->edge_identifier = step_edge_curve (step, "NONE", sv, ev, info->infinite_line_identifier, !info->is_round);
     step_oriented_edge (step, "NONE", info->edge_identifier, true);  /* Add 1 to info->edge_identifier to find this (same) oriented edge */
     step_oriented_edge (step, "NONE", info->edge_identifier, false); /* Add 2 to info->edge_identifier to find this (back) oriented edge */
   }
@@ -303,9 +304,10 @@ object3d_to_step_body_fragment (step_file *step,
 
       edge = contour->first_edge;
       do {
-        edge_loop_edges = g_list_append (edge_loop_edges, GINT_TO_POINTER (ORIENTED_EDGE_IDENTIFIER (edge)));
+        edge_loop_edges = g_list_prepend (edge_loop_edges, GINT_TO_POINTER (ORIENTED_EDGE_IDENTIFIER (edge)));
       } while (edge = LNEXT (edge), edge != contour->first_edge);
 
+      edge_loop_edges = g_list_reverse (edge_loop_edges); /* FOR SOME REASON, SOLIDWORKS CARES ABOUT THIS WHEN BREP MAPPING */ /* ODDLY, SOLIDWORKS SEEMS TO LIKE IT WHEN THE FILE IS BROKEN ACCORDING TO THE ONLINE STEP FILE ANALYSER */
       edge_loop = step_edge_loop (step, "NONE", edge_loop_edges);
 
       if (outer_contour)
@@ -313,13 +315,16 @@ object3d_to_step_body_fragment (step_file *step,
       else
         contour->face_bound_identifier = step_face_bound (step, "NONE", edge_loop, true);
 
-      face_contour_list = g_list_append (face_contour_list, GINT_TO_POINTER (contour->face_bound_identifier));
+      face_contour_list = g_list_prepend (face_contour_list, GINT_TO_POINTER (contour->face_bound_identifier));
     }
 
+    face_contour_list = g_list_reverse (face_contour_list);
     face->face_identifier = step_advanced_face (step, "NONE", face_contour_list, face->surface_identifier, !face->surface_orientation_reversed);
-    shell_face_list = g_list_append (shell_face_list, GINT_TO_POINTER (face->face_identifier));
+    shell_face_list = g_list_prepend (shell_face_list, GINT_TO_POINTER (face->face_identifier));
   }
 
+  shell_face_list = g_list_reverse (shell_face_list);
+
   /* Closed shell which bounds the brep solid */
   pcb_shell_identifier = step_closed_shell (step, "NONE", shell_face_list);
   brep_identifier = step_manifold_solid_brep (step, body_name /* This is picked up as the solid body name by Solidworks */, pcb_shell_identifier);
diff --git a/src/hid/step/step_writer.c b/src/hid/step/step_writer.c
index 7c9605d..213d234 100644
--- a/src/hid/step/step_writer.c
+++ b/src/hid/step/step_writer.c
@@ -115,6 +115,7 @@ make_3d_metric_step_geometric_representation_context (step_file *file)
 static step_id
 lookup_or_create (step_file *file, GHashTable *hash, const char *entity, char *content)
 {
+#if 0
   step_id id;
 
   if ((id = GPOINTER_TO_INT (g_hash_table_lookup (hash, content))) != 0)
@@ -124,6 +125,7 @@ lookup_or_create (step_file *file, GHashTable *hash, const char *entity, char *c
     }
 
   g_hash_table_insert (hash, content, GINT_TO_POINTER (file->next_id));
+#endif
   fprintf (file->f, "#%i=%s(%s);\n", file->next_id, entity, content);
 
   return file->next_id++;
diff --git a/src/polygon.c b/src/polygon.c
index c62a56c..0f49cac 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -303,7 +303,7 @@ degree_circle (PLINE * c, Coord X, Coord Y /* <- Center */, Coord radius, Vector
       c->head.prev->point[1] == v[1])
     {
       /* Re-use any existing vertex point we got lumbered with (if it matches the coordinate we want) */
-//      c->head.prev->is_round = true;
+      c->head.prev->is_round = true;
       c->head.prev->cx = X;
       c->head.prev->cy = Y;
       c->head.prev->radius = radius;
@@ -525,7 +525,7 @@ frac_circle (PLINE * c, Coord X, Coord Y, Vector v, int fraction)
       c->head.prev->point[1] == v[1])
     {
       /* Re-use any existing vertex point we got lumbered with (if it matches the coordinate we want) */
-//      c->head.prev->is_round = true;
+      c->head.prev->is_round = true;
       c->head.prev->cx = X;
       c->head.prev->cy = Y;
       c->head.prev->radius = radius;
@@ -573,7 +573,7 @@ frac_circle2 (PLINE * c, Coord X, Coord Y, Vector v, int fraction)
       c->head.prev->point[1] == v[1])
     {
       /* Re-use any existing vertex point we got lumbered with (if it matches the coordinate we want) */
-//      c->head.prev->is_round = true;
+      c->head.prev->is_round = true;
       c->head.prev->cx = X;
       c->head.prev->cy = Y;
       c->head.prev->radius = radius;
