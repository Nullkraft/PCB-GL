Bottom: a6592d9ea24e37528bd5082b390ee7cfdf9448fe
Top:    5608e7f0b34932030e08082c9f7b996cb5d0d4a0
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-04 19:24:12 +0000

More rubberbanding algorithm tweaks


---

diff --git a/src/crosshair.c b/src/crosshair.c
index b379dab..1d20765 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -360,6 +360,7 @@ line_line_intersect (double x1, double y1, double x2, double y2,
 
   if (x != NULL) *x = 0.0;
   if (y != NULL) *y = 0.0;
+  if (multiplier != NULL) *multiplier = 0.0;
 
   denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
   numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
@@ -373,6 +374,7 @@ line_line_intersect (double x1, double y1, double x2, double y2,
         {
           if (x != NULL) *x = (x1 + x2) / 2;
           if (y != NULL) *y = (y1 + y2) / 2;
+          if (multiplier != NULL) *multiplier = 0.5;
           return true;
         }
       /* The line parallel */
@@ -424,11 +426,13 @@ XORDrawMoveOrCopyObject (hidGC gc)
 
     case LINE_TYPE:
       {
+//      while (0) {
         LineType *moving_line = Crosshair.AttachedObject.Ptr2;
-        bool set_min = false;
-        bool set_max = false;
+        bool first_pass = true;
         double min_multiplier = 0.0;
-        double max_multiplier = 1.0;
+        double max_multiplier = 0.0;
+        bool found_line_at_0_end = false;
+        bool found_line_at_1_end = false;
 
         /* draw the attached rubberband lines too */
         i = Crosshair.AttachedObject.RubberbandN;
@@ -441,28 +445,49 @@ XORDrawMoveOrCopyObject (hidGC gc)
               {
                 double multiplier;
 
+                line_line_intersect (moving_line->Point1.X, moving_line->Point1.Y,
+                                     moving_line->Point2.X, moving_line->Point2.Y,
+                                     ptr->Line->Point1.X,   ptr->Line->Point1.Y,
+                                     ptr->Line->Point2.X,   ptr->Line->Point2.Y,
+                                     NULL, NULL, &multiplier);
+
+                if (fabs (multiplier - 0.0) < EPS)
+                  found_line_at_0_end = true;
+
+                if (fabs (multiplier - 1.0) < EPS)
+                  found_line_at_1_end = true;
+
                 line_line_intersect (moving_line->Point1.X + dx, moving_line->Point1.Y + dy,
                                      moving_line->Point2.X + dx, moving_line->Point2.Y + dy,
                                      ptr->Line->Point1.X,        ptr->Line->Point1.Y,
                                      ptr->Line->Point2.X,        ptr->Line->Point2.Y,
                                      NULL, NULL, &multiplier);
-                if (multiplier < min_multiplier)
+                if (first_pass)
                   {
                     min_multiplier = multiplier;
-                    set_min = true;
-                  }
-                if (multiplier > max_multiplier)
-                  {
                     max_multiplier = multiplier;
-                    set_max = true;
+                    first_pass = false;
                   }
+                min_multiplier = MIN (min_multiplier, multiplier);
+                max_multiplier = MAX (max_multiplier, multiplier);
               }
 
             ptr++;
             i--;
           }
 
+
+        if (!found_line_at_0_end)
+          min_multiplier = MIN (min_multiplier, 0.0);
+
+        if (!found_line_at_1_end)
+          max_multiplier = MAX (max_multiplier, 1.0);
+
         /* If no constraints from the rubber band lines, then keep the old endpoints */
+        if (min_multiplier == max_multiplier)
+          {
+            /* TODO: Restore free end-point? */
+          }
 #if 0
         if (!set_min)
           min_multiplier = 0.0;
@@ -477,7 +502,9 @@ XORDrawMoveOrCopyObject (hidGC gc)
                              moving_line->Point1.X + dx + max_multiplier * (moving_line->Point2.X - moving_line->Point1.X),
                              moving_line->Point1.Y + dy + max_multiplier * (moving_line->Point2.Y - moving_line->Point1.Y),
                              moving_line->Thickness);
+
         break;
+
       }
 
     case ARC_TYPE:
@@ -569,6 +596,7 @@ XORDrawMoveOrCopyObject (hidGC gc)
   /* draw the attached rubberband lines too */
   i = Crosshair.AttachedObject.RubberbandN;
   ptr = Crosshair.AttachedObject.Rubberband;
+//  while (i)
   while (i)
     {
       PointType *point1, *point2;
@@ -578,6 +606,7 @@ XORDrawMoveOrCopyObject (hidGC gc)
 	  /* this is a rat going to a polygon.  do not draw for rubberband */;
 	}
       else if (TEST_FLAG (RUBBERENDFLAG, ptr->Line))
+//      else
 	{
           if (Crosshair.AttachedObject.Type == LINE_TYPE)
             {
@@ -616,18 +645,19 @@ XORDrawMoveOrCopyObject (hidGC gc)
                   point1 = &ptr->Line->Point1;
                   point2 = &ptr->Line->Point2;
                 }
-
               XORDrawAttachedLine (gc, point1->X,      point1->Y,
                                        point2->X + dx, point2->Y + dy,
                                    ptr->Line->Thickness);
             }
         }
+#if 1
       else if (ptr->MovedPoint == &ptr->Line->Point1)
         XORDrawAttachedLine (gc,
                              ptr->Line->Point1.X + dx,
                              ptr->Line->Point1.Y + dy,
                              ptr->Line->Point2.X + dx,
                              ptr->Line->Point2.Y + dy, ptr->Line->Thickness);
+#endif
 
       ptr++;
       i--;
diff --git a/src/move.c b/src/move.c
index 3ddff44..6282e9e 100644
--- a/src/move.c
+++ b/src/move.c
@@ -796,7 +796,7 @@ line_line_intersect (double x1, double y1, double x2, double y2,
 
   if (x != NULL) *x = 0.0;
   if (y != NULL) *y = 0.0;
-  if (multiplier != NULL) *y = 0.0;
+  if (multiplier != NULL) *multiplier = 0.0;
 
   denom  = (y4 - y3) * (x2 - x1) - (x4 - x3) * (y2 - y1);
   numera = (x4 - x3) * (y1 - y3) - (y4 - y3) * (x1 - x3);
@@ -844,15 +844,20 @@ MoveObjectAndRubberband (int Type, void *Ptr1, void *Ptr2, void *Ptr3,
   LineType *moving_line = NULL;
   void *ptr2;
   int i;
-  double min_multiplier = 1.0;
+  bool first_pass = true;
+  double min_multiplier = 0.0;
   double max_multiplier = 0.0;
+  bool found_line_at_0_end = false;
+  bool found_line_at_1_end = false;
 
-  if (Type == LINE_TYPE)
+  if (Type == LINE_TYPE) {
     moving_line = Ptr2;
+//    CLEAR_FLAG (RUBBERENDFLAG, moving_line);
+  }
 
   /* first clear any marks that we made in the line flags */
   for (i = 0, ptr = Crosshair.AttachedObject.Rubberband;
-       i > Crosshair.AttachedObject.RubberbandN;
+       i < Crosshair.AttachedObject.RubberbandN;
        i++, ptr++)
     CLEAR_FLAG (RUBBERENDFLAG, ptr->Line);
 
@@ -873,6 +878,19 @@ MoveObjectAndRubberband (int Type, void *Ptr1, void *Ptr2, void *Ptr3,
         {
           double x, y, multiplier;
 
+          line_line_intersect (moving_line->Point1.X, moving_line->Point1.Y,
+                               moving_line->Point2.X, moving_line->Point2.Y,
+                               ptr->Line->Point1.X,   ptr->Line->Point1.Y,
+                               ptr->Line->Point2.X,   ptr->Line->Point2.Y,
+                               NULL,                  NULL,
+                               &multiplier);
+
+          if (fabs (multiplier - 0.0) < EPS)
+            found_line_at_0_end = true;
+
+          if (fabs (multiplier - 1.0) < EPS)
+            found_line_at_1_end = true;
+
           line_line_intersect (moving_line->Point1.X + DX, moving_line->Point1.Y + DY,
                                moving_line->Point2.X + DX, moving_line->Point2.Y + DY,
                                ptr->Line->Point1.X,        ptr->Line->Point1.Y,
@@ -880,6 +898,13 @@ MoveObjectAndRubberband (int Type, void *Ptr1, void *Ptr2, void *Ptr3,
                                &x,                         &y,
                                &multiplier);
 
+          if (first_pass)
+            {
+              min_multiplier = multiplier;
+              max_multiplier = multiplier;
+              first_pass = false;
+            }
+
           min_multiplier = MIN (min_multiplier, multiplier);
           max_multiplier = MAX (max_multiplier, multiplier);
 
@@ -895,6 +920,12 @@ MoveObjectAndRubberband (int Type, void *Ptr1, void *Ptr2, void *Ptr3,
       ptr++;
     }
 
+    if (!found_line_at_0_end)
+      min_multiplier = MIN (min_multiplier, 0.0);
+
+    if (!found_line_at_1_end)
+      max_multiplier = MAX (max_multiplier, 1.0);
+
   if (Type == LINE_TYPE)
     {
       Coord ldx, ldy;
