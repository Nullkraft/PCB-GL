Bottom: 8a7c16d64a7b5bd3d9347428bb365d347d824b30
Top:    a2f3a342860ca3938bf9ec27cb82e9739126d232
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-05 16:23:30 +0000

Refactor poly_CreateNode() to take a pre-created VNODE structure, not a Vector

This helps to keep consitency with other functions adding vertices to a
contour and will be useful when additional data is added to the VNODE
structure. (Meaning it can be set the same way in all cases).


---

diff --git a/src/polyarea.h b/src/polyarea.h
index d49660b..c606077 100644
--- a/src/polyarea.h
+++ b/src/polyarea.h
@@ -110,7 +110,7 @@ struct PLINE
     float *tristrip_vertices;
 };
 
-PLINE *poly_NewContour(Vector v);
+PLINE *poly_NewContour(VNODE *node);
 
 void poly_IniContour(PLINE *  c);
 void poly_ClrContour(PLINE *  c);  /* clears list of vertices */
diff --git a/src/polygon.c b/src/polygon.c
index fc83944..1970b09 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -295,7 +295,7 @@ original_poly (PolygonType * p)
       v[1] = p->Points[n].Y;
       if (contour == NULL)
         {
-          if ((contour = poly_NewContour (v)) == NULL)
+          if ((contour = poly_NewContour (poly_CreateNode (v))) == NULL)
             return NULL;
         }
       else
@@ -342,7 +342,7 @@ RectPoly (Coord x1, Coord x2, Coord y1, Coord y2)
 
   v[0] = x1;
   v[1] = y1;
-  if ((contour = poly_NewContour (v)) == NULL)
+  if ((contour = poly_NewContour (poly_CreateNode (v))) == NULL)
     return NULL;
   v[0] = x2;
   v[1] = y1;
@@ -364,7 +364,7 @@ OctagonPoly (Coord x, Coord y, Coord radius)
 
   v[0] = x + ROUND (radius * 0.5);
   v[1] = y + ROUND (radius * TAN_22_5_DEGREE_2);
-  if ((contour = poly_NewContour (v)) == NULL)
+  if ((contour = poly_NewContour (poly_CreateNode (v))) == NULL)
     return NULL;
   v[0] = x + ROUND (radius * TAN_22_5_DEGREE_2);
   v[1] = y + ROUND (radius * 0.5);
@@ -430,7 +430,7 @@ CirclePoly (Coord x, Coord y, Coord radius)
     return NULL;
   v[0] = x + radius;
   v[1] = y;
-  if ((contour = poly_NewContour (v)) == NULL)
+  if ((contour = poly_NewContour (poly_CreateNode (v))) == NULL)
     return NULL;
   frac_circle (contour, x, y, v, 1);
   contour->is_round = TRUE;
@@ -451,7 +451,7 @@ RoundRect (Coord x1, Coord x2, Coord y1, Coord y2, Coord t)
   assert (y2 > y1);
   v[0] = x1 - t;
   v[1] = y1;
-  if ((contour = poly_NewContour (v)) == NULL)
+  if ((contour = poly_NewContour (poly_CreateNode (v))) == NULL)
     return NULL;
   frac_circle (contour, x1, y1, v, 4);
   v[0] = x2;
@@ -506,7 +506,7 @@ ArcPolyNoIntersect (ArcType * a, Coord thick)
   radius_adj = (M_PI*da/360)*(M_PI*da/360)/2;
   v[0] = a->X - rx * cos (ang * M180);
   v[1] = a->Y + ry * sin (ang * M180);
-  if ((contour = poly_NewContour (v)) == NULL)
+  if ((contour = poly_NewContour (poly_CreateNode (v))) == NULL)
     return 0;
   for (i = 0; i < segs - 1; i++)
     {
@@ -612,7 +612,7 @@ LinePoly (LineType * L, Coord thick)
     }
   v[0] = l->Point1.X - dx;
   v[1] = l->Point1.Y - dy;
-  if ((contour = poly_NewContour (v)) == NULL)
+  if ((contour = poly_NewContour (poly_CreateNode (v))) == NULL)
     return 0;
   v[0] = l->Point2.X - dx;
   v[1] = l->Point2.Y - dy;
@@ -686,7 +686,7 @@ SquarePadPoly (PadType * pad, Coord clear)
 
   v[0] = c->Point1.X - tx;
   v[1] = c->Point1.Y - ty;
-  if ((contour = poly_NewContour (v)) == NULL)
+  if ((contour = poly_NewContour (poly_CreateNode (v))) == NULL)
     return 0;
   frac_circle (contour, (t->Point1.X - tx), (t->Point1.Y - ty), v, 4);
 
diff --git a/src/polygon1.c b/src/polygon1.c
index 7d6fab6..ef82f37 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -1619,16 +1619,16 @@ Gather (VNODE * start, PLINE ** result, J_Rule v_rule, DIRECTION initdir)
       if (!jump (&cur, &dir, v_rule))
 	break;
       /* add edge to polygon */
+      if ((newn = poly_CreateNode (cur->point)) == NULL)
+        return err_no_memory;
       if (!*result)
 	{
-	  *result = poly_NewContour (cur->point);
+	  *result = poly_NewContour (newn);
 	  if (*result == NULL)
 	    return err_no_memory;
 	}
       else
 	{
-	  if ((newn = poly_CreateNode (cur->point)) == NULL)
-	    return err_no_memory;
 	  poly_InclVertex ((*result)->head.prev, newn);
 	}
 #ifdef DEBUG_GATHER
@@ -2519,7 +2519,7 @@ poly_IniContour (PLINE * c)
 }
 
 PLINE *
-poly_NewContour (Vector v)
+poly_NewContour (VNODE *node)
 {
   PLINE *res;
 
@@ -2529,11 +2529,9 @@ poly_NewContour (Vector v)
 
   poly_IniContour (res);
 
-  if (v != NULL)
-    {
-      Vcopy (res->head.point, v);
-      cntrbox_adjust (res, v);
-    }
+  Vcopy (res->head.point, node->point);
+  cntrbox_adjust (res, res->head.point);
+  free (node);
 
   return res;
 }
@@ -2726,7 +2724,7 @@ poly_CopyContour (PLINE ** dst, PLINE * src)
 
   assert (src != NULL);
   *dst = NULL;
-  *dst = poly_NewContour (src->head.point);
+  *dst = poly_NewContour (poly_CreateNode (src->head.point));
   if (*dst == NULL)
     return FALSE;
 
diff --git a/src/thermal.c b/src/thermal.c
index 083bf5e..753182c 100644
--- a/src/thermal.c
+++ b/src/thermal.c
@@ -106,7 +106,7 @@ diag_line (Coord X, Coord Y, Coord l, Coord w, bool rt)
 
   v[0] = X + x1;
   v[1] = Y + y2;
-  if ((c = poly_NewContour (v)) == NULL)
+  if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
     return NULL;
   v[0] = X - x2;
   v[1] = Y - y1;
@@ -137,7 +137,7 @@ square_therm (PinType *pin, Cardinal style)
       /* top (actually bottom since +y is down) */
       v[0] = pin->X - in + d;
       v[1] = pin->Y + in;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[0] = pin->X + in - d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -150,7 +150,7 @@ square_therm (PinType *pin, Cardinal style)
       /* right */
       v[0] = pin->X + in;
       v[1] = pin->Y + in - d;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[1] = pin->Y - in + d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -165,7 +165,7 @@ square_therm (PinType *pin, Cardinal style)
       /* left */
       v[0] = pin->X - in;
       v[1] = pin->Y - in + d;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[1] = pin->Y + in - d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -180,7 +180,7 @@ square_therm (PinType *pin, Cardinal style)
       /* bottom (actually top since +y is down) */
       v[0] = pin->X + in - d;
       v[1] = pin->Y - in;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[0] = pin->X - in + d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -241,7 +241,7 @@ square_therm (PinType *pin, Cardinal style)
       /* topright */
       v[0] = pin->X + in;
       v[1] = pin->Y + in;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[1] = pin->Y + d;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -270,7 +270,7 @@ square_therm (PinType *pin, Cardinal style)
       /* bottom right */
       v[0] = pin->X + in;
       v[1] = pin->Y - d;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[1] = pin->Y - in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -297,7 +297,7 @@ square_therm (PinType *pin, Cardinal style)
       /* bottom left */
       v[0] = pin->X - d;
       v[1] = pin->Y - in;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[0] = pin->X - in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
@@ -324,7 +324,7 @@ square_therm (PinType *pin, Cardinal style)
       /* top left */
       v[0] = pin->X - d;
       v[1] = pin->Y + out;
-      if ((c = poly_NewContour (v)) == NULL)
+      if ((c = poly_NewContour (poly_CreateNode (v))) == NULL)
         return NULL;
       v[0] = pin->X - in;
       poly_InclVertex (c->head.prev, poly_CreateNode (v));
