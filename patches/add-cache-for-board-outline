Bottom: b488140945039803e5d2518d601d8a407df110ef
Top:    178406651eee62d51f360175f327b43b6c9feb09
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-01-06 23:12:38 +0000

Add cache for board-outline

This adds a cache of the board outline, to improve rendering speed
when plotting the board with an outline.

The cache is invalidated when the "outline" or "route" layer is
updated. We catch this by bodging the ClearFromPolygon() routine,
which is called for almost all layer geometry changes which might
affect us.

XXX: We really need to add a nicer place to be notified of board
layer changes!


---

diff --git a/src/global.h b/src/global.h
index d8002b4..ce67c50 100644
--- a/src/global.h
+++ b/src/global.h
@@ -399,6 +399,8 @@ typedef struct			/* holds all objects */
   struct PCBType *pcb;
   LayerType Layer[MAX_LAYER + EXTRA_LAYERS];
   int polyClip;
+  POLYAREA *outline;
+  bool outline_valid;
 } DataType;
 
 typedef struct			/* holds drill information */
diff --git a/src/hid/gtk/gtkhid-gl.c b/src/hid/gtk/gtkhid-gl.c
index c661c19..8f023ac 100644
--- a/src/hid/gtk/gtkhid-gl.c
+++ b/src/hid/gtk/gtkhid-gl.c
@@ -1431,13 +1431,21 @@ GhidDrawMask (int side, BoxType * screen)
   hid_draw_set_color (out->fgGC, PCB->MaskColor);
   ghid_set_alpha_mult (out->fgGC, thin ? 0.35 : 1.0);
 
+  if (!PCB->Data->outline_valid) {
+
+    if (PCB->Data->outline != NULL)
+      poly_Free (&PCB->Data->outline);
+
+    PCB->Data->outline = board_outline_poly ();
+    PCB->Data->outline_valid = true;
+  }
+
   memset (&polygon, 0, sizeof (polygon));
-  polygon.Clipped = board_outline_poly ();
+  polygon.Clipped = PCB->Data->outline;
   polygon.BoundingBox = *screen;
   polygon.Flags = NoFlags ();
   SET_FLAG (FULLPOLYFLAG, &polygon);
   common_fill_pcb_polygon (out->fgGC, &polygon, screen);
-  poly_Free (&polygon.Clipped);
   poly_FreeContours (&polygon.NoHoles);
   /* THE GL fill_pcb_polygon doesn't work whilst masking */
 //  hid_draw_fill_pcb_polygon (out->fgGC, &polygon, screen);
diff --git a/src/mymem.c b/src/mymem.c
index a402f63..aff501c 100644
--- a/src/mymem.c
+++ b/src/mymem.c
@@ -699,6 +699,9 @@ FreeDataMemory (DataType *data)
   if (data == NULL)
     return;
 
+  if (data->outline)
+    poly_Free (&data->outline);
+
   VIA_LOOP (data);
   {
     free (via->Name);
diff --git a/src/polygon.c b/src/polygon.c
index e284458..587564f 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -1633,6 +1633,16 @@ RestoreToPolygon (DataType * Data, int type, void *ptr1, void *ptr2)
   if (!Data->polyClip)
     return;
 
+  /* XXX: HACK, this is a kludgy place to put a check for recomputing our outline */
+  if (type == LINE_TYPE || type == ARC_TYPE)
+    {
+      LayerType *layer = (LayerType *) ptr1;
+
+      if (strcmp (layer->Name, "outline") == 0 ||
+          strcmp (layer->Name, "route") == 0)
+        Data->outline_valid = false;
+    }
+
   if (type == POLYGON_TYPE)
     InitClip (PCB->Data, (LayerType *) ptr1, (PolygonType *) ptr2);
   else
@@ -1645,6 +1655,16 @@ ClearFromPolygon (DataType * Data, int type, void *ptr1, void *ptr2)
   if (!Data->polyClip)
     return;
 
+  /* XXX: HACK, this is a kludgy place to put a check for recomputing our outline */
+  if (type == LINE_TYPE || type == ARC_TYPE)
+    {
+      LayerType *layer = (LayerType *) ptr1;
+
+      if (strcmp (layer->Name, "outline") == 0 ||
+          strcmp (layer->Name, "route") == 0)
+        Data->outline_valid = false;
+    }
+
   if (type == POLYGON_TYPE)
     InitClip (PCB->Data, (LayerType *) ptr1, (PolygonType *) ptr2);
   else
