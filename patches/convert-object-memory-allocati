Bottom: fb48a6ffdf5ff0e91f3d38f3bdee789c57f42a05
Top:    ea902243bb846e9fcfade89848e91b7d8afd69d6
Author: Peter Clifton <pcjc2@cam.ac.uk>
Date:   2015-04-21 02:08:26 +0100

Convert object memory allocations to use g_slice()


---

diff --git a/src/action.c b/src/action.c
index 86b379d..099d28d 100644
--- a/src/action.c
+++ b/src/action.c
@@ -1890,37 +1890,39 @@ static int
 ActionDumpLibrary (int argc, char **argv, Coord x, Coord y)
 {
   int i, j;
+  GList *ii, *jj;
 
   printf ("**** Do not count on this format.  It will change ****\n\n");
   printf ("MenuN   = %d\n", Library.MenuN);
-  printf ("MenuMax = %d\n", Library.MenuMax);
-  for (i = 0; i < Library.MenuN; i++)
+  for (ii = Library.Menu, i = 0; ii != NULL; ii = g_list_next (ii), i++)
     {
+      LibraryMenuType *menu = ii->data;
+
       printf ("Library #%d:\n", i);
-      printf ("    EntryN    = %d\n", Library.Menu[i].EntryN);
-      printf ("    EntryMax  = %d\n", Library.Menu[i].EntryMax);
-      printf ("    Name      = \"%s\"\n", UNKNOWN (Library.Menu[i].Name));
-      printf ("    directory = \"%s\"\n",
-	      UNKNOWN (Library.Menu[i].directory));
-      printf ("    Style     = \"%s\"\n", UNKNOWN (Library.Menu[i].Style));
-      printf ("    flag      = %d\n", Library.Menu[i].flag);
-
-      for (j = 0; j < Library.Menu[i].EntryN; j++)
+      printf ("    EntryN    = %d\n", menu->EntryN);
+      printf ("    Name      = \"%s\"\n", UNKNOWN (menu->Name));
+      printf ("    directory = \"%s\"\n", UNKNOWN (menu->directory));
+      printf ("    Style     = \"%s\"\n", UNKNOWN (menu->Style));
+      printf ("    flag      = %d\n", menu->flag);
+
+      for (jj = menu->Entry, j = 0; jj != NULL; jj = g_list_next (jj), j++)
 	{
+          LibraryEntryType *entry = jj->data;
+
 	  printf ("    #%4d: ", j);
-	  if (Library.Menu[i].Entry[j].Template == (char *) -1)
+	  if (entry->Template == (char *) -1)
 	    {
 	      printf ("newlib: \"%s\"\n",
-		      UNKNOWN (Library.Menu[i].Entry[j].ListEntry));
+		      UNKNOWN (entry->ListEntry));
 	    }
 	  else
 	    {
 	      printf ("\"%s\", \"%s\", \"%s\", \"%s\", \"%s\"\n",
-		      UNKNOWN (Library.Menu[i].Entry[j].ListEntry),
-		      UNKNOWN (Library.Menu[i].Entry[j].Template),
-		      UNKNOWN (Library.Menu[i].Entry[j].Package),
-		      UNKNOWN (Library.Menu[i].Entry[j].Value),
-		      UNKNOWN (Library.Menu[i].Entry[j].Description));
+		      UNKNOWN (entry->ListEntry),
+		      UNKNOWN (entry->Template),
+		      UNKNOWN (entry->Package),
+		      UNKNOWN (entry->Value),
+		      UNKNOWN (entry->Description));
 	    }
 	}
     }
@@ -3254,6 +3256,8 @@ static const char renumber_help[] =
 static int
 ActionRenumber (int argc, char **argv, Coord x, Coord y)
 {
+  return 0;
+#if 0
   bool changed = false;
   ElementType **element_list;
   ElementType **locked_element_list;
@@ -3591,6 +3595,7 @@ ActionRenumber (int argc, char **argv, Coord x, Coord y)
   free (element_list);
   free (cnt_list);
   return 0;
+#endif
 }
 
 
@@ -4600,16 +4605,15 @@ ActionChangeName (int argc, char **argv, Coord x, Coord y)
 		    SetChangedFlag (true);
 		    if (type == ELEMENT_TYPE)
 		      {
-			RubberbandType *ptr;
-			int i;
+			GList *iter;
 
 			RestoreUndoSerialNumber ();
 			Crosshair.AttachedObject.RubberbandN = 0;
 			LookupRatLines (type, ptr1, ptr2, ptr3);
-			ptr = Crosshair.AttachedObject.Rubberband;
-			for (i = 0; i < Crosshair.AttachedObject.RubberbandN;
-			     i++, ptr++)
+			for (iter = Crosshair.AttachedObject.Rubberband;
+			     iter != NULL; iter = g_list_next (iter))
 			  {
+			    RubberbandType *ptr = iter->data;
 			    if (PCB->RatOn)
 			      EraseRat ((RatType *) ptr->Line);
 			    MoveObjectToRemoveUndoList (RATLINE_TYPE,
@@ -6950,22 +6954,26 @@ find_element_by_refdes (char *refdes)
 static AttributeType *
 lookup_attr (AttributeListType *list, const char *name)
 {
-  int i;
-  for (i=0; i<list->Number; i++)
-    if (strcmp (list->List[i].name, name) == 0)
-      return & list->List[i];
+  GList *iter;
+  for (iter = list->List; iter != NULL; iter = g_list_next (iter))
+    {
+      AttributeType *attr = iter->data;
+      if (strcmp (attr->name, name) == 0)
+        return attr;
+    }
   return NULL;
 }
 
 static void
 delete_attr (AttributeListType *list, AttributeType *attr)
 {
-  int idx = attr - list->List;
-  if (idx < 0 || idx >= list->Number)
-    return;
-  if (list->Number - idx > 1)
-    memmove (attr, attr+1, (list->Number - idx - 1) * sizeof(AttributeType));
-  list->Number --;
+  GList *iter;
+
+  iter = g_list_find (list->List, attr);
+  g_return_if_fail (iter != NULL);
+
+  FreeAttribute (attr);
+  list->List = g_list_delete_link (list->List, iter);
 }
 
 /* ---------------------------------------------------------------- */
diff --git a/src/autoplace.c b/src/autoplace.c
index 5c53757..647c405 100644
--- a/src/autoplace.c
+++ b/src/autoplace.c
@@ -153,16 +153,17 @@ static void
 UpdateXY (NetListType *Nets)
 {
   Cardinal top_group, bottom_group;
-  Cardinal i, j;
+  GList *i, *j;
   /* find layer groups of the top and bottom sides */
   top_group = GetLayerGroupNumberBySide (TOP_SIDE);
   bottom_group = GetLayerGroupNumberBySide (BOTTOM_SIDE);
   /* update all nets */
-  for (i = 0; i < Nets->NetN; i++)
+  for (i = Nets->Net; i != NULL; i = g_list_next (i))
     {
-      for (j = 0; j < Nets->Net[i].ConnectionN; j++)
+      NetType *net = i->data;
+      for (j = net->Connection; j != NULL; j = g_list_next (j))
 	{
-	  ConnectionType *c = &(Nets->Net[i].Connection[j]);
+	  ConnectionType *c = j->data;
 	  switch (c->type)
 	    {
 	    case PAD_TYPE:
@@ -190,7 +191,7 @@ UpdateXY (NetListType *Nets)
 static PointerListType
 collectSelectedElements ()
 {
-  PointerListType list = { 0, 0, NULL };
+  PointerListType list = {0, NULL};
   ELEMENT_LOOP (PCB->Data);
   {
     if (TEST_FLAG (SELECTEDFLAG, element))
@@ -330,32 +331,38 @@ ComputeCost (NetListType *Nets, double T0, double T)
   double delta3 = 0;		/* out of bounds penalty */
   double delta4 = 0;		/* alignment bonus */
   double delta5 = 0;		/* total area penalty */
-  Cardinal i, j;
+  int i;
+  GList *ii, *j;
   Coord minx, maxx, miny, maxy;
   bool allpads, allsameside;
   Cardinal thegroup;
-  BoxListType bounds = { 0, 0, NULL };	/* save bounding rectangles here */
-  BoxListType solderside = { 0, 0, NULL };	/* solder side component bounds */
-  BoxListType componentside = { 0, 0, NULL };	/* component side bounds */
+  BoxListType bounds = {0, NULL};	/* save bounding rectangles here */
+  BoxListType solderside = {0, NULL};	/* solder side component bounds */
+  BoxListType componentside = {0, NULL};	/* component side bounds */
   /* make sure the NetList have the proper updated X and Y coords */
   UpdateXY (Nets);
   /* wire length term.  approximated by half-perimeter of minimum
    * rectangle enclosing the net.  Note that we penalize vias in
    * all-SMD nets by making the rectangle a cube and weighting
    * the "layer height" of the net. */
-  for (i = 0; i < Nets->NetN; i++)
+  for (ii = Nets->Net; ii != NULL; ii = g_list_next (ii))
     {
-      NetType *n = &Nets->Net[i];
+      NetType *n = ii->data;
+      ConnectionType *c;
+
       if (n->ConnectionN < 2)
 	continue;		/* no cost to go nowhere */
-      minx = maxx = n->Connection[0].X;
-      miny = maxy = n->Connection[0].Y;
-      thegroup = n->Connection[0].group;
-      allpads = (n->Connection[0].type == PAD_TYPE);
+
+      j = n->Connection;
+      c = j->data;
+      minx = maxx = c->X;
+      miny = maxy = c->Y;
+      thegroup = c->group;
+      allpads = (c->type == PAD_TYPE);
       allsameside = true;
-      for (j = 1; j < n->ConnectionN; j++)
+      for (; j != NULL; j = g_list_next (j))
 	{
-	  ConnectionType *c = &(n->Connection[j]);
+	  c = j->data;
 	  MAKEMIN (minx, c->X);
 	  MAKEMAX (maxx, c->X);
 	  MAKEMIN (miny, c->Y);
@@ -506,10 +513,8 @@ ComputeCost (NetListType *Nets, double T0, double T)
    * aligning to something far away isn't profitable */
   {
     /* create r tree */
-    PointerListType seboxes = { 0, 0, NULL }
-    , ceboxes =
-    {
-    0, 0, NULL};
+    PointerListType seboxes = {0, NULL};
+    PointerListType ceboxes = {0, NULL};
     struct ebox
     {
       BoxType box;
@@ -603,6 +608,12 @@ ComputeCost (NetListType *Nets, double T0, double T)
   return W + (delta1 + delta2 + delta3 - delta4 + delta5);
 }
 
+void *
+random_pointer_from_list (PointerListType *pl)
+{
+  return g_list_nth_data (pl->Ptr, random () % pl->PtrN);
+}
+
 /* ---------------------------------------------------------------------------
  * Perturb:
  *  1) flip SMD from solder side to component side or vice-versa.
@@ -616,7 +627,7 @@ createPerturbation (PointerListType *selected, double T)
 {
   PerturbationType pt = { 0 };
   /* pick element to perturb */
-  pt.element = (ElementType *) selected->Ptr[random () % selected->PtrN];
+  pt.element = (ElementType *) random_pointer_from_list (selected);
   /* exchange, flip/rotate or shift? */
   switch (random () % ((selected->PtrN > 1) ? 3 : 2))
     {
@@ -654,10 +665,9 @@ createPerturbation (PointerListType *selected, double T)
     case 2:
       {				/* exchange! */
 	pt.which = EXCHANGE;
-	pt.other = (ElementType *)
-	  selected->Ptr[random () % (selected->PtrN - 1)];
-	if (pt.other == pt.element)
-	  pt.other = (ElementType *) selected->Ptr[selected->PtrN - 1];
+	pt.other = pt.element;
+	while (pt.other == pt.element)
+	  pt.other = (ElementType *) random_pointer_from_list (selected);
 	/* don't allow exchanging a solderside-side SMD component
 	 * with a non-SMD component. */
 	if ((pt.element->PinN != 0 /* non-SMD */  &&
@@ -748,7 +758,7 @@ bool
 AutoPlaceSelected (void)
 {
   NetListType *Nets;
-  PointerListType Selected = { 0, 0, NULL };
+  PointerListType Selected = {0, NULL};
   PerturbationType pt;
   double C0, T0;
   bool changed = false;
diff --git a/src/autoroute.c b/src/autoroute.c
index 0b4b9e9..cd3f734 100644
--- a/src/autoroute.c
+++ b/src/autoroute.c
@@ -1007,7 +1007,6 @@ CreateRouteData ()
     {
       layergroupboxes[i].Ptr = NULL;
       layergroupboxes[i].PtrN = 0;
-      layergroupboxes[i].PtrMax = 0;
       GROUP_LOOP (PCB->Data, i);
       {
 	if (layer->LineN || layer->ArcN)
diff --git a/src/buffer.c b/src/buffer.c
index 789985d..b9a9334 100644
--- a/src/buffer.c
+++ b/src/buffer.c
@@ -578,47 +578,55 @@ void
 make_footprint_hash ()
 {
   int i, j;
+  GList *ii, *jj;
   char *fp;
   int num_entries = 0;
 
   clear_footprint_hash ();
 
-  for (i=0; i<Library.MenuN; i++)
-    for (j=0; j<Library.Menu[i].EntryN; j++)
-      num_entries ++;
+  for (ii = Library.Menu; ii != NULL; ii = g_list_next (ii))
+    {
+      LibraryMenuType *menu = ii->data;
+      for (jj = menu->Entry; jj != NULL; jj = g_list_next (jj))
+        num_entries ++;
+    }
   footprint_hash = (FootprintHashEntry *)malloc (num_entries * sizeof(FootprintHashEntry));
+
   num_entries = 0;
 
   /* There are two types of library entries.  The file-based types
      have a Template of (char *)-1 and the AllocatedMemory is the full
      path to the footprint file.  The m4 ones have the footprint name
      in brackets in the description.  */
-  for (i=0; i<Library.MenuN; i++)
+  for (ii = Library.Menu, i = 0; ii != NULL; ii = g_list_next (ii), i++)
     {
+      LibraryMenuType *menu = ii->data;
 #ifdef DEBUG
   printf("In make_footprint_hash, looking for footprints in %s\n", 
-	 Library.Menu[i].directory);
+	 menu->directory);
 #endif
 
-    for (j=0; j<Library.Menu[i].EntryN; j++)
+      for (jj = menu->Entry, j = 0; jj != NULL; jj = g_list_next (jj), j++)
 	{
+          LibraryEntryType *entry = jj->data;
+
 	  footprint_hash[num_entries].menu_idx = i;
 	  footprint_hash[num_entries].entry_idx = j;
-	  if (Library.Menu[i].Entry[j].Template == (char *) -1) 
+	  if (entry->Template == (char *) -1) 
           /* file */
 	    {
 #ifdef DEBUG
-/*	      printf(" ... Examining file %s\n", Library.Menu[i].Entry[j].AllocatedMemory); */
+/*	      printf(" ... Examining file %s\n", entry->AllocatedMemory); */
 #endif
-	      fp = strrchr (Library.Menu[i].Entry[j].AllocatedMemory, '/');
+	      fp = strrchr (entry->AllocatedMemory, '/');
 
 	      if (!fp)
-		fp = strrchr (Library.Menu[i].Entry[j].AllocatedMemory, '\\');
+		fp = strrchr (entry->AllocatedMemory, '\\');
 
 	      if (fp)
 		fp ++;
 	      else 
-		fp = Library.Menu[i].Entry[j].AllocatedMemory;
+		fp = entry->AllocatedMemory;
 
 #ifdef DEBUG
 /* 	      printf(" ... found file footprint %s\n",  fp); */
@@ -630,7 +638,7 @@ make_footprint_hash ()
 	  else 
           /* m4 */
 	    {
-	      fp = strrchr (Library.Menu[i].Entry[j].Description, '[');
+	      fp = strrchr (entry->Description, '[');
 	      if (fp)
 		{
 		  footprint_hash[num_entries].footprint = strdup (fp+1);
@@ -641,7 +649,7 @@ make_footprint_hash ()
 		}
 	      else
 		{
-		  fp = Library.Menu[i].Entry[j].Description;
+		  fp = entry->Description;
 		  footprint_hash[num_entries].footprint = fp;
 		  footprint_hash[num_entries].footprint_allocated = 0;
 		}
@@ -718,8 +726,8 @@ LoadFootprintByName (BufferType *Buffer, char *Footprint)
       return 1;
     }
 
-  menu = & Library.Menu[fpe->menu_idx];
-  entry = & menu->Entry[fpe->entry_idx];
+  menu = g_list_nth_data (Library.Menu, fpe->menu_idx);
+  entry = g_list_nth_data (menu->Entry, fpe->entry_idx);
 
   if (entry->Template == (char *) -1)
     {
diff --git a/src/copy.c b/src/copy.c
index a0385db..4acc9e4 100644
--- a/src/copy.c
+++ b/src/copy.c
@@ -117,8 +117,8 @@ ElementType *
 CopyElementLowLevel (DataType *Data, ElementType *Src,
                      bool uniqueName, Coord dx, Coord dy, int mask_flags)
 {
-  int i;
   ElementType *Dest;
+  GList *iter;
 
   /* both coordinates and flags are the same */
   Dest = CreateNewElement (Data, &PCB->Font,
@@ -165,10 +165,11 @@ CopyElementLowLevel (DataType *Data, ElementType *Src,
   }
   END_LOOP;
 
-  for (i=0; i<Src->Attributes.Number; i++)
-    CreateNewAttribute (& Dest->Attributes,
-			Src->Attributes.List[i].name,
-			Src->Attributes.List[i].value);
+  for (iter = Src->Attributes.List; iter != NULL; iter = g_list_next (iter))
+    {
+      AttributeType *attr = iter->data;
+      CreateNewAttribute (&Dest->Attributes, attr->name, attr->value);
+    }
 
   Dest->MarkX = Src->MarkX + dx;
   Dest->MarkY = Src->MarkY + dy;
diff --git a/src/create.c b/src/create.c
index fe9619a..4ad904e 100644
--- a/src/create.c
+++ b/src/create.c
@@ -918,25 +918,19 @@ CreateNewLineInSymbol (SymbolType *Symbol,
 		       Coord X1, Coord Y1,
 		       Coord X2, Coord Y2, Coord Thickness)
 {
-  LineType *line = Symbol->Line;
+  LineType* line;
 
-  /* realloc new memory if necessary and clear it */
-  if (Symbol->LineN >= Symbol->LineMax)
-    {
-      Symbol->LineMax += STEP_SYMBOLLINE;
-      line = (LineType *)realloc (line, Symbol->LineMax * sizeof (LineType));
-      Symbol->Line = line;
-      memset (line + Symbol->LineN, 0, STEP_SYMBOLLINE * sizeof (LineType));
-    }
+  line = g_slice_new0 (LineType);
+  Symbol->Line = g_list_append (Symbol->Line, line);
+  Symbol->LineN ++;
 
   /* copy values */
-  line = line + Symbol->LineN++;
   line->Point1.X = X1;
   line->Point1.Y = Y1;
   line->Point2.X = X2;
   line->Point2.Y = Y2;
   line->Thickness = Thickness;
-  return (line);
+  return line;
 }
 
 /* ---------------------------------------------------------------------------
@@ -1008,13 +1002,14 @@ CreateNewConnection (LibraryMenuType *net, char *conn)
 AttributeType *
 CreateNewAttribute (AttributeListType *list, char *name, char *value)
 {
-  if (list->Number >= list->Max)
-    {
-      list->Max += 10;
-      list->List = (AttributeType *)realloc (list->List, list->Max * sizeof (AttributeType));
-    }
-  list->List[list->Number].name = STRDUP (name);
-  list->List[list->Number].value = STRDUP (value);
-  list->Number++;
-  return &list->List[list->Number - 1];
+  AttributeType *attr;
+
+  attr = g_slice_new0 (AttributeType);
+  list->List = g_list_append (list->List, attr);
+  list->Number ++;
+
+  attr->name = STRDUP (name);
+  attr->value = STRDUP (value);
+
+  return attr;
 }
diff --git a/src/crosshair.c b/src/crosshair.c
index 49fab31..6e6ff7a 100644
--- a/src/crosshair.c
+++ b/src/crosshair.c
@@ -349,8 +349,7 @@ XORDrawInsertPointObject (hidGC gc)
 static void
 XORDrawMoveOrCopyObject (hidGC gc)
 {
-  RubberbandType *ptr;
-  Cardinal i;
+  GList *i;
   Coord dx = Crosshair.X - Crosshair.AttachedObject.X,
     dy = Crosshair.Y - Crosshair.AttachedObject.Y;
 
@@ -460,10 +459,9 @@ XORDrawMoveOrCopyObject (hidGC gc)
     }
 
   /* draw the attached rubberband lines too */
-  i = Crosshair.AttachedObject.RubberbandN;
-  ptr = Crosshair.AttachedObject.Rubberband;
-  while (i)
+  for (i = Crosshair.AttachedObject.Rubberband; i != NULL; i = g_list_next (i))
     {
+      RubberbandType *ptr = i->data;
       PointType *point1, *point2;
 
       if (TEST_FLAG (VIAFLAG, ptr->Line))
@@ -493,9 +491,6 @@ XORDrawMoveOrCopyObject (hidGC gc)
 	                     ptr->Line->Point1.Y + dy,
 	                     ptr->Line->Point2.X + dx,
 	                     ptr->Line->Point2.Y + dy, ptr->Line->Thickness);
-
-      ptr++;
-      i--;
     }
 }
 
diff --git a/src/drill.c b/src/drill.c
index 7830e49..1ae06ba 100644
--- a/src/drill.c
+++ b/src/drill.c
@@ -83,11 +83,9 @@ InitializeDrill (DrillType *drill, PinType *pin, ElementType *element)
   drill->ViaCount = 0;
   drill->PinCount = 0;
   drill->UnplatedCount = 0;
-  drill->ElementMax = 0;
   drill->Element = NULL;
   drill->PinN = 0;
   drill->Pin = NULL;
-  drill->PinMax = 0;
   ptr = (void *) GetDrillPinMemory (drill);
   *((PinType **) ptr) = pin;
   if (element)
@@ -159,9 +157,8 @@ GetDrillInfo (DataType *top)
 		}
 	    }
 	    END_LOOP;
-	    if (AllDrills->Drill[AllDrills->DrillN - 1].DrillSize <
-		pin->DrillingHole)
-	      {
+	    if (AllDrills->Drill[AllDrills->DrillN - 1].DrillSize < pin->DrillingHole)
+	      { /* ^^ Last drill in the list, presumably sorted? */
 		Drill = GetDrillInfoDrillMemory (AllDrills);
 		InitializeDrill (Drill, pin, element);
 	      }
@@ -224,8 +221,7 @@ RoundDrillInfo (DrillInfoType *d, int roundto)
 	{
 	  int ei, ej;
 
-	  d->Drill[i].ElementMax
-	    = d->Drill[i].ElementN + d->Drill[i+1].ElementN;
+	  d->Drill[i].ElementMax = d->Drill[i].ElementN + d->Drill[i+1].ElementN;
 	  if (d->Drill[i].ElementMax)
 	    {
 	      d->Drill[i].Element = (ElementType **)realloc (d->Drill[i].Element,
@@ -273,16 +269,3 @@ RoundDrillInfo (DrillInfoType *d, int roundto)
 	}
     }
 }
-
-void
-FreeDrillInfo (DrillInfoType *Drills)
-{
-  DRILL_LOOP (Drills);
-  {
-    free (drill->Element);
-    free (drill->Pin);
-  }
-  END_LOOP;
-  free (Drills->Drill);
-  free (Drills);
-}
diff --git a/src/fontmode.c b/src/fontmode.c
index 4afd3cd..e3e6b19 100644
--- a/src/fontmode.c
+++ b/src/fontmode.c
@@ -78,6 +78,7 @@ FontEdit (int argc, char **argv, Coord Ux, Coord Uy)
   SymbolType *symbol;
   LayerType *lfont, *lorig, *lwidth, *lgrid;
   int s, l;
+  GList *ll;
 
   if (hid_actionl ("New", "Font", 0))
     return 1;
@@ -124,25 +125,26 @@ FontEdit (int argc, char **argv, Coord Ux, Coord Uy)
       miny = MIL_TO_COORD (5);
       maxy = font->MaxHeight;
 
-      for (l = 0; l < symbol->LineN; l++)
+      for (ll = symbol->Line; ll != NULL; ll = g_list_next (ll))
 	{
+	  LineType *line = ll->data;
+
 	  CreateDrawnLineOnLayer (lfont,
-				  symbol->Line[l].Point1.X + ox,
-				  symbol->Line[l].Point1.Y + oy,
-				  symbol->Line[l].Point2.X + ox,
-				  symbol->Line[l].Point2.Y + oy,
-				  symbol->Line[l].Thickness,
-				  symbol->Line[l].Thickness, NoFlags ());
-	  CreateDrawnLineOnLayer (lorig, symbol->Line[l].Point1.X + ox,
-				  symbol->Line[l].Point1.Y + oy,
-				  symbol->Line[l].Point2.X + ox,
-				  symbol->Line[l].Point2.Y + oy,
-				  symbol->Line[l].Thickness,
-				  symbol->Line[l].Thickness, NoFlags ());
-	  if (maxx < symbol->Line[l].Point1.X)
-	    maxx = symbol->Line[l].Point1.X;
-	  if (maxx < symbol->Line[l].Point2.X)
-	    maxx = symbol->Line[l].Point2.X;
+				  line->Point1.X + ox,
+				  line->Point1.Y + oy,
+				  line->Point2.X + ox,
+				  line->Point2.Y + oy,
+				  line->Thickness,
+				  line->Thickness, NoFlags ());
+	  CreateDrawnLineOnLayer (lorig,
+				  line->Point1.X + ox,
+				  line->Point1.Y + oy,
+				  line->Point2.X + ox,
+				  line->Point2.Y + oy,
+				  line->Thickness,
+				  line->Thickness, NoFlags ());
+	  maxx = MAX (maxx, line->Point1.X);
+	  maxx = MAX (maxx, line->Point2.X);
 	}
       w = maxx + symbol->Delta + ox;
       CreateDrawnLineOnLayer (lwidth,
diff --git a/src/global.h b/src/global.h
index d8002b4..77dc082 100644
--- a/src/global.h
+++ b/src/global.h
@@ -218,8 +218,8 @@ typedef struct
 
 struct AttributeListType
 {
-  int Number, Max;
-  AttributeType *List;
+  int Number;
+  GList *List;
 };
 
 /* ---------------------------------------------------------------------------
@@ -262,15 +262,13 @@ typedef struct
 struct polygon_st			/* holds information about a polygon */
 {
   ANYOBJECTFIELDS;
-  Cardinal PointN,		/* number of points in polygon */
-    PointMax;			/* max number from malloc() */
+  Cardinal PointN;		/* number of points in polygon */
   POLYAREA *Clipped;		/* the clipped region of this polygon */
   PLINE *NoHoles;		/* the polygon broken into hole-less regions */
   int NoHolesValid;		/* Is the NoHoles polygon up to date? */
-  PointType *Points;		/* data */
-  Cardinal *HoleIndex;		/* Index of hole data within the Points array */
+  GList *Points;		/* data */
+  GList *HoleIndex;		/* Index of hole data within the Points array */
   Cardinal HoleIndexN;		/* number of holes in polygon */
-  Cardinal HoleIndexMax;	/* max number from malloc() */
 
 };
 
@@ -368,10 +366,9 @@ typedef struct
  */
 typedef struct			/* a single symbol */
 {
-  LineType *Line;
+  GList *Line;
   bool Valid;
-  Cardinal LineN,		/* number of lines */
-    LineMax;
+  Cardinal LineN;		/* number of lines */
   Coord Width, Height,		/* size of cell */
     Delta;			/* distance to next symbol */
 } SymbolType;
@@ -405,21 +402,18 @@ typedef struct			/* holds drill information */
 {
   Coord DrillSize;		/* this drill's diameter */
   Cardinal ElementN,		/* the number of elements using this drill size */
-    ElementMax,			/* max number of elements from malloc() */
     PinCount,			/* number of pins drilled this size */
     ViaCount,			/* number of vias drilled this size */
     UnplatedCount,		/* number of these holes that are unplated */
-    PinN,			/* number of drill coordinates in the list */
-    PinMax;			/* max number of coordinates from malloc() */
-  PinType **Pin;		/* coordinates to drill */
-  ElementType **Element;	/* a pointer to an array of element pointers */
+    PinN;			/* number of drill coordinates in the list */
+  GList *Pin;		/* coordinates to drill */
+  GList *Element;		/* a pointer to an array of element pointers */
 } DrillType;
 
 typedef struct			/* holds a range of Drill Infos */
 {
-  Cardinal DrillN,		/* number of drill sizes */
-    DrillMax;			/* max number from malloc() */
-  DrillType *Drill;		/* plated holes */
+  Cardinal DrillN;		/* number of drill sizes */
+  GList *Drill;			/* plated holes */
 } DrillInfoType;
 
 typedef struct
@@ -456,9 +450,8 @@ typedef struct
   char *Name,			/* name of the menu entry */
    *directory,			/* Directory name library elements are from */
    *Style;			/* routing style */
-  Cardinal EntryN,		/* number of objects */
-    EntryMax;			/* number of reserved memory locations */
-  LibraryEntryType *Entry;	/* the entries */
+  Cardinal EntryN;		/* number of objects */
+  GList *Entry;			/* the entries */
   char flag;			/* used by the netlist window to enable/disable nets */
   char internal;		/* if set, this is an internal-only entry, not
 				   part of the global netlist. */
@@ -467,8 +460,7 @@ typedef struct
 typedef struct
 {
   Cardinal MenuN;               /* number of objects */
-  Cardinal MenuMax;             /* number of reserved memory locations */
-  LibraryMenuType *Menu;      /* the entries */
+  GList *Menu;                  /* the entries */
 } LibraryType;
 
 
@@ -569,9 +561,8 @@ typedef struct			/* currently attached object */
   void *Ptr1,			/* three pointers to data, see */
    *Ptr2,			/* search.c */
    *Ptr3;
-  Cardinal RubberbandN,		/* number of lines in array */
-    RubberbandMax;
-  RubberbandType *Rubberband;
+  Cardinal RubberbandN;		/* number of lines in array */
+  GList *Rubberband;
 } AttachedObjectType;
 
 enum crosshair_shape
@@ -727,38 +718,33 @@ typedef struct			/* holds a connection */
 
 typedef struct			/* holds a net of connections */
 {
-  Cardinal ConnectionN,		/* the number of connections contained */
-    ConnectionMax;		/* max connections from malloc */
-  ConnectionType *Connection;
+  Cardinal ConnectionN;		/* the number of connections contained */
+  GList *Connection;
   RouteStyleType *Style;
 } NetType;
 
 typedef struct			/* holds a list of nets */
 {
-  Cardinal NetN,		/* the number of subnets contained */
-    NetMax;			/* max subnets from malloc */
-  NetType *Net;
+  Cardinal NetN;		/* the number of subnets contained */
+  GList *Net;
 } NetListType;
 
 typedef struct			/* holds a list of net lists */
 {
-  Cardinal NetListN,		/* the number of net lists contained */
-    NetListMax;			/* max net lists from malloc */
-  NetListType *NetList;
+  Cardinal NetListN;		/* the number of net lists contained */
+  GList *NetList;
 } NetListListType;
 
 typedef struct			/* holds a generic list of pointers */
 {
-  Cardinal PtrN,		/* the number of pointers contained */
-    PtrMax;			/* max subnets from malloc */
-  void **Ptr;
+  Cardinal PtrN;		/* the number of pointers contained */
+  GList *Ptr;
 } PointerListType;
 
 typedef struct
 {
-  Cardinal BoxN,		/* the number of boxes contained */
-    BoxMax;			/* max boxes from malloc */
-  BoxType *Box;
+  Cardinal BoxN;		/* the number of boxes contained */
+  GList *Box;
 
 } BoxListType;
 
diff --git a/src/hid/common/draw_helpers.c b/src/hid/common/draw_helpers.c
index dfa9db4..6a4fddb 100644
--- a/src/hid/common/draw_helpers.c
+++ b/src/hid/common/draw_helpers.c
@@ -43,7 +43,7 @@ common_draw_pcb_text (hidGC gc, TextType *Text, Coord min_line_width)
 {
   Coord x = 0;
   unsigned char *string = (unsigned char *) Text->TextString;
-  Cardinal n;
+  GList *iter;
   FontType *font = &PCB->Font;
 
   while (string && *string)
@@ -51,11 +51,12 @@ common_draw_pcb_text (hidGC gc, TextType *Text, Coord min_line_width)
       /* draw lines if symbol is valid and data is present */
       if (*string <= MAX_FONTPOSITION && font->Symbol[*string].Valid)
         {
-          LineType *line = font->Symbol[*string].Line;
-          LineType newline;
-
-          for (n = font->Symbol[*string].LineN; n; n--, line++)
+          for (iter = font->Symbol[*string].Line;
+               iter != NULL; iter = g_list_next (iter))
             {
+              LineType *line = iter->data;
+              LineType newline;
+
               /* create one line, scale, move, rotate and swap it */
               newline = *line;
               newline.Point1.X = SCALE_TEXT (newline.Point1.X + x, Text->Scale);
diff --git a/src/hid/gtk/gtkhid-main.c b/src/hid/gtk/gtkhid-main.c
index 7afe3c0..ed02ff7 100644
--- a/src/hid/gtk/gtkhid-main.c
+++ b/src/hid/gtk/gtkhid-main.c
@@ -928,6 +928,7 @@ static void
 ghid_attributes_revert ()
 {
   int i;
+  GList *iter;
 
   ghid_attributes_need_rows (attributes_list->Number);
 
@@ -941,11 +942,14 @@ ghid_attributes_revert ()
     }
 
   /* Fill in values */
-  for (i=0; i<attributes_list->Number; i++)
+  for (iter = attributes_list->List, i = 0;
+       iter != NULL; iter = g_list_next (iter), i++)
     {
+      AttributeType *attr = iter->data;
+
       /* create row [i] */
-      gtk_entry_set_text (GTK_ENTRY (attr_row[i].w_name), attributes_list->List[i].name);
-      gtk_entry_set_text (GTK_ENTRY (attr_row[i].w_value), attributes_list->List[i].value);
+      gtk_entry_set_text (GTK_ENTRY (attr_row[i].w_name), attr->name);
+      gtk_entry_set_text (GTK_ENTRY (attr_row[i].w_value), attr->value);
 #if 0
 #endif
     }
@@ -1013,28 +1017,14 @@ ghid_attributes (char *owner, AttributeListType *attrs)
       if (response == GTK_RESPONSE_OK)
 	{
 	  int i;
+	  FreeAttributeListMemory (attributes_list);
+
 	  /* Copy the values back */
-	  for (i=0; i<attributes_list->Number; i++)
-	    {
-	      if (attributes_list->List[i].name)
-		free (attributes_list->List[i].name);
-	      if (attributes_list->List[i].value)
-		free (attributes_list->List[i].value);
-	    }
-	  if (attributes_list->Max < attr_num_rows)
-	    {
-	      int sz = attr_num_rows * sizeof (AttributeType);
-	      if (attributes_list->List == NULL)
-		attributes_list->List = (AttributeType *) malloc (sz);
-	      else
-		attributes_list->List = (AttributeType *) realloc (attributes_list->List, sz);
-	      attributes_list->Max = attr_num_rows;
-	    }
-	  for (i=0; i<attr_num_rows; i++)
+	  for (i = 0; i < attr_num_rows; i++)
 	    {
-	      attributes_list->List[i].name = strdup (gtk_entry_get_text (GTK_ENTRY (attr_row[i].w_name)));
-	      attributes_list->List[i].value = strdup (gtk_entry_get_text (GTK_ENTRY (attr_row[i].w_value)));
-	      attributes_list->Number = attr_num_rows;
+	      AttributeType *attr = GetAttributeMemory (attributes_list);
+	      attr->name = strdup (gtk_entry_get_text (GTK_ENTRY (attr_row[i].w_name)));
+	      attr->value = strdup (gtk_entry_get_text (GTK_ENTRY (attr_row[i].w_value)));
 	    }
 
 	  break;
diff --git a/src/hid/gtk/gui-netlist-window.c b/src/hid/gtk/gui-netlist-window.c
index 58fe107..edfc7a9 100644
--- a/src/hid/gtk/gui-netlist-window.c
+++ b/src/hid/gtk/gui-netlist-window.c
@@ -525,9 +525,8 @@ netlist_disable_all_cb (GtkToggleButton * button, gpointer data)
 static void
 netlist_select_cb (GtkWidget * widget, gpointer data)
 {
-  LibraryEntryType *entry;
   ConnectionType conn;
-  gint i;
+  GList *iter;
   gboolean select_flag = GPOINTER_TO_INT (data);
 
   if (!selected_net)
@@ -538,9 +537,12 @@ netlist_select_cb (GtkWidget * widget, gpointer data)
   InitConnectionLookup ();
   ClearFlagOnAllObjects (true, FOUNDFLAG);
 
-  for (i = selected_net->EntryN, entry = selected_net->Entry; i; i--, entry++)
+  for (iter = selected_net->Entry; iter != NULL; iter = g_list_next (iter)) {
+    LibraryEntryType *entry = iter->data;
+
     if (SeekPad (entry, &conn, false))
       RatFindHook (conn.type, conn.ptr1, conn.ptr2, conn.ptr2, true, FOUNDFLAG, true);
+  }
 
   SelectByFlag (FOUNDFLAG, select_flag);
   ClearFlagOnAllObjects (false, FOUNDFLAG);
@@ -853,9 +855,8 @@ hunt_named_node (GtkTreeModel *model, GtkTreePath *path,
 {
   struct ggnfnn_task *task = (struct ggnfnn_task *)data;
   LibraryMenuType *net;
-  LibraryEntryType *node;
   gchar *str;
-  gint j;
+  GList *j;
   gboolean is_disabled;
 
   /* We only want to inspect leaf nodes in the tree */
@@ -872,13 +873,16 @@ hunt_named_node (GtkTreeModel *model, GtkTreePath *path,
     return FALSE;
 
   /* Look for the node name in this net. */
-  for (j = net->EntryN, node = net->Entry; j; j--, node++)
-    if (node->ListEntry && !strcmp (task->node_name, node->ListEntry))
+  for (j = net->Entry; j != NULL; j = g_list_next (j)) {
+    LibraryEntryType *entry = j->data;
+
+    if (entry->ListEntry && !strcmp (task->node_name, entry->ListEntry))
       {
         task->found_net = net;
         task->iter = *iter;
         return TRUE;
       }
+  }
 
   return FALSE;
 }
@@ -998,7 +1002,7 @@ ghid_netlist_window_update (gboolean init_nodes)
 
   /* XXX Check if the select callback does this for us */
   if (init_nodes)
-    node_model_update ((&PCB->NetlistLib)->Menu);
+    node_model_update ((LibraryMenuType *)PCB->NetlistLib.Menu->data);
 }
 
 static gint
diff --git a/src/hid/nelma/nelma.c b/src/hid/nelma/nelma.c
index a4712de..2f2766d 100644
--- a/src/hid/nelma/nelma.c
+++ b/src/hid/nelma/nelma.c
@@ -327,28 +327,26 @@ nelma_write_materials(FILE * out)
 static void 
 nelma_write_nets(FILE * out)
 {
-	LibraryType     netlist;
 	LibraryMenuType *net;
 	LibraryEntryType *pin;
+	GList *n, *m;
 
-	int             n, m, i, idx;
+	int             i, idx;
 
 	const char     *ext;
 
-	netlist = PCB->NetlistLib;
-
 	fprintf(out, "\n/* **** Nets **** */\n\n");
 
-	for (n = 0; n < netlist.MenuN; n++) {
-		net = &netlist.Menu[n];
+	for (n = PCB->NetlistLib.Menu; n != NULL; n = g_list_next (n)) {
+		net = n->data;
 
 		/* Weird, but correct */
 		fprintf(out, "net %s {\n", &net->Name[2]);
 
 		fprintf(out, "\tobjects = {\n");
 
-		for (m = 0; m < net->EntryN; m++) {
-			pin = &net->Entry[m];
+		for (m = net->Entry; m != NULL; m = g_list_next (m)) {
+			pin = m->data;
 
 			/* pin_name_to_xy(pin, &x, &y); */
 
@@ -380,7 +378,7 @@ nelma_write_layer(FILE * out, int z, int h,
 	LibraryMenuType *net;
 	LibraryEntryType *pin;
 
-	int             n, m;
+	GList *n, *m;
 
 	fprintf(out, "layer %s {\n", name);
 	fprintf(out, "\theight = %d\n", h);
@@ -391,11 +389,11 @@ nelma_write_layer(FILE * out, int z, int h,
 		fprintf(out, "\tobjects = {\n");
 		netlist = PCB->NetlistLib;
 
-		for (n = 0; n < netlist.MenuN; n++) {
-			net = &netlist.Menu[n];
+		for (n = PCB->NetlistLib.Menu; n != NULL; n = g_list_next (n)) {
+			net = n->data;
 
-			for (m = 0; m < net->EntryN; m++) {
-				pin = &net->Entry[m];
+			for (m = net->Entry; m != NULL; m = g_list_next (m)) {
+				pin = m->data;
 
 				if (m != 0 || n != 0)
 					fprintf(out, ",\n");
@@ -501,17 +499,17 @@ nelma_write_objects(FILE * out)
 	LibraryMenuType *net;
 	LibraryEntryType *pin;
 
-	int             n, m;
+	GList *n, *m;
 
 	netlist = PCB->NetlistLib;
 
 	fprintf(out, "\n/* **** Objects **** */\n\n");
 
-	for (n = 0; n < netlist.MenuN; n++) {
-		net = &netlist.Menu[n];
+	for (n = PCB->NetlistLib.Menu; n != NULL; n = g_list_next (n)) {
+		net = n->data;
 
-		for (m = 0; m < net->EntryN; m++) {
-			pin = &net->Entry[m];
+		for (m = net->Entry; m != NULL; m = g_list_next (m)) {
+			pin = m->data;
 
 			nelma_write_object(out, pin);
 		}
diff --git a/src/intersect.c b/src/intersect.c
index 59aa064..1758bba 100644
--- a/src/intersect.c
+++ b/src/intersect.c
@@ -90,13 +90,15 @@ createSortedYList (BoxListType *boxlist)
   LocationList yCoords;
   Coord last;
   int i, n;
+  GList *ii;
   /* create sorted list of Y coordinates */
   yCoords.size = 2 * boxlist->BoxN;
   yCoords.p = (Coord *)calloc (yCoords.size, sizeof (*yCoords.p));
-  for (i = 0; i < boxlist->BoxN; i++)
+  for (ii = boxlist->Box, i = 0; ii != NULL; ii = g_list_next (ii), i++)
     {
-      yCoords.p[2 * i] = boxlist->Box[i].Y1;
-      yCoords.p[2 * i + 1] = boxlist->Box[i].Y2;
+      BoxType *box = ii->data;
+      yCoords.p[2 * i + 0] = box->Y1;
+      yCoords.p[2 * i + 1] = box->Y2;
     }
   qsort (yCoords.p, yCoords.size, sizeof (*yCoords.p), comparepos);
   /* count uniq y coords */
@@ -197,12 +199,15 @@ deleteSegment (SegmentTree * st, int n, Coord Y1, Coord Y2)
 double
 ComputeIntersectionArea (BoxListType *boxlist)
 {
-  Cardinal i;
+  GList *i;
   double area = 0.0;
   /* first get the aggregate area. */
-  for (i = 0; i < boxlist->BoxN; i++)
-    area += (double) (boxlist->Box[i].X2 - boxlist->Box[i].X1) *
-      (double) (boxlist->Box[i].Y2 - boxlist->Box[i].Y1);
+  for (i = boxlist->Box; i != NULL; i = g_list_next (i))
+    {
+      BoxType *box = i->data;
+      area += (double) (box->X2 - box->X1) *
+              (double) (box->Y2 - box->Y1);
+    }
   /* intersection area is aggregate - union. */
   return area * 0.0001 - ComputeUnionArea (boxlist);
 }
@@ -216,6 +221,7 @@ ComputeUnionArea (BoxListType *boxlist)
 {
   BoxType **rectLeft, **rectRight;
   Cardinal i, j;
+  GList *ii;
   LocationList yCoords;
   SegmentTree segtree;
   Coord lastX;
@@ -231,11 +237,12 @@ ComputeUnionArea (BoxListType *boxlist)
   /* create sorted list of left and right X coordinates of rectangles */
   rectLeft = (BoxType **)calloc (boxlist->BoxN, sizeof (*rectLeft));
   rectRight = (BoxType **)calloc (boxlist->BoxN, sizeof (*rectRight));
-  for (i = 0; i < boxlist->BoxN; i++)
+  for (ii = boxlist->Box, i = 0; ii != NULL; ii = g_list_next (ii), i++)
     {
-      assert (boxlist->Box[i].X1 <= boxlist->Box[i].X2);
-      assert (boxlist->Box[i].Y1 <= boxlist->Box[i].Y2);
-      rectLeft[i] = rectRight[i] = &boxlist->Box[i];
+      BoxType *box = ii->data;
+      assert (boxlist->Box[i].X1 <= box->X2);
+      assert (boxlist->Box[i].Y1 <= box->Y2);
+      rectLeft[i] = rectRight[i] = box;
     }
   qsort (rectLeft, boxlist->BoxN, sizeof (*rectLeft), compareleft);
   qsort (rectRight, boxlist->BoxN, sizeof (*rectRight), compareright);
diff --git a/src/macro.h b/src/macro.h
index a34693a..64c7eff 100644
--- a/src/macro.h
+++ b/src/macro.h
@@ -14,7 +14,7 @@
  *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  *  GNU General Public License for more details.
  *
- *  You should have received a copy of the GNU General Public License
+ *  You should have received a __copy of the GNU General Public License
  *  along with this program; if not, write to the Free Software
  *  Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
  *
@@ -195,33 +195,37 @@ extern int mem_any_set (unsigned char *, int);
        __iter = __next, __next = g_list_next (__iter), n++) {       \
     PinType *via = __iter->data;
 
-#define DRILL_LOOP(top) do             {               \
-        Cardinal        n;                                      \
-        DrillType *drill;                                       \
-        for (n = 0; (top)->DrillN > 0 && n < (top)->DrillN; n++)                        \
-        {                                                       \
-                drill = &(top)->Drill[n]
-
-#define NETLIST_LOOP(top) do   {                         \
-        Cardinal        n;                                      \
-        NetListType *netlist;                                   \
-        for (n = (top)->NetListN-1; n != -1; n--)               \
-        {                                                       \
-                netlist = &(top)->NetList[n]
-
-#define NET_LOOP(top) do   {                             \
-        Cardinal        n;                                      \
-        NetType *net;                                           \
-        for (n = (top)->NetN-1; n != -1; n--)                   \
-        {                                                       \
-                net = &(top)->Net[n]
-
-#define CONNECTION_LOOP(net) do {                         \
-        Cardinal        n;                                      \
-        ConnectionType *connection;                             \
-        for (n = (net)->ConnectionN-1; n != -1; n--)            \
-        {                                                       \
-                connection = & (net)->Connection[n]
+#define DRILL_LOOP(top) do {                                        \
+  GList *__iter;                                                    \
+  GList *__copy = g_list_copy ((top)->Drill);                       \
+  Cardinal n;                                                       \
+  for (__iter = __copy, n = 0; __iter != NULL;                      \
+       __iter = g_list_next (__iter), n++) {                        \
+    DrillType *drill = __iter->data;
+
+#define NETLIST_LOOP(top) do {                                      \
+  GList *__iter;                                                    \
+  GList *__copy = g_list_reverse (g_list_copy ((top)->NetList));    \
+  Cardinal n;                                                       \
+  for (__iter = __copy, n = (top)->NetListN - 1; __iter != NULL;    \
+       __iter = g_list_next (__iter), n--) {                        \
+    NetListType *netlist = __iter->data;
+
+#define NET_LOOP(top) do {                                          \
+  GList *__iter;                                                    \
+  GList *__copy = g_list_reverse (g_list_copy ((top)->Net));        \
+  Cardinal n;                                                       \
+  for (__iter = __copy, n = (top)->NetN - 1; __iter != NULL;        \
+       __iter = g_list_next (__iter), n--) {                        \
+    NetType *net = __iter->data;
+
+#define CONNECTION_LOOP(net) do {                                   \
+  GList *__iter;                                                    \
+  GList *__copy = g_list_reverse (g_list_copy ((net)->Connection)); \
+  Cardinal n;                                                       \
+  for (__iter = __copy, n = (net)->ConnectionN - 1; __iter != NULL; \
+       __iter = g_list_next (__iter), n--) {                        \
+    ConnectionType *connection = __iter->data;
 
 #define ELEMENT_LOOP(top) do {                                      \
   GList *__iter, *__next;                                           \
@@ -429,7 +433,7 @@ extern int mem_any_set (unsigned char *, int);
 	LayerType *layer = (board)->Data->Layer;		\
 	for (l = 0; l < max_copper_layer + EXTRA_LAYERS; l++, layer++)	\
 	{ \
-                TEXT_LOOP(layer);                                      \
+                TEXT_LOOP(layer);                                   \
                   if (TEXT_IS_VISIBLE((board), layer, text))
 
 #define	VISIBLEPOLYGON_LOOP(top) do	{	\
@@ -440,43 +444,48 @@ extern int mem_any_set (unsigned char *, int);
 		if (layer->On)				\
 			POLYGON_LOOP(layer)
 
-#define POINTER_LOOP(top) do	{	\
-	Cardinal	n;			\
-	void	**ptr;				\
-	for (n = (top)->PtrN-1; n != -1; n--)	\
-	{					\
-		ptr = &(top)->Ptr[n]
-
-#define MENU_LOOP(top)	do {	\
-	Cardinal	l;			\
-	LibraryMenuType *menu;			\
-	for (l = (top)->MenuN-1; l != -1; l--)	\
-	{					\
-		menu = &(top)->Menu[l]
-
-#define ENTRY_LOOP(top) do	{	\
-	Cardinal	n;			\
-	LibraryEntryType *entry;		\
-	for (n = (top)->EntryN-1; n != -1; n--)	\
-	{					\
-		entry = &(top)->Entry[n]
-
-#define GROUP_LOOP(data, group) do { 	\
-	Cardinal entry; \
-        for (entry = 0; entry < ((PCBType *)(data->pcb))->LayerGroups.Number[(group)]; entry++) \
-        { \
-		LayerType *layer;		\
-		Cardinal number; 		\
-		number = ((PCBType *)(data->pcb))->LayerGroups.Entries[(group)][entry]; \
-		if (number >= max_copper_layer)	\
-		  continue;			\
-		layer = &data->Layer[number];
-
-#define LAYER_LOOP(data, ml) do { \
-        Cardinal n; \
-	for (n = 0; n < ml; n++) \
-	{ \
-	   LayerType *layer = (&data->Layer[(n)]);
+#define POINTER_LOOP(top) do {                                      \
+  GList *__iter;                                                    \
+  GList *__copy = g_list_reverse (g_list_copy ((top)->Ptr));        \
+  Cardinal n;                                                       \
+  for (__iter = __copy, n = (top)->PtrN - 1; __iter != NULL;        \
+       __iter = g_list_next (__iter), n--) {                        \
+    void **ptr = &__iter->data;
+
+#define MENU_LOOP(top) do {                                         \
+  GList *__iter;                                                    \
+  GList *__copy = g_list_reverse (g_list_copy ((top)->Menu));       \
+  Cardinal n;                                                       \
+  for (__iter = __copy, n = (top)->MenuN - 1; __iter != NULL;       \
+       __iter = g_list_next (__iter), n--) {                        \
+    LibraryMenuType *menu = __iter->data;
+
+#define ENTRY_LOOP(top) do {                                        \
+  GList *__iter;                                                    \
+  GList *__copy = g_list_reverse (g_list_copy ((top)->Entry));      \
+  Cardinal n;                                                       \
+  for (__iter = __copy, n = (top)->EntryN - 1; __iter != NULL;      \
+       __iter = g_list_next (__iter), n--) {                        \
+    LibraryEntryType *entry = __iter->data;
+
+#define GROUP_LOOP(data, group) do {                                \
+  GList *__copy = NULL; /* DUMMY */                                 \
+  Cardinal entry; \
+  for (entry = 0; entry < ((PCBType *)(data->pcb))->LayerGroups.Number[(group)]; entry++) \
+  {                                                                 \
+    LayerType *layer;                                               \
+    Cardinal number;                                                \
+    number = ((PCBType *)(data->pcb))->LayerGroups.Entries[(group)][entry]; \
+    if (number >= max_copper_layer)                                 \
+      continue;                                                     \
+    layer = &data->Layer[number];
+
+#define LAYER_LOOP(data, ml) do {                                   \
+        Cardinal n;                                                 \
+        GList *__copy = NULL; /* DUMMY */                           \
+        for (n = 0; n < ml; n++)                                    \
+        {                                                           \
+           LayerType *layer = (&data->Layer[(n)]);
 
 
 #endif
diff --git a/src/misc.c b/src/misc.c
index 37aaebb..b85a193 100644
--- a/src/misc.c
+++ b/src/misc.c
@@ -494,7 +494,7 @@ SetTextBoundingBox (FontType *FontPtr, TextType *Text)
 {
   SymbolType *symbol = FontPtr->Symbol;
   unsigned char *s = (unsigned char *) Text->TextString;
-  int i;
+  GList *i;
   int space;
 
   Coord minx, miny, maxx, maxy, tx;
@@ -521,7 +521,7 @@ SetTextBoundingBox (FontType *FontPtr, TextType *Text)
       if (*s <= MAX_FONTPOSITION && symbol[*s].Valid)
         {
           LineType *line = symbol[*s].Line;
-          for (i = 0; i < symbol[*s].LineN; line++, i++)
+          for (i = symbol[*s].Line; i != NULL; i = g_list_next (i))
             {
               /* Clamp the width of text lines at the minimum thickness.
                * NB: Divide 4 in thickness calculation is comprised of a factor
@@ -814,9 +814,9 @@ CenterDisplay (Coord X, Coord Y)
 void
 SetFontInfo (FontType *Ptr)
 {
-  Cardinal i, j;
+  Cardinal i;
+  GList *iter;
   SymbolType *symbol;
-  LineType *line;
   Coord totalminy = MAX_COORD;
 
   /* calculate cell with and height (is at least DEFAULT_CELLSIZE)
@@ -835,8 +835,9 @@ SetFontInfo (FontType *Ptr)
 
       minx = miny = MAX_COORD;
       maxx = maxy = 0;
-      for (line = symbol->Line, j = symbol->LineN; j; j--, line++)
+      for (iter = symbol->Line ; iter != NULL; iter = g_list_next (iter))
         {
+          LineType *line = iter->data;
           minx = MIN (minx, line->Point1.X);
           miny = MIN (miny, line->Point1.Y);
           minx = MIN (minx, line->Point2.X);
@@ -848,8 +849,11 @@ SetFontInfo (FontType *Ptr)
         }
 
       /* move symbol to left edge */
-      for (line = symbol->Line, j = symbol->LineN; j; j--, line++)
-        MOVE_LINE_LOWLEVEL (line, -minx, 0);
+      for (iter = symbol->Line; iter != NULL; iter = g_list_next (iter))
+        {
+          LineType *line = iter->data;
+          MOVE_LINE_LOWLEVEL (line, -minx, 0);
+        }
 
       /* set symbol bounding box with a minimum cell size of (1,1) */
       symbol->Width = maxx - minx + 1;
@@ -866,8 +870,11 @@ SetFontInfo (FontType *Ptr)
     if (symbol->Valid)
       {
         symbol->Height -= totalminy;
-        for (line = symbol->Line, j = symbol->LineN; j; j--, line++)
-          MOVE_LINE_LOWLEVEL (line, 0, -totalminy);
+        for (iter = symbol->Line; iter != NULL; iter = g_list_next (iter))
+          {
+            LineType *line = iter->data;
+            MOVE_LINE_LOWLEVEL (line, 0, -totalminy);
+          }
       }
 
   /* setup the box for the default symbol */
@@ -1839,8 +1846,11 @@ GetGridLockCoordinates (int type, void *ptr1,
       *y = ((ElementType *) ptr2)->MarkY;
       break;
     case POLYGON_TYPE:
-      *x = ((PolygonType *) ptr2)->Points[0].X;
-      *y = ((PolygonType *) ptr2)->Points[0].Y;
+      {
+        PointType *point0 = ((PolygonType *) ptr2)->Points->data;
+        *x = point0->X;
+        *y = point0->Y;
+      }
       break;
 
     case LINEPOINT_TYPE:
@@ -2132,10 +2142,13 @@ pcb_author (void)
 char *
 AttributeGetFromList (AttributeListType *list, char *name)
 {
-  int i;
-  for (i=0; i<list->Number; i++)
-    if (strcmp (name, list->List[i].name) == 0)
-      return list->List[i].value;
+  GList *i;
+  for (i = list->List; i != NULL; i = g_list_next (i))
+    {
+      AttributeType *attr = i->data;
+      if (strcmp (name, attr->name) == 0)
+        return attr->value;
+    }
   return NULL;
 }
 
diff --git a/src/move.c b/src/move.c
index b9a180d..94e99cc 100644
--- a/src/move.c
+++ b/src/move.c
@@ -787,7 +787,7 @@ void *
 MoveObjectAndRubberband (int Type, void *Ptr1, void *Ptr2, void *Ptr3,
 			 Coord DX, Coord DY)
 {
-  RubberbandType *ptr;
+  GList *iter;
   void *ptr2;
 
   /* setup offset */
@@ -795,9 +795,11 @@ MoveObjectAndRubberband (int Type, void *Ptr1, void *Ptr2, void *Ptr3,
   DeltaY = DY;
 
   /* move all the lines... and reset the counter */
-  ptr = Crosshair.AttachedObject.Rubberband;
-  while (Crosshair.AttachedObject.RubberbandN)
+  for (iter = Crosshair.AttachedObject.Rubberband;
+       iter != NULL; iter = g_list_next (iter))
     {
+      RubberbandType *ptr = iter->data;
+
       /* first clear any marks that we made in the line flags */
       CLEAR_FLAG (RUBBERENDFLAG, ptr->Line);
       /* only update undo list if an actual movement happened */
@@ -809,7 +811,6 @@ MoveObjectAndRubberband (int Type, void *Ptr1, void *Ptr2, void *Ptr3,
           MoveLinePoint (ptr->Layer, ptr->Line, ptr->MovedPoint);
         }
       Crosshair.AttachedObject.RubberbandN--;
-      ptr++;
     }
 
   if (DX == 0 && DY == 0)
diff --git a/src/mymem.c b/src/mymem.c
index a402f63..376a1e4 100644
--- a/src/mymem.c
+++ b/src/mymem.c
@@ -34,8 +34,6 @@
 
 #include "global.h"
 
-#include <memory.h>
-
 #include "data.h"
 #include "error.h"
 #include "mymem.h"
@@ -69,43 +67,38 @@ g_list_free_full (GList *list, GDestroyNotify free_func)
 RubberbandType *
 GetRubberbandMemory (void)
 {
-  RubberbandType *ptr = Crosshair.AttachedObject.Rubberband;
+  AttachedObjectType *attached = &Crosshair.AttachedObject;
+  RubberbandType *new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (Crosshair.AttachedObject.RubberbandN >=
-      Crosshair.AttachedObject.RubberbandMax)
-    {
-      Crosshair.AttachedObject.RubberbandMax += STEP_RUBBERBAND;
-      ptr = (RubberbandType *)realloc (ptr, Crosshair.AttachedObject.RubberbandMax *
-                          sizeof (RubberbandType));
-      Crosshair.AttachedObject.Rubberband = ptr;
-      memset (ptr + Crosshair.AttachedObject.RubberbandN, 0,
-	      STEP_RUBBERBAND * sizeof (RubberbandType));
-    }
-  return (ptr + Crosshair.AttachedObject.RubberbandN++);
+  new_obj = g_slice_new0 (RubberbandType);
+  attached->Rubberband = g_list_append (attached->Rubberband, new_obj);
+  attached->RubberbandN ++;
+
+  return new_obj;
 }
 
 void **
 GetPointerMemory (PointerListType *list)
 {
-  void **ptr = list->Ptr;
+  void **new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (list->PtrN >= list->PtrMax)
-    {
-      list->PtrMax = STEP_POINT + (2 * list->PtrMax);
-      ptr = (void **)realloc (ptr, list->PtrMax * sizeof (void *));
-      list->Ptr = ptr;
-      memset (ptr + list->PtrN, 0,
-	      (list->PtrMax - list->PtrN) * sizeof (void *));
-    }
-  return (ptr + list->PtrN++);
+  new_obj = g_slice_new0 (void *);
+  list->Ptr = g_list_append (list->Ptr, new_obj);
+  list->PtrN ++;
+
+  return new_obj;
+}
+
+static void
+FreePointer (gpointer data)
+{
+  g_slice_free (void *, data);
 }
 
 void
 FreePointerListMemory (PointerListType *list)
 {
-  free (list->Ptr);
+  g_list_free_full (list->Ptr, (GDestroyNotify)FreePointer);
   memset (list, 0, sizeof (PointerListType));
 }
 
@@ -113,81 +106,84 @@ FreePointerListMemory (PointerListType *list)
  * get next slot for a box, allocates memory if necessary
  */
 BoxType *
-GetBoxMemory (BoxListType *Boxes)
+GetBoxMemory (BoxListType *boxlist)
 {
-  BoxType *box = Boxes->Box;
+  BoxType *new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (Boxes->BoxN >= Boxes->BoxMax)
-    {
-      Boxes->BoxMax = STEP_POINT + (2 * Boxes->BoxMax);
-      box = (BoxType *)realloc (box, Boxes->BoxMax * sizeof (BoxType));
-      Boxes->Box = box;
-      memset (box + Boxes->BoxN, 0,
-	      (Boxes->BoxMax - Boxes->BoxN) * sizeof (BoxType));
-    }
-  return (box + Boxes->BoxN++);
+  new_obj = g_slice_new0 (BoxType);
+  boxlist->Box = g_list_append (boxlist->Box, new_obj);
+  boxlist->BoxN ++;
+
+  return new_obj;
 }
 
+static void
+FreeBox (BoxType *data)
+{
+  g_slice_free (BoxType, data);
+}
 
 /* ---------------------------------------------------------------------------
  * get next slot for a connection, allocates memory if necessary
  */
 ConnectionType *
-GetConnectionMemory (NetType *Net)
+GetConnectionMemory (NetType *net)
 {
-  ConnectionType *con = Net->Connection;
+  ConnectionType *new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (Net->ConnectionN >= Net->ConnectionMax)
-    {
-      Net->ConnectionMax += STEP_POINT;
-      con = (ConnectionType *)realloc (con, Net->ConnectionMax * sizeof (ConnectionType));
-      Net->Connection = con;
-      memset (con + Net->ConnectionN, 0,
-	      STEP_POINT * sizeof (ConnectionType));
-    }
-  return (con + Net->ConnectionN++);
+  new_obj = g_slice_new (ConnectionType);
+  net->Connection = g_list_append (net->Connection, new_obj);
+  net->ConnectionN ++;
+
+  return new_obj;
+}
+
+static void
+FreeConnection (ConnectionType *data)
+{
+  g_slice_free (ConnectionType, data);
 }
 
 /* ---------------------------------------------------------------------------
  * get next slot for a subnet, allocates memory if necessary
  */
 NetType *
-GetNetMemory (NetListType *Netlist)
+GetNetMemory (NetListType *netlist)
 {
-  NetType *net = Netlist->Net;
+  NetType *new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (Netlist->NetN >= Netlist->NetMax)
-    {
-      Netlist->NetMax += STEP_POINT;
-      net = (NetType *)realloc (net, Netlist->NetMax * sizeof (NetType));
-      Netlist->Net = net;
-      memset (net + Netlist->NetN, 0, STEP_POINT * sizeof (NetType));
-    }
-  return (net + Netlist->NetN++);
+  new_obj = g_slice_new (NetType);
+  netlist->Net = g_list_append (netlist->Net, new_obj);
+  netlist->NetN ++;
+
+  return new_obj;
+}
+
+static void
+FreeNet (NetType *data)
+{
+  g_slice_free (NetType, data);
 }
 
 /* ---------------------------------------------------------------------------
  * get next slot for a net list, allocates memory if necessary
  */
 NetListType *
-GetNetListMemory (NetListListType *Netlistlist)
+GetNetListMemory (NetListListType *netlistlist)
 {
-  NetListType *netlist = Netlistlist->NetList;
+  NetListType* new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (Netlistlist->NetListN >= Netlistlist->NetListMax)
-    {
-      Netlistlist->NetListMax += STEP_POINT;
-      netlist = (NetListType *)realloc (netlist,
-                         Netlistlist->NetListMax * sizeof (NetListType));
-      Netlistlist->NetList = netlist;
-      memset (netlist + Netlistlist->NetListN, 0,
-	      STEP_POINT * sizeof (NetListType));
-    }
-  return (netlist + Netlistlist->NetListN++);
+  new_obj = g_slice_new (NetListType);
+  netlistlist->NetList = g_list_append (netlistlist->NetList, new_obj);
+  netlistlist->NetListN ++;
+
+  return new_obj;
+}
+
+static void
+FreeNetList (NetListType *data)
+{
+  g_slice_free (NetListType, data);
 }
 /* ---------------------------------------------------------------------------
  * get next slot for a pin, allocates memory if necessary
@@ -362,20 +358,21 @@ FreePolygon (PolygonType *data)
  * if necessary
  */
 PointType *
-GetPointMemoryInPolygon (PolygonType *Polygon)
+GetPointMemoryInPolygon (PolygonType *polygon)
 {
-  PointType *points = Polygon->Points;
+  PointType *new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (Polygon->PointN >= Polygon->PointMax)
-    {
-      Polygon->PointMax += STEP_POLYGONPOINT;
-      points = (PointType *)realloc (points, Polygon->PointMax * sizeof (PointType));
-      Polygon->Points = points;
-      memset (points + Polygon->PointN, 0,
-	      STEP_POLYGONPOINT * sizeof (PointType));
-    }
-  return (points + Polygon->PointN++);
+  new_obj = g_slice_new (PointType);
+  polygon->Points = g_list_append (polygon->Points, new_obj);
+  polygon->PointN ++;
+
+  return new_obj;
+}
+
+static void
+FreePoint (PointType *data)
+{
+  g_slice_free (PointType, data);
 }
 
 /* ---------------------------------------------------------------------------
@@ -383,20 +380,21 @@ GetPointMemoryInPolygon (PolygonType *Polygon)
  * if necessary
  */
 Cardinal *
-GetHoleIndexMemoryInPolygon (PolygonType *Polygon)
+GetHoleIndexMemoryInPolygon (PolygonType *polygon)
 {
-  Cardinal *holeindex = Polygon->HoleIndex;
+  Cardinal *new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (Polygon->HoleIndexN >= Polygon->HoleIndexMax)
-    {
-      Polygon->HoleIndexMax += STEP_POLYGONHOLEINDEX;
-      holeindex = (Cardinal *)realloc (holeindex, Polygon->HoleIndexMax * sizeof (int));
-      Polygon->HoleIndex = holeindex;
-      memset (holeindex + Polygon->HoleIndexN, 0,
-	      STEP_POLYGONHOLEINDEX * sizeof (int));
-    }
-  return (holeindex + Polygon->HoleIndexN++);
+  new_obj = g_slice_new (Cardinal);
+  polygon->HoleIndex = g_list_append (polygon->HoleIndex, new_obj);
+  polygon->HoleIndexN ++;
+
+  return new_obj;
+}
+
+static void
+FreeHoleIndex (Cardinal *data)
+{
+  g_slice_free (Cardinal, data);
 }
 
 /* ---------------------------------------------------------------------------
@@ -425,106 +423,142 @@ FreeElement (ElementType *data)
 }
 
 /* ---------------------------------------------------------------------------
- * get next slot for a library menu, allocates memory if necessary
+ * get next slot for a library entry, allocates memory if necessary
  */
-LibraryMenuType *
-GetLibraryMenuMemory (LibraryType *lib)
+LibraryEntryType *
+GetLibraryEntryMemory (LibraryMenuType *menu)
 {
-  LibraryMenuType *menu = lib->Menu;
+  LibraryEntryType *new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (lib->MenuN >= lib->MenuMax)
-    {
-      lib->MenuMax += STEP_LIBRARYMENU;
-      menu = (LibraryMenuType *)realloc (menu, lib->MenuMax * sizeof (LibraryMenuType));
-      lib->Menu = menu;
-      memset (menu + lib->MenuN, 0,
-	      STEP_LIBRARYMENU * sizeof (LibraryMenuType));
-    }
-  return (menu + lib->MenuN++);
+  new_obj = g_slice_new (LibraryEntryType);
+  menu->Entry = g_list_append (menu->Entry, new_obj);
+  menu->EntryN ++;
+
+  return new_obj;
+}
+
+static void
+FreeLibraryEntry (LibraryEntryType *entry)
+{
+  free (entry->AllocatedMemory);
+  free (entry->ListEntry);
+
+  g_slice_free (LibraryEntryType, entry);
 }
 
 /* ---------------------------------------------------------------------------
- * get next slot for a library entry, allocates memory if necessary
+ * get next slot for a library menu, allocates memory if necessary
  */
-LibraryEntryType *
-GetLibraryEntryMemory (LibraryMenuType *Menu)
+LibraryMenuType *
+GetLibraryMenuMemory (LibraryType *lib)
 {
-  LibraryEntryType *entry = Menu->Entry;
+  LibraryMenuType *new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (Menu->EntryN >= Menu->EntryMax)
-    {
-      Menu->EntryMax += STEP_LIBRARYENTRY;
-      entry = (LibraryEntryType *)realloc (entry, Menu->EntryMax * sizeof (LibraryEntryType));
-      Menu->Entry = entry;
-      memset (entry + Menu->EntryN, 0,
-	      STEP_LIBRARYENTRY * sizeof (LibraryEntryType));
-    }
-  return (entry + Menu->EntryN++);
+  new_obj = g_slice_new (LibraryMenuType);
+  lib->Menu = g_list_append (lib->Menu, new_obj);
+  lib->MenuN ++;
+
+  return new_obj;
+}
+
+static void
+FreeLibraryMenu (LibraryMenuType *menu)
+{
+  g_list_free_full (menu->Entry, (GDestroyNotify)FreeLibraryEntry);
+  free (menu->Name);
+  g_slice_free (LibraryMenuType, menu);
 }
 
 /* ---------------------------------------------------------------------------
  * get next slot for a DrillElement, allocates memory if necessary
  */
 ElementType **
-GetDrillElementMemory (DrillType *Drill)
+GetDrillElementMemory (DrillType *drill)
 {
-  ElementType **element;
+  ElementType **new_obj;
 
-  element = Drill->Element;
+  new_obj = g_slice_new (ElementType *);
+  drill->Element = g_list_append (drill->Element, new_obj);
+  drill->ElementN ++;
 
-  /* realloc new memory if necessary and clear it */
-  if (Drill->ElementN >= Drill->ElementMax)
-    {
-      Drill->ElementMax += STEP_ELEMENT;
-      element = (ElementType **)realloc (element,
-                         Drill->ElementMax * sizeof (ElementType *));
-      Drill->Element = element;
-      memset (element + Drill->ElementN, 0,
-	      STEP_ELEMENT * sizeof (ElementType *));
-    }
-  return (element + Drill->ElementN++);
+  return new_obj;
+}
+
+static void
+FreeDrillElement (ElementType **data)
+{
+  g_slice_free (ElementType *, data);
 }
 
 /* ---------------------------------------------------------------------------
  * get next slot for a DrillPoint, allocates memory if necessary
  */
 PinType **
-GetDrillPinMemory (DrillType *Drill)
+GetDrillPinMemory (DrillType *drill)
 {
-  PinType **pin;
+  PinType **new_obj;
 
-  pin = Drill->Pin;
+  new_obj = g_slice_new (PinType *);
+  drill->Pin = g_list_append (drill->Pin, new_obj);
+  drill->PinN ++;
 
-  /* realloc new memory if necessary and clear it */
-  if (Drill->PinN >= Drill->PinMax)
-    {
-      Drill->PinMax += STEP_POINT;
-      pin = (PinType **)realloc (pin, Drill->PinMax * sizeof (PinType *));
-      Drill->Pin = pin;
-      memset (pin + Drill->PinN, 0, STEP_POINT * sizeof (PinType *));
-    }
-  return (pin + Drill->PinN++);
+  return new_obj;
+}
+
+static void
+FreeDrillPin (PinType **data)
+{
+  g_slice_free (PinType *, data);
 }
 
 /* ---------------------------------------------------------------------------
  * get next slot for a Drill, allocates memory if necessary
  */
 DrillType *
-GetDrillInfoDrillMemory (DrillInfoType *DrillInfo)
+GetDrillInfoDrillMemory (DrillInfoType *drillinfo)
 {
-  DrillType *drill = DrillInfo->Drill;
+  DrillType *new_obj;
 
-  /* realloc new memory if necessary and clear it */
-  if (DrillInfo->DrillN >= DrillInfo->DrillMax)
-    {
-      DrillInfo->DrillMax += STEP_DRILL;
-      drill = (DrillType *)realloc (drill, DrillInfo->DrillMax * sizeof (DrillType));
-      DrillInfo->Drill = drill;
-      memset (drill + DrillInfo->DrillN, 0, STEP_DRILL * sizeof (DrillType));
-    }
-  return (drill + DrillInfo->DrillN++);
+  new_obj = g_slice_new (DrillType);
+  drillinfo->Drill = g_list_append (drillinfo->Drill, new_obj);
+  drillinfo->DrillN ++;
+
+  return new_obj;
+}
+
+static void
+FreeDrill (DrillType *drill)
+{
+  g_list_free_full (drill->Element, (GDestroyNotify)FreeDrillElement);
+  g_list_free_full (drill->Pin, (GDestroyNotify)FreeDrillPin);
+  g_slice_free (DrillType, drill);
+}
+
+void
+FreeDrillInfo (DrillInfoType *drill_info)
+{
+  g_list_free_full (drill_info->Drill, (GDestroyNotify)FreeDrill);
+  g_slice_free (DrillInfoType, drill_info);
+}
+
+AttributeType *
+GetAttributeMemory (AttributeListType *attr_list)
+{
+  AttributeType *new_obj;
+
+  new_obj = g_slice_new0 (AttributeType);
+  attr_list->List = g_list_append (attr_list->List, new_obj);
+  attr_list->Number ++;
+
+  return new_obj;
+}
+
+void
+FreeAttribute (AttributeType *attr)
+{
+  free (attr->name);
+  free (attr->value);
+  g_slice_free (AttributeType, attr);
 }
 
 /* ---------------------------------------------------------------------------
@@ -550,79 +584,74 @@ FreePolygonMemory (PolygonType *polygon)
  * frees memory used by a box list
  */
 void
-FreeBoxListMemory (BoxListType *Boxlist)
+FreeBoxListMemory (BoxListType *boxlist)
 {
-  if (Boxlist)
-    {
-      free (Boxlist->Box);
-      memset (Boxlist, 0, sizeof (BoxListType));
-    }
+  if (boxlist == NULL)
+    return;
+
+  g_list_free_full (boxlist->Box, (GDestroyNotify)FreeBox);
+  memset (boxlist, 0, sizeof (BoxListType));
 }
 
 /* ---------------------------------------------------------------------------
  * frees memory used by a net 
  */
 void
-FreeNetListMemory (NetListType *Netlist)
+FreeNetListMemory (NetListType *netlist)
 {
-  if (Netlist)
-    {
-      NET_LOOP (Netlist);
-      {
-	FreeNetMemory (net);
-      }
-      END_LOOP;
-      free (Netlist->Net);
-      memset (Netlist, 0, sizeof (NetListType));
-    }
+  if (netlist == NULL)
+    return;
+
+  NET_LOOP (netlist);
+  {
+    FreeNetMemory (net);
+  }
+  END_LOOP;
+
+  g_list_free_full (netlist->Net, (GDestroyNotify)FreeNet);
+  memset (netlist, 0, sizeof (NetListType));
 }
 
 /* ---------------------------------------------------------------------------
  * frees memory used by a net list
  */
 void
-FreeNetListListMemory (NetListListType *Netlistlist)
+FreeNetListListMemory (NetListListType *netlistlist)
 {
-  if (Netlistlist)
-    {
-      NETLIST_LOOP (Netlistlist);
-      {
-	FreeNetListMemory (netlist);
-      }
-      END_LOOP;
-      free (Netlistlist->NetList);
-      memset (Netlistlist, 0, sizeof (NetListListType));
-    }
+  if (netlistlist == NULL)
+    return;
+
+  NETLIST_LOOP (netlistlist);
+  {
+    FreeNetListMemory (netlist);
+  }
+  END_LOOP;
+
+  g_list_free_full (netlistlist->NetList, (GDestroyNotify)FreeNetList);
+  memset (netlistlist, 0, sizeof (NetListListType));
 }
 
 /* ---------------------------------------------------------------------------
  * frees memory used by a subnet 
  */
 void
-FreeNetMemory (NetType *Net)
+FreeNetMemory (NetType *net)
 {
-  if (Net)
-    {
-      free (Net->Connection);
-      memset (Net, 0, sizeof (NetType));
-    }
+  if (net == NULL)
+    return;
+
+  g_list_free_full (net->Connection, (GDestroyNotify)FreeConnection);
+  memset (net, 0, sizeof (NetType));
 }
+
 /* ---------------------------------------------------------------------------
  * frees memory used by an attribute list
- */
-static void
+*/
+void
 FreeAttributeListMemory (AttributeListType *list)
 {
-  int i;
-
-  for (i = 0; i < list->Number; i++)
-    {
-      free (list->List[i].name);
-      free (list->List[i].value);
-    }
-  free (list->List);
-  list->List = NULL;
-  list->Max = 0;
+  g_list_free_full (list->List, (GDestroyNotify)FreeAttribute);
+  memset (list, 0, sizeof (AttributeListType));
 }
 
 /* ---------------------------------------------------------------------------
@@ -771,22 +800,7 @@ FreeDataMemory (DataType *data)
 void
 FreeLibraryMemory (LibraryType *lib)
 {
-  MENU_LOOP (lib);
-  {
-    ENTRY_LOOP (menu);
-    {
-      free (entry->AllocatedMemory);
-      free (entry->ListEntry);
-    }
-    END_LOOP;
-    free (menu->Entry);
-    free (menu->Name);
-  }
-  END_LOOP;
-  free (lib->Menu);
-
-  /* clear struct */
-  memset (lib, 0, sizeof (LibraryType));
+  g_list_free_full (lib->Menu, (GDestroyNotify)FreeLibraryMenu);
 }
 
 /* ---------------------------------------------------------------------------
diff --git a/src/mymem.h b/src/mymem.h
index 46061a3..c036559 100644
--- a/src/mymem.h
+++ b/src/mymem.h
@@ -37,22 +37,6 @@
 #include <stdlib.h>
 #include "global.h"
 
-/* ---------------------------------------------------------------------------
- * number of additional objects that are allocated with one system call
- */
-#define	STEP_ELEMENT		50
-#define STEP_DRILL		30
-#define STEP_POINT		100
-#define	STEP_SYMBOLLINE		10
-#define	STEP_SELECTORENTRY	128
-#define	STEP_REMOVELIST		500
-#define	STEP_UNDOLIST		500
-#define	STEP_POLYGONPOINT	10
-#define	STEP_POLYGONHOLEINDEX	10
-#define	STEP_LIBRARYMENU	10
-#define	STEP_LIBRARYENTRY	20
-#define	STEP_RUBBERBAND		100
-
 #define STRDUP(x) (((x) != NULL) ? strdup (x) : NULL)
 
 /* ---------------------------------------------------------------------------
@@ -64,29 +48,33 @@ typedef struct
   char *Data;
 } DynamicStringType;
 
-RubberbandType * GetRubberbandMemory (void);
-PinType * GetPinMemory (ElementType *);
-PadType * GetPadMemory (ElementType *);
-PinType * GetViaMemory (DataType *);
-LineType * GetLineMemory (LayerType *);
-ArcType * GetArcMemory (LayerType *);
-RatType * GetRatMemory (DataType *);
-TextType * GetTextMemory (LayerType *);
-PolygonType * GetPolygonMemory (LayerType *);
-PointType * GetPointMemoryInPolygon (PolygonType *);
+RubberbandType *GetRubberbandMemory (void);
+PinType *GetPinMemory (ElementType *);
+PadType *GetPadMemory (ElementType *);
+PinType *GetViaMemory (DataType *);
+LineType *GetLineMemory (LayerType *);
+ArcType *GetArcMemory (LayerType *);
+RatType *GetRatMemory (DataType *);
+TextType *GetTextMemory (LayerType *);
+PolygonType *GetPolygonMemory (LayerType *);
+PointType *GetPointMemoryInPolygon (PolygonType *);
 Cardinal *GetHoleIndexMemoryInPolygon (PolygonType *);
-ElementType * GetElementMemory (DataType *);
-BoxType * GetBoxMemory (BoxListType *);
-ConnectionType * GetConnectionMemory (NetType *);
-NetType * GetNetMemory (NetListType *);
-NetListType * GetNetListMemory (NetListListType *);
-LibraryMenuType * GetLibraryMenuMemory (LibraryType *);
-LibraryEntryType * GetLibraryEntryMemory (LibraryMenuType *);
-ElementType **GetDrillElementMemory (DrillType *);
-PinType ** GetDrillPinMemory (DrillType *);
-DrillType * GetDrillInfoDrillMemory (DrillInfoType *);
+ElementType *GetElementMemory (DataType *);
+BoxType *GetBoxMemory (BoxListType *);
+ConnectionType *GetConnectionMemory (NetType *);
+NetType *GetNetMemory (NetListType *);
+NetListType *GetNetListMemory (NetListListType *);
+LibraryMenuType *GetLibraryMenuMemory (LibraryType *);
+LibraryEntryType *GetLibraryEntryMemory (LibraryMenuType *);
+ElementTypeHandle GetDrillElementMemory (DrillType *);
+PinTypeHandle GetDrillPinMemory (DrillType *);
+DrillType *GetDrillInfoDrillMemory (DrillInfoType *);
+void FreeDrillInfo (DrillInfoType *);
 void **GetPointerMemory (PointerListType *);
+AttributeType *GetAttributeMemory (AttributeListType *);
+void FreeAttribute (AttributeType *);
 void FreePolygonMemory (PolygonType *);
+void FreeAttributeListMemory (AttributeListType *);
 void FreeElementMemory (ElementType *);
 void FreePCBMemory (PCBType *);
 void FreeBoxListMemory (BoxListType *);
diff --git a/src/report.c b/src/report.c
index f822344..266e747 100644
--- a/src/report.c
+++ b/src/report.c
@@ -333,14 +333,13 @@ ReportDialog (int argc, char **argv, Coord x, Coord y)
 
 	pcb_sprintf (&report[0], _("%m+POLYGON ID# %ld;  Flags:%s\n"
 		 "Its bounding box is %$mD %$mD.\n"
-		 "It has %d points and could store %d more\n"
-		 "  without using more memory.\n"
+		 "It has %d points.\n"
 		 "It has %d holes and resides on layer %d.\n"
 		 "%s"), USER_UNITMASK, Polygon->ID,
 		 flags_to_string (Polygon->Flags, POLYGON_TYPE),
 		 Polygon->BoundingBox.X1, Polygon->BoundingBox.Y1,
 		 Polygon->BoundingBox.X2, Polygon->BoundingBox.Y2,
-		 Polygon->PointN, Polygon->PointMax - Polygon->PointN,
+		 Polygon->PointN,
 		 Polygon->HoleIndexN,
 		 GetLayerNumber (PCB->Data, (LayerType *) ptr1),
 		 TEST_FLAG (LOCKFLAG, Polygon) ? _("It is LOCKED.\n") : "");
diff --git a/src/select.c b/src/select.c
index f130b07..c60c925 100644
--- a/src/select.c
+++ b/src/select.c
@@ -976,18 +976,20 @@ SelectObjectByName (int Type, char *Pattern, bool select)
 
       MENU_LOOP (&PCB->NetlistLib);
       {
-        Cardinal i;
-        LibraryEntryType *entry;
+        GList *i;
         ConnectionType conn;
 
         /* Name[0] and Name[1] are special purpose, not the actual name*/
         if (menu->Name && menu->Name[0] != '\0' && menu->Name[1] != '\0' &&
             REGEXEC (menu->Name + 2))
           {
-            for (i = menu->EntryN, entry = menu->Entry; i; i--, entry++)
-              if (SeekPad (entry, &conn, false))
-                RatFindHook (conn.type, conn.ptr1, conn.ptr2, conn.ptr2,
-                             true, FOUNDFLAG, true);
+            for (i = menu->Entry; i != NULL; i = g_list_next (i))
+              {
+                LibraryEntryType *entry = i->data;
+                if (SeekPad (entry, &conn, false))
+                  RatFindHook (conn.type, conn.ptr1, conn.ptr2, conn.ptr2,
+                               true, FOUNDFLAG, true);
+              }
           }
       }
       END_LOOP;
diff --git a/src/toporouter.c b/src/toporouter.c
index 8227e4b..ef9434b 100644
--- a/src/toporouter.c
+++ b/src/toporouter.c
@@ -2547,7 +2547,8 @@ import_clusters(toporouter_t *r)
   NETLIST_LOOP(&nets);
   {
     if(netlist->NetN > 0) {
-      toporouter_netlist_t *nl = netlist_create(r, netlist->Net->Connection->menu->Name, netlist->Net->Connection->menu->Style);
+      toporouter_netlist_t *nl = netlist_create(r, ((ConnectionType *)(((NetType *)(netlist->Net->data))->Connection->data))->menu->Name,
+                                                   ((ConnectionType *)(((NetType *)(netlist->Net->data))->Connection->data))->menu->Style);
       
       NET_LOOP(netlist);
       {
diff --git a/src/undo.c b/src/undo.c
index ca41c74..76073d5 100644
--- a/src/undo.c
+++ b/src/undo.c
@@ -152,7 +152,7 @@ typedef struct			/* holds information about an operation */
  * some local variables
  */
 static DataType *RemoveList = NULL;	/* list of removed objects */
-static UndoListType *UndoList = NULL;	/* list of operations */
+static GList *UndoList = NULL;	/* list of operations */
 static int Serial = 1,		/* serial number */
   SavedSerial;
 static size_t UndoN, RedoN,	/* number of entries */
@@ -197,6 +197,8 @@ GetUndoSlot (int CommandType, int ID, int Kind)
   void *ptr1, *ptr2, *ptr3;
   int type;
   static size_t limit = UNDO_WARNING_SIZE;
+  size_t size;
+  GList *iter;
 
 #ifdef DEBUG_ID
   if (SearchObjectByID (PCB->Data, &ptr1, &ptr2, &ptr3, ID, Kind) == NO_TYPE)
@@ -204,56 +206,62 @@ GetUndoSlot (int CommandType, int ID, int Kind)
 	     Kind);
 #endif
 
-  /* allocate memory */
-  if (UndoN >= UndoMax)
+  size = UndoN * sizeof (UndoListType);
+
+  /* ask user to flush the table because of it's size */
+  if (size > limit)
     {
-      size_t size;
+      limit = (size / UNDO_WARNING_SIZE + 1) * UNDO_WARNING_SIZE;
+      Message (_("Size of 'undo-list' exceeds %li kb\n"),
+               (long) (size >> 10));
+    }
 
-      UndoMax += STEP_UNDOLIST;
-      size = UndoMax * sizeof (UndoListType);
-      UndoList = (UndoListType *) realloc (UndoList, size);
-      memset (&UndoList[UndoN], 0, STEP_REMOVELIST * sizeof (UndoListType));
+  /* free structures from the pruned redo list */
 
-      /* ask user to flush the table because of it's size */
-      if (size > limit)
-	{
-	  limit = (size / UNDO_WARNING_SIZE + 1) * UNDO_WARNING_SIZE;
-	  Message (_("Size of 'undo-list' exceeds %li kb\n"),
-		   (long) (size >> 10));
-	}
+  for (iter = g_list_nth (UndoList, UndoN);
+       iter != NULL; iter = g_list_next (iter), RedoN--)
+    {
+      ptr = iter->data;
+
+      switch (ptr->Type)
+        {
+        case UNDO_CHANGENAME:
+          free (ptr->Data.ChangeName.Name);
+          break;
+        case UNDO_REMOVE:
+          type =
+            SearchObjectByID (RemoveList, &ptr1, &ptr2, &ptr3, ptr->ID,
+                              ptr->Kind);
+          if (type != NO_TYPE)
+            {
+              DestroyObject (RemoveList, type, ptr1, ptr2, ptr3);
+            }
+          break;
+        default:
+          break;
+        }
+      g_slice_free (UndoListType, ptr);
     }
 
-  /* free structures from the pruned redo list */
+  /* Break off and free the pruned redo list */
+  iter = g_list_nth (UndoList, UndoN);
+  iter->prev->next = NULL;
+  iter->prev = NULL;
 
-  for (ptr = &UndoList[UndoN]; RedoN; ptr++, RedoN--)
-    switch (ptr->Type)
-      {
-      case UNDO_CHANGENAME:
-	free (ptr->Data.ChangeName.Name);
-	break;
-      case UNDO_REMOVE:
-	type =
-	  SearchObjectByID (RemoveList, &ptr1, &ptr2, &ptr3, ptr->ID,
-			    ptr->Kind);
-	if (type != NO_TYPE)
-	  {
-	    DestroyObject (RemoveList, type, ptr1, ptr2, ptr3);
-	  }
-	break;
-      default:
-	break;
-      }
+  g_list_free (iter);
 
   if (between_increment_and_restore)
     added_undo_between_increment_and_restore = true;
 
   /* copy typefield and serial number to the list */
-  ptr = &UndoList[UndoN++];
+  ptr = g_slice_new0 (UndoListType);
+  UndoList = g_list_append (UndoList, ptr);
+
   ptr->Type = CommandType;
   ptr->Kind = Kind;
   ptr->ID = ID;
   ptr->Serial = Serial;
-  return (ptr);
+  return ptr;
 }
 
 /* ---------------------------------------------------------------------------
@@ -862,51 +870,36 @@ UndoLayerChange (UndoListType *Entry)
 static bool
 UndoNetlistChange (UndoListType *Entry)
 {
-  NetlistChangeType *l = & Entry->Data.NetlistChange;
-  unsigned int i, j;
+  NetlistChangeType * l = & Entry->Data.NetlistChange;
+  GList *i, *j;
   LibraryType *lib, *saved;
 
   lib = l->lib;
   saved = l->old;
 
   /* iterate over each net */
-  for (i = 0 ; i < lib->MenuN; i++)
+  for (i = lib->Menu; i != NULL; i = g_list_next (i))
     {
-      if (lib->Menu[i].Name)
-	free (lib->Menu[i].Name);
-
-      if (lib->Menu[i].directory)
-	free (lib->Menu[i].directory);
+      LibraryMenuType *menu = i->data;
 
-      if (lib->Menu[i].Style)
-	free (lib->Menu[i].Style);
+      free (menu->Name);
+      free (menu->directory);
+      free (menu->Style);
 
       /* iterate over each pin on the net */
-      for (j = 0; j < lib->Menu[i].EntryN; j++) {
-	
-	if (lib->Menu[i].Entry[j].ListEntry)
-	  free (lib->Menu[i].Entry[j].ListEntry);
-	
-	if (lib->Menu[i].Entry[j].AllocatedMemory)
-	  free (lib->Menu[i].Entry[j].AllocatedMemory);
-	
-	if (lib->Menu[i].Entry[j].Template)
-	  free (lib->Menu[i].Entry[j].Template);
-	
-	if (lib->Menu[i].Entry[j].Package)
-	  free (lib->Menu[i].Entry[j].Package);
-	
-	if (lib->Menu[i].Entry[j].Value)
-	  free (lib->Menu[i].Entry[j].Value);
-	
-	if (lib->Menu[i].Entry[j].Description)
-	  free (lib->Menu[i].Entry[j].Description);
-	
+      for (j = menu->Entry; j != NULL; j = g_list_next (j)) {
+        LibraryEntryType *entry = j->data;
+
+        free (entry->ListEntry);
+        free (entry->AllocatedMemory);
+        free (entry->Template);
+        free (entry->Package);
+        free (entry->Value);
+        free (entry->Description);
       }
     }
 
-  if (lib->Menu)
-    free (lib->Menu);
+  free (lib->Menu);
 
   *lib = *saved;
 
@@ -1626,8 +1619,9 @@ AddLayerChangeToUndoList (int old_index, int new_index)
 void
 AddNetlistLibToUndoList (LibraryType *lib)
 {
-  UndoListType *undo;
-  unsigned int i, j;
+  UndoListTypePtr undo;
+  int i, j;
+  GList *ii, *jj;
   LibraryType *old;
   
   if (!Locked)
@@ -1640,7 +1634,6 @@ AddNetlistLibToUndoList (LibraryType *lib)
       undo->Data.NetlistChange.old = (LibraryType *)malloc (sizeof (LibraryType));
       old = undo->Data.NetlistChange.old;
       old->MenuN = lib->MenuN;
-      old->MenuMax = lib->MenuMax;
       old->Menu = (LibraryMenuType *)malloc (old->MenuMax * sizeof (LibraryMenuType));
       if (old->Menu == NULL)
 	{
@@ -1649,21 +1642,15 @@ AddNetlistLibToUndoList (LibraryType *lib)
 	}
 
       /* iterate over each net */
-      for (i = 0 ; i < lib->MenuN; i++)
+      for (ii = liib->Menu, i = 0; ii != NULL; ii = g_liist_next (ii), i++)
 	{
-	  old->Menu[i].EntryN = lib->Menu[i].EntryN;
-	  old->Menu[i].EntryMax = lib->Menu[i].EntryMax;
+	  MenuType *menu = ii->data;
 
-	  old->Menu[i].Name = 
-	    lib->Menu[i].Name ? strdup (lib->Menu[i].Name) : NULL;
-	  
-	  old->Menu[i].directory = 
-	    lib->Menu[i].directory ? strdup (lib->Menu[i].directory) : NULL;
-	  
-	  old->Menu[i].Style = 
-	    lib->Menu[i].Style ? strdup (lib->Menu[i].Style) : NULL;
+	  old->Menu[i].EntryN = menu->EntryN;
+	  old->Menu[i].Name = menu->Name ? strdup (menu->Name) : NULL;
+	  old->Menu[i].directory = menu->directory ? strdup (menu->directory) : NULL;
+	  old->Menu[i].Style = menu->Style ? strdup (menu->Style) : NULL;
 
-      
 	  old->Menu[i].Entry = 
 	    (LibraryEntryType *)malloc (old->Menu[i].EntryMax * sizeof (LibraryEntryType));
 	  if (old->Menu[i].Entry == NULL)
@@ -1673,39 +1660,19 @@ AddNetlistLibToUndoList (LibraryType *lib)
 	    }
 	  
 	  /* iterate over each pin on the net */
-	  for (j = 0; j < lib->Menu[i].EntryN; j++) {
-
-	    old->Menu[i].Entry[j].ListEntry = 
-	      lib->Menu[i].Entry[j].ListEntry ? 
-	      strdup (lib->Menu[i].Entry[j].ListEntry) :
-	      NULL;
-
-	    old->Menu[i].Entry[j].AllocatedMemory = 
-	      lib->Menu[i].Entry[j].AllocatedMemory ? 
-	      strdup (lib->Menu[i].Entry[j].AllocatedMemory) :
-	      NULL;
-
-	    old->Menu[i].Entry[j].Template = 
-	      lib->Menu[i].Entry[j].Template ? 
-	      strdup (lib->Menu[i].Entry[j].Template) :
-	      NULL;
-
-	    old->Menu[i].Entry[j].Package = 
-	      lib->Menu[i].Entry[j].Package ? 
-	      strdup (lib->Menu[i].Entry[j].Package) :
-	      NULL;
-
-	    old->Menu[i].Entry[j].Value = 
-	      lib->Menu[i].Entry[j].Value ? 
-	      strdup (lib->Menu[i].Entry[j].Value) :
-	      NULL;
-
-	    old->Menu[i].Entry[j].Description = 
-	      lib->Menu[i].Entry[j].Description ? 
-	      strdup (lib->Menu[i].Entry[j].Description) :
-	      NULL;
-	    
-
+	  for (jj = menu->Entry, j = 0; jj != NULL; jj = g_list_next (jj), j++) {
+            LibraryEntryType *entry = jj->data;
+
+	    old->Menu[i].Entry[j].ListEntry =
+              entry->ListEntry ? strdup (entry->ListEntry) : NULL;
+	    old->Menu[i].Entry[j].AllocatedMemory =
+              entry->AllocatedMemory ? strdup (entry->AllocatedMemory) : NULL;
+	    old->Menu[i].Entry[j].Template =
+	      entry->Template ? strdup (entry->Template) : NULL;
+	    old->Menu[i].Entry[j].Package = entry->Package ? strdup (entry->Package) : NULL;
+	    old->Menu[i].Entry[j].Value = entry->Value ? strdup (entry->Value) : NULL;
+	    old->Menu[i].Entry[j].Description =
+              entry->Description ? strdup (entry->Description) : NULL;
 	  }
 	}
