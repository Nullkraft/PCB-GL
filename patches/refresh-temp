Bottom: c9e5fc8bf768c794463981dc4d8763148175c40f
Top:    f1f073f0554c01e035054cdfe62419873058034f
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-20 13:50:07 +0000

Refresh of temp-attempt-to-try-adding

---

diff --git a/src/polygon1.c b/src/polygon1.c
index 16c6597..cf92b1f 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -618,6 +618,7 @@ typedef struct info
   jmp_buf *env, sego, *touch;
   int need_restart;
   insert_node_task *node_insert_list;
+  bool debug;
 } info;
 
 typedef struct contour_info
@@ -815,6 +816,8 @@ get_seg (const BoxType * b, void *cl)
 {
   struct info *i = (struct info *) cl;
   struct seg *s = (struct seg *) b;
+  if (i->debug)
+    fprintf (stderr, "get_seg testing against segment %p (seg %p)\n", s->v, s);
   if (i->v == s->v)
     {
       i->s = s;
@@ -896,6 +899,7 @@ contour_bounds_touch (const BoxType * b, void *cl)
       /* fill in the segment in info corresponding to this node */
       if (setjmp (info.sego) == 0)
 	{
+	  info.debug = false;
 	  r_search (looping_over->tree, &box, NULL, get_seg, &info);
 	  g_error ("Did not find segment in contour tree!");
 	}
@@ -2481,6 +2485,40 @@ cvc_list_dump (CVCList *list)
 }
 #endif
 
+static seg *
+find_edge_seg (VNODE *edge, PLINE *contour)
+{
+  struct info info;
+  BoxType box;
+
+  /* fill in the segment in info corresponding to this node */
+  info.v = edge;
+  info.s = NULL;
+  box.X2 = (box.X1 = EDGE_BACKWARD_VERTEX (edge)->point[0]) + 1;
+  box.Y2 = (box.Y1 = EDGE_BACKWARD_VERTEX (edge)->point[1]) + 1;
+//  fprintf (stderr, "NEED TO FIND SEGMENT FOR EDGE   %p\n", info.v);
+  if (setjmp (info.sego) == 0)
+    {
+//      info.debug = true;
+      info.debug = false;
+      r_search (contour->tree, &box, NULL, get_seg, &info);
+      /* Didn't find the edge if we get here */
+    }
+  return info.s;
+}
+
+static bool
+is_edge_in_contour (VNODE *edge, PLINE *contour)
+{
+  VNODE *e = &contour->head;
+  do
+    {
+      if (e == edge)
+        return true;
+    }
+  while ((e = NEXT_EDGE(e)) != &contour->head);
+  return false;
+}
 
 /* NOTE: If any contour is split into multiple pieces due to hairline edge pairs
  * will not necessarily be inserted into the correct location. Hole contours
@@ -2555,6 +2593,9 @@ PLINE_check_hairline_edges (PLINE *contour)
           g_assert (l->poly == first_l->poly);
           g_assert (n->poly == first_l->poly);
 
+//          g_assert (is_edge_in_contour (l->parent, contour)); <-- UNTRUE.. SEVERAL CONTOURS MAY NOW BE JOINED AT THE CVC NODES
+//          g_assert (is_edge_in_contour (n->parent, contour)); <-- UNTRUE.. SEVERAL CONTOURS MAY NOW BE JOINED AT THE CVC NODES
+
           /* Check for hairline pairs of edges in the CVCList, they may be sorted in incorrect order,
            * and would thus mislead as to whether we are inside or outside a given contour. It is a
            * bug if such edges are present, so test for it here where we may detect it. We compare
@@ -2622,9 +2663,7 @@ PLINE_check_hairline_edges (PLINE *contour)
                   VNODE *point_v; /* As vertex */
                   VNODE *new_node;
                   char shorter_side;
-                  seg *node_seg;
-                  struct info info;
-                  BoxType box;
+//                  seg *node_seg;
 
                   g_critical ("Check found hairline edge pair (by compare_cvc_nodes), but geometry of each edge is different!");
                   /* XXX: Not sure how to handle this case... might get away with deleting the vertex in the middle of the
@@ -2649,18 +2688,12 @@ PLINE_check_hairline_edges (PLINE *contour)
                       shorter_side = l->side;
                     }
 
-                  /* fill in the segment in info corresponding to this node */
-                  info.v = longer;
-                  info.s = NULL;
-                  box.X2 = (box.X1 = EDGE_BACKWARD_VERTEX (longer)->point[0]) + 1;
-                  box.Y2 = (box.Y1 = EDGE_BACKWARD_VERTEX (longer)->point[1]) + 1;
-                  if (setjmp (info.sego) == 0)
-                    {
-                      r_search (contour->tree, &box, NULL, get_seg, &info);
-                      g_error ("Did not find segment in contour tree!");
-                    }
-                  node_seg = info.s;
+#if 0
+                  node_seg = find_edge_seg (longer, contour);
+                  if (node_seg == NULL)
+                    g_error ("Did not find segment in contour tree!");
                   g_assert (node_seg != NULL);
+#endif
 
                   point_v = EDGE_SIDE_DIR_VERTEX (shorter, shorter_side);
                   new_node = node_add_single_point (longer, point_v->point);
@@ -2689,8 +2722,14 @@ PLINE_check_hairline_edges (PLINE *contour)
 #endif
                     }
 
+                  /* SKIP THIS.. NOTHING USES THE CONTOUR TREE AFTER INTERSECTION,
+                   * AND AS THIS IS AN INTERSECTED CONTOUR, THESE CONTOURS ARE
+                   * EVENTUALLY DROPPED.
+                   */
+#if 0
                   if (adjust_tree (contour->tree, node_seg))
                     assert (0); /* XXX: Memory allocation failure */
+#endif
 
                   /* XXX: Could force creation of descriptors at the new node, and flag the shared pieces
                    * (shorter, and the segment between our new node, and the test vertex (along the old
diff --git a/src/rtree.c b/src/rtree.c
index 6558427..d8bede4 100644
--- a/src/rtree.c
+++ b/src/rtree.c
@@ -40,6 +40,7 @@
 
 #include "global.h"
 
+#undef NDEBUG
 #include <assert.h>
 #include <setjmp.h>
