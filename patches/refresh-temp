Bottom: 1cd43e87e1658d72435f4ea9a2a8c156679b14f9
Top:    547cc86751a94e5bc2b569d662cfb4876df712cf
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-04 14:26:18 +0000

Refresh of tmp

---

diff --git a/src/polygon1.c b/src/polygon1.c
index 5c43d25..97ed6e8 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -1566,13 +1566,15 @@ jump (VNODE **curv, DIRECTION *cdir, J_Rule j_rule)
 #ifdef DEBUG_JUMP
   DEBUGP ("jump entering node at %$mD\n", (*curv)->point[0], (*curv)->point[1]);
 #endif
+  /* Pick the descriptor of the edge we came into this vertex with, then spin (anti?)clock-wise one edge descriptor */
   if (*cdir == FORW)
-    d = (*curv)->cvc_prev->prev;
+    d = (*curv)->cvc_prev->prev; /* If we start with a CVC Vertex.. this previous edge has not been vetted for whether it belongs in the polygon or not!! */
   else
     d = (*curv)->cvc_next->prev;
   start = d;
   do
     {
+      /* Get the edge e, associated with that descriptor */
       if (d->side == 'P')
         e = VERTEX_BACKWARD_EDGE (d->parent);
       else
@@ -1586,10 +1588,10 @@ jump (VNODE **curv, DIRECTION *cdir, J_Rule j_rule)
 #ifdef DEBUG_JUMP
 	      if (newone == FORW)
 		DEBUGP ("jump leaving node at %#mD\n",
-			NEXT_VERTEX (e)->point[0], NEXT_VERTEX (e)->point[1]);
+			EDGE_FORWARD_VERTEX (e)->point[0], EDGE_FORWARD_VERTEX (e)->point[1]);
 	      else
 		DEBUGP ("jump leaving node at %#mD\n",
-			e->point[0], e->point[1]);
+			EDGE_BACKWARD_VERTEX (e)->point[0], EDGE_BACKWARD_VERTEX (e)->point[1]);
 #endif
 	      *curv = d->parent;
 	      *cdir = newone;
@@ -1597,7 +1599,7 @@ jump (VNODE **curv, DIRECTION *cdir, J_Rule j_rule)
 	    }
 	}
     }
-  while ((d = d->prev) != start);
+  while ((d = d->prev) != start); /* Keep searching around the cvc vertex for a suitable exit edge */
   return FALSE;
 }
