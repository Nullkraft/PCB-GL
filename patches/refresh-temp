Bottom: b49510eaffbd93e70ca3f0423a1b57129f739d21
Top:    12b8c3bc90c9c405244b4841504f904f84594fb5
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-17 18:50:33 +0000

Refresh of try-to-deal-with-faces-as-well

---

diff --git a/src/hid/step/model.cpp b/src/hid/step/model.cpp
index 919bf84..7fb81f0 100644
--- a/src/hid/step/model.cpp
+++ b/src/hid/step/model.cpp
@@ -192,6 +192,8 @@ find_mapped_item (SdaiShape_representation *sr,
 typedef struct process_step_info {
   /* Hash / list of SR -> step_model */
   object3d *object;
+  face3d *current_face;
+  contour3d *current_contour;
   double current_transform[4][4];
 
 } process_step_info;
@@ -1209,6 +1211,7 @@ process_sr_or_subtype(InstMgr *instance_list, SdaiShape_representation *sr, proc
             {
               SdaiFace_bound *fb = (SdaiFace_bound *)((EntityNode *)iter)->node;
 
+              info->current_face = make_face3d ((char *)"");
 
 #if 0
               bool is_outer_bound = (strcmp (fb->EntityName (), "Face_Outer_Bound") == 0);
@@ -1230,6 +1233,7 @@ process_sr_or_subtype(InstMgr *instance_list, SdaiShape_representation *sr, proc
               if (strcmp (loop->EntityName (), "Edge_Loop") == 0)
                 {
                   SdaiEdge_loop *el = (SdaiEdge_loop *)loop;
+                  bool first_edge_of_contour = true;
 
                   // NB: EDGE_LOOP uses multiple inheritance from LOOP and PATH, thus needs special handling to
                   //     access the elements belonging to PATH, such as edge_list ...
@@ -1252,8 +1256,6 @@ process_sr_or_subtype(InstMgr *instance_list, SdaiShape_representation *sr, proc
                       SdaiEdge *edge = oe->edge_element_ ();
                       bool orientation = oe->orientation_ ();
 
-                      g_hash_table_insert (edges_hash_set, edge, GINT_TO_POINTER(orientation ? 1 : 0));
-
                       if (strcmp (edge->edge_start_ ()->EntityName (), "Vertex_Point") != 0 ||
                           strcmp (edge->edge_end_   ()->EntityName (), "Vertex_Point") != 0)
                         {
@@ -1293,54 +1295,28 @@ process_sr_or_subtype(InstMgr *instance_list, SdaiShape_representation *sr, proc
                           continue;
                         }
 
-#if 0
-                      SdaiCartesian_point *edge_start_cp = (SdaiCartesian_point *)edge_start_point;
-                      SdaiCartesian_point *edge_end_cp = (SdaiCartesian_point *)edge_end_point;
-
-                      printf ("    Edge #%i starts at (%f, %f, %f) and ends at (%f, %f, %f)\n",
-                              edge->StepFileId (),
-                              ((RealNode *)edge_start_cp->coordinates_ ()->GetHead())->value,
-                              ((RealNode *)edge_start_cp->coordinates_ ()->GetHead()->NextNode())->value,
-                              ((RealNode *)edge_start_cp->coordinates_ ()->GetHead()->NextNode()->NextNode())->value,
-                              ((RealNode *)edge_end_cp->coordinates_ ()->GetHead())->value,
-                              ((RealNode *)edge_end_cp->coordinates_ ()->GetHead()->NextNode())->value,
-                              ((RealNode *)edge_end_cp->coordinates_ ()->GetHead()->NextNode()->NextNode())->value);
-
-                      if (strcmp (edge->EntityName (), "Edge_Curve") == 0)
+                      if (g_hash_table_lookup (edges_hash_set, edge))
                         {
-                          SdaiEdge_curve *ec = (SdaiEdge_curve *)edge;
-
-                          SdaiCurve *curve = ec->edge_geometry_ ();
-                          bool same_sense = ec->same_sense_ ();
-
-                          printf ("         underlying curve is %s #%i, same_sense is %s\n", curve->EntityName (), curve->StepFileId(), same_sense ? "True" : "False");
-
-                          if (strcmp (curve->EntityName (), "Line") == 0)
-                            {
-//                              printf ("WARNING: Underlying curve geometry type Line is not supported yet\n");
-//                              continue;
-                            }
-                          else if (strcmp (curve->EntityName (), "Circle") == 0)
-                            {
-//                              printf ("WARNING: Underlying curve geometry type circle is not supported yet\n");
-//                              continue;
-                            }
-                          else
-                            {
-                              printf ("WARNING: Unhandled curve geometry type (%s), #%i\n", curve->EntityName (), curve->StepFileId ());
-                              // XXX: line, conic, pcurve, surface_curve, offset_curve_2d, offset_curve_3d, curve_replica
-                              // XXX: Various derived types of the above, e.g.:
-                              //      conic is a supertype of: circle, ellipse, hyperbola, parabola
-                              continue;
-                            }
+                          /* Just add it to the face? */
 
+                          our_edge = get_edge_from_hash_table ();
                         }
                       else
                         {
-                          printf ("WARNING: found unknown edge type (%s)\n", edge->EntityName ());
-                          continue;
+                          our_edge = make_edge ("");
+
+                          g_hash_table_insert (edges_hash_set, edge, GINT_TO_POINTER(orientation ? 1 : 0));
+
+                          /* Populate edge geometry (?)... or do we leave processing until later */
                         }
-#endif
+
+
+                    if (first_edge_of_contour)
+                      {
+                        info->current_contour = make_contour3d (our_edge);
+                        face3d_add_contour (info->current_face, info->current_contour);
+                        first_edge_of_contour = false;
+                      }
 
                     }
