Bottom: 8fcd9942ea919bbadf134b1bfd2b72c1995b8ef5
Top:    1b58f101752654c4e003a6aaa9eb94ddad8314f7
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-05 21:39:52 +0000

Refresh of dangling-fixup-from-old-way-of

---

diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index dadf05d..21f8211 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -259,97 +259,103 @@ object3d_from_board_outline (void)
 
   /* Loop over all board outline pieces */
   pa = board_outline;
-  do {
+  do
+    {
 
-    contour = pa->contours;
-    ncontours = 0;
-    npoints = 0;
+      contour = pa->contours;
+      ncontours = 0;
+      npoints = 0;
 
-    ct = contour;
-    while (ct != NULL) {
-      ncontours ++;
-      npoints += get_contour_npoints (ct);
-      ct = ct->next;
-    }
+      ct = contour;
+      while (ct != NULL)
+        {
+          ncontours ++;
+          npoints += get_contour_npoints (ct);
+          ct = ct->next;
+        }
 
-    board_object = make_object3d (PCB->Name);
-    board_appearance = make_appearance ();
-    top_bot_appearance = make_appearance ();
-    appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
-    appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
+      object = make_object3d (PCB->Name);
+      board_appearance = make_appearance ();
+      top_bot_appearance = make_appearance ();
+      appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
+      appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
 
-    object3d_set_appearance (board_object, board_appearance);
+      object3d_set_appearance (object, board_appearance);
 
-    vertices = malloc (sizeof (vertex3d *) * 2 * npoints); /* (n-bottom, n-top) */
-    edges    = malloc (sizeof (edge_ref  ) * 3 * npoints); /* (n-bottom, n-top, n-sides) */
-    faces    = malloc (sizeof (face3d *) * (npoints + 2)); /* (n-sides, 1-bottom, 1-top */
+      vertices = malloc (sizeof (vertex3d *) * 2 * npoints); /* (n-bottom, n-top) */
+      edges    = malloc (sizeof (edge_ref  ) * 3 * npoints); /* (n-bottom, n-top, n-sides) */
+      faces    = malloc (sizeof (face3d *) * (npoints + 2)); /* (n-sides, 1-bottom, 1-top */
 
-    /* Define the vertices */
-    ct = contour;
-    offset_in_ct = 0;
-    ct_npoints = get_contour_npoints (ct);
+      /* Define the vertices */
+      ct = contour;
+      offset_in_ct = 0;
+      ct_npoints = get_contour_npoints (ct);
 
-    for (i = 0; i < npoints; i++, offset_in_ct++) {
-      double x1, y1;
+      for (i = 0; i < npoints; i++, offset_in_ct++)
+        {
+          double x1, y1;
 
-      /* Update which contour we're looking at */
-      if (offset_in_ct == ct_npoints) {
-        offset_in_ct = 0;
-        ct = ct->next;
-        ct_npoints = get_contour_npoints (ct);
-      }
+          /* Update which contour we're looking at */
+          if (offset_in_ct == ct_npoints)
+            {
+              offset_in_ct = 0;
+              ct = ct->next;
+              ct_npoints = get_contour_npoints (ct);
+            }
 
-      get_contour_coord_n_in_step_mm (ct, offset_in_ct, &x1, &y1);
+          get_contour_coord_n_in_step_mm (ct, offset_in_ct, &x1, &y1);
 
 #ifdef REVERSED_PCB_CONTOURS
-      vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS)); /* Bottom */
-      vertices[npoints + i] = make_vertex3d (x1, y1, 0);                                            /* Top */
+          vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS)); /* Bottom */
+          vertices[npoints + i] = make_vertex3d (x1, y1, 0);                                            /* Top */
 #else
-      vertices[i]           = make_vertex3d (x1, y1,  COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS) / 2.); /* Bottom */
-      vertices[npoints + i] = make_vertex3d (x1, y1, -COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS) / 2.); /* Top */
+          vertices[i]           = make_vertex3d (x1, y1,  COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS) / 2.); /* Bottom */
+          vertices[npoints + i] = make_vertex3d (x1, y1, -COORD_TO_STEP_Z (PCB, HACK_BOARD_THICKNESS) / 2.); /* Top */
 #endif
 
-      object3d_add_vertex (board_object, vertices[i]);
-      object3d_add_vertex (board_object, vertices[npoints + i]);
-    }
+          object3d_add_vertex (object, vertices[i]);
+          object3d_add_vertex (object, vertices[npoints + i]);
+        }
 
-    /* Define the edges */
-    for (i = 0; i < 3 * npoints; i++) {
-      edges[i] = make_edge ();
-      UNDIR_DATA (edges[i]) = make_edge_info ();
-      object3d_add_edge (board_object, edges[i]);
-    }
+      /* Define the edges */
+      for (i = 0; i < 3 * npoints; i++)
+        {
+          edges[i] = make_edge ();
+          UNDIR_DATA (edges[i]) = make_edge_info ();
+          object3d_add_edge (object, edges[i]);
+        }
 
-    /* Define the faces */
-    for (i = 0; i < npoints; i++) {
-      faces[i] = make_face3d ();
+      /* Define the faces */
+      for (i = 0; i < npoints; i++)
+        {
+          faces[i] = make_face3d ();
 
-          object3d_add_face (object, faces[i]);
-          /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
+            object3d_add_face (object, faces[i]);
+            /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
 #ifdef REVERSED_PCB_CONTOURS
-          face3d_add_contour (faces[i], make_contour3d (edges[2 * npoints + i]));
+            face3d_add_contour (faces[i], make_contour3d (edges[2 * npoints + i]));
 #else
-          face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
+            face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
 #endif
-        }
+          }
 
-    faces[npoints] = make_face3d (); /* bottom_face */
+      faces[npoints] = make_face3d (); /* bottom_face */
 #ifdef REVERSED_PCB_CONTOURS
-    face3d_set_normal (faces[npoints], 0., 0., -1.);
+      face3d_set_normal (faces[npoints], 0., 0., -1.);
 #else
-    face3d_set_normal (faces[npoints], 0., 0., 1.);
+      face3d_set_normal (faces[npoints], 0., 0., 1.);
 #endif
-    face3d_set_appearance (faces[npoints], top_bot_appearance);
-    object3d_add_face (board_object, faces[npoints]);
+      face3d_set_appearance (faces[npoints], top_bot_appearance);
+      object3d_add_face (object, faces[npoints]);
 
-    faces[npoints + 1] = make_face3d (); /* top_face */
+      faces[npoints + 1] = make_face3d (); /* top_face */
 #ifdef REVERSED_PCB_CONTOURS
-    face3d_set_normal (faces[npoints + 1], 0., 0., 1.);
+      face3d_set_normal (faces[npoints + 1], 0., 0., 1.);
 #else
-    face3d_set_normal (faces[npoints + 1], 0., 0., -1.);
+      face3d_set_normal (faces[npoints + 1], 0., 0., -1.);
 #endif
-    face3d_set_appearance (faces[npoints + 1], top_bot_appearance);
-    object3d_add_face (board_object, faces[npoints + 1]);
+      face3d_set_appearance (faces[npoints + 1], top_bot_appearance);
+      object3d_add_face (object, faces[npoints + 1]);
 
       /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
 #ifdef REVERSED_PCB_CONTOURS
