Bottom: 3aeab40fb32c4da5848193b3312d890f0136913d
Top:    7f01eb6134abbcdba4e1acc8f545f403248e9e3b
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2015-04-26 16:04:01 +0100

Refresh of add-stepcode-based-assembly

---

diff --git a/src/hid/step/assembly.cpp b/src/hid/step/assembly.cpp
index 4b0e407..1cc4a3f 100644
--- a/src/hid/step/assembly.cpp
+++ b/src/hid/step/assembly.cpp
@@ -710,7 +710,16 @@ append_model_from_file (Registry *registry,
 
   STEPfile sfile = STEPfile (*registry, *instance_list, "", false);
 
-  sfile.AppendExchangeFile (filename);
+  // XXX: This appears to throw exceptions from std::ios_base if the file doesn't exist
+  try
+    {
+      sfile.AppendExchangeFile (filename);
+    }
+  catch (...)
+    {
+      std::cout << "ERROR: Caught exception when attempting to read from file '" << filename << "' (does the file exist?)" << std::endl;
+      return NULL;
+    }
 
   Severity severity = sfile.Error().severity();
   if (severity != SEVERITY_NULL)
@@ -909,7 +918,7 @@ export_step_assembly (const char *filename, GList *models)
       model_pd = append_model_from_file (registry, instance_list, model->filename);
       if (model_pd == NULL)
         {
-          printf ("ERROR Loading STEP model from file '%s'", model->filename);
+          printf ("ERROR Loading STEP model from file '%s'\n", model->filename);
           continue;
         }
 
diff --git a/src/hid/step/step.c b/src/hid/step/step.c
index a228dc4..95fd193 100644
--- a/src/hid/step/step.c
+++ b/src/hid/step/step.c
@@ -919,6 +919,39 @@ step_do_export (HID_Attr_Val * options)
         parse_numeric_attribute (element, "PCB::3d_model::ref_dir::Z", &rz);
         parse_numeric_attribute (element, "PCB::rotation", &rotation);
 
+#if 1  /* Write the intended final syntax attributes */
+        if (1)
+          {
+            GString *value = g_string_new (NULL);
+
+            attribute = AttributeGet (element, "PCB::3d_model::origin::X");
+            g_string_printf (value, "%s", attribute != NULL ? attribute : "0.0 mm");
+            attribute = AttributeGet (element, "PCB::3d_model::origin::Y");
+            g_string_append_printf (value, "%s", attribute != NULL ? attribute : "0.0 mm");
+            attribute = AttributeGet (element, "PCB::3d_model::origin::Z");
+            g_string_append_printf (value, "%s", attribute != NULL ? attribute : "0.0 mm");
+            AttributePutToList (&element->Attributes, "PCB::3d_model::origin", value->str, true);
+
+            attribute = AttributeGet (element, "PCB::3d_model::axis::X");
+            g_string_printf (value, "%s", attribute != NULL ? attribute : "0.0");
+            attribute = AttributeGet (element, "PCB::3d_model::axis::Y");
+            g_string_append_printf (value, "%s", attribute != NULL ? attribute : "0.0");
+            attribute = AttributeGet (element, "PCB::3d_model::axis::Z");
+            g_string_append_printf (value, "%s", attribute != NULL ? attribute : "0.0");
+            AttributePutToList (&element->Attributes, "PCB::3d_model::axis", value->str, true);
+
+            attribute = AttributeGet (element, "PCB::3d_model::ref_dir::X");
+            g_string_printf (value, "%s", attribute != NULL ? attribute : "0.0");
+            attribute = AttributeGet (element, "PCB::3d_model::ref_dir::Y");
+            g_string_append_printf (value, "%s", attribute != NULL ? attribute : "0.0");
+            attribute = AttributeGet (element, "PCB::3d_model::ref_dir::Z");
+            g_string_append_printf (value, "%s", attribute != NULL ? attribute : "0.0");
+            AttributePutToList (&element->Attributes, "PCB::3d_model::ref_dir", value->str, true);
+
+            g_string_free (value, true);
+          }
+#endif
+
         printf ("Transform (%f, %f, %f), (%f, %f, %f), (%f, %f, %f). Rotation of part is %f\n", ox, oy, oz, ax, ay, az, rx, ry, rz, rotation);
 
         model = NULL;
