Bottom: a7c7761df93956fa6c67f93177738f44433c3a41
Top:    6384a596a058559f853d951497812b5f4b8acafa
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-21 13:46:05 +0000

Refresh of fix-polygon-hairline-handling

---

diff --git a/src/polygon1.c b/src/polygon1.c
index 2f2ee7a..c9fef08 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -481,8 +481,7 @@ edge_label
 static unsigned int
 edge_label (VNODE * pn, int existing_label)
 {
-  CVCList *first_l, *l, *test;
-  char this_poly;
+  CVCList *l, *test;
   int region;
   bool shared_edge_case = false;
 
@@ -497,7 +496,6 @@ edge_label (VNODE * pn, int existing_label)
   l = EDGE_BACKWARD_VERTEX (pn)->cvc_next;
 
   assert (l);
-  this_poly = l->poly;
 
   /* Shared edges can be sorted in either order, so need to check l->prev as well */
   test = prev_cvc_from_other_poly (l);
@@ -2452,57 +2450,12 @@ add_dummy_descriptors_at_point (Vector point, char poly, CVCList * list, POLYARE
 
 
 static void
-remove_cvc_list_entry (CVCList *l)
+mark_cvc_list_entry_as_skip (CVCList *l)
 {
-  CVCList *head_iter;
-  CVCList *cvc_iter;
-  bool last_at_vertex;
-
   if (l == NULL)
     return;
 
   l->skip_me = true;
-
-  return;
-
-  last_at_vertex = (l->prev == l || l->next == l); /* XXX: Are these conditions equivalent for the last in list case? */
-
-  if (l->side == 'P')
-    l->parent->cvc_prev = NULL;
-  else
-    l->parent->cvc_next = NULL;
-
-  l->next->prev = l->prev;
-  l->prev->next = l->next;
-
-  /* Ensure the CVCList we're about to free is not pointed to by any of the master
-   * CVCList links
-   */
-  /* Loop over all CVC heads, starting with l->head, stopping when we get back to l */
-  head_iter = l->head;
-  do
-    {
-      if (head_iter->head == l) /* This CVCList group points at l as the next group */
-        {
-          /* Loop over all CVC in iter, change iter->head to point to the next
-           * descriptor for this vertex, or if we removed the last one, to the
-           * next CVCList vertex group, l->head
-           */
-          cvc_iter = head_iter;
-          do
-            {
-              if (last_at_vertex)
-                cvc_iter->head = l->head;
-              else
-                cvc_iter->head = l->next;
-            }
-          while ((cvc_iter = cvc_iter->next) != head_iter);
-          break;
-        }
-    }
-  while ((head_iter = head_iter->head) != l->head);
-
-  free (l);
 }
 
 static CVCList *
@@ -2702,9 +2655,9 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
 
                   /* NOTE: 'P' at this node means 'N' at otherend */
                   fprintf (stderr, "Removing CVC descriptor at %p\n", (l->side == 'P') ? l_otherend->cvc_next : l_otherend->cvc_prev);
-                  remove_cvc_list_entry ((l->side == 'P') ? l_otherend->cvc_next : l_otherend->cvc_prev);
+                  mark_cvc_list_entry_as_skip ((l->side == 'P') ? l_otherend->cvc_next : l_otherend->cvc_prev);
                   fprintf (stderr, "Removing CVC descriptor at %p\n", (n->side == 'P') ? n_otherend->cvc_next : n_otherend->cvc_prev);
-                  remove_cvc_list_entry ((n->side == 'P') ? n_otherend->cvc_next : n_otherend->cvc_prev);
+                  mark_cvc_list_entry_as_skip ((n->side == 'P') ? n_otherend->cvc_next : n_otherend->cvc_prev);
 
                   point_v = l_otherend; /* Vertex end where we will ensure descriptors exist */
 
@@ -2833,7 +2786,7 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
               fprintf (stderr, "Dumping CVC list after adding our new nodes\n");
               cvc_list_dump (find_cvc_at_point (the_list, point));
 
-              /* Now remove the vertices from both CVC lists, to avoid complicating the edge labeling code.
+              /* Now remove the vertices from this CVC list, to avoid complicating the edge labeling code.
                * Alternatively - teach the edge labeling code to skip pre-marked edges?
                *
                * NOTE: We are careful not to re-add these marked vertices as we progress further in our
@@ -2844,9 +2797,9 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
 #if 0
               /* NOTE: 'P' at this node means 'N' at otherend */
               fprintf (stderr, "Removing CVC descriptor at %p\n", (l->side == 'P') ? l_otherend->cvc_next : l_otherend->cvc_prev);
-              remove_cvc_list_entry ((l->side == 'P') ? l_otherend->cvc_next : l_otherend->cvc_prev);
+              mark_cvc_list_entry_as_skip ((l->side == 'P') ? l_otherend->cvc_next : l_otherend->cvc_prev);
               fprintf (stderr, "Removing CVC descriptor at %p\n", (n->side == 'P') ? n_otherend->cvc_next : n_otherend->cvc_prev);
-              remove_cvc_list_entry ((n->side == 'P') ? n_otherend->cvc_next : n_otherend->cvc_prev);
+              mark_cvc_list_entry_as_skip ((n->side == 'P') ? n_otherend->cvc_next : n_otherend->cvc_prev);
 #endif
 
               /* Find the next eligible edge to start from, since we're about to delete the
@@ -2864,7 +2817,7 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
                     terminate_after_this_iteration = true;
                 }
               fprintf (stderr, "Removing CVC descriptor at %p\n", l);
-              remove_cvc_list_entry (l);
+              mark_cvc_list_entry_as_skip (l);
 #warning ACTUALLY, THIS IS HIT WHEN WE REMOVE THE FIRST EDGE IN l ABOVE.. NEED TO COPE MORE GRACEFULLY!
               if (n == first_l)
                 {
@@ -2872,7 +2825,7 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
                   terminate_after_this_iteration = true;
                 }
               fprintf (stderr, "Removing CVC descriptor at %p\n", n);
-              remove_cvc_list_entry (n);
+              mark_cvc_list_entry_as_skip (n);
               cvc_list_dump (find_cvc_at_point (the_list, point));
 
               n = nn;
