Bottom: 16924a8e4cfb1d7980b49901668e6140e4b51ed0
Top:    b49510eaffbd93e70ca3f0423a1b57129f739d21
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-12-17 17:01:53 +0000

Refresh of toy-rendering-attempt

---

diff --git a/src/hid/step/model.cpp b/src/hid/step/model.cpp
index 0ee479c..919bf84 100644
--- a/src/hid/step/model.cpp
+++ b/src/hid/step/model.cpp
@@ -61,14 +61,20 @@ extern "C" {
 # include <unistd.h>
 #endif
 
-#if 1
+#if 0
 #  define DEBUG_PRODUCT_DEFINITION_SEARCH
 #  define DEBUG_CHILD_REMOVAL
 #  define DEBUG_PRODUCT_DEFINITION
+#  define DEBUG_B_SPLINE_CURVES
+#  define DEBUG_ASSEMBLY_TRAVERSAL
+#  define DEBUG_TRANSFORMS
 #else
 #  undef DEBUG_PRODUCT_DEFINITION_SEARCH
 #  undef DEBUG_CHILD_REMOVAL
 #  undef DEBUG_PRODUCT_DEFINITION
+#  undef DEBUG_B_SPLINE_CURVES
+#  undef DEBUG_ASSEMBLY_TRAVERSAL
+#  undef DEBUG_TRANSFORMS
 #endif
 
 #if 1
@@ -515,8 +521,8 @@ process_bscwk (SDAI_Application_instance *start_entity, edge_ref our_edge, proce
       entity = stepcomplex;
     }
 
+#ifdef DEBUG_B_SPLINE_CURVES
   /* Now we see what we found .... */
-
   printf ("------\n");
   printf ("b_spline_curve_degree = %i\n",b_spline_curve_degree);
   printf ("control_points = %p\n",control_points);
@@ -541,6 +547,7 @@ process_bscwk (SDAI_Application_instance *start_entity, edge_ref our_edge, proce
   if (knots != NULL) {
     printf ("Number of knots = %i\n", knots->EntryCount ());
   }
+#endif
 
   if ((knot_multiplicities == NULL) !=
       (knots == NULL))
@@ -566,7 +573,9 @@ process_bscwk (SDAI_Application_instance *start_entity, edge_ref our_edge, proce
   num_control_points = control_points->EntryCount ();
 
   if (weights != NULL) {
+#ifdef DEBUG_B_SPLINE_CURVES
     printf ("Number of weights = %i\n", weights->EntryCount ());
+#endif
 
     if (weights->EntryCount () != num_control_points)
       {
@@ -576,14 +585,14 @@ process_bscwk (SDAI_Application_instance *start_entity, edge_ref our_edge, proce
 
   num_knots = num_control_points + b_spline_curve_degree + 1;
 
+#ifdef DEBUG_B_SPLINE_CURVES
   printf ("------\n");
+#endif
 
   our_edge_info->is_bspline = true;
   our_edge_info->degree = b_spline_curve_degree;
   our_edge_info->num_control_points = num_control_points;
 
-  /* XXX: TODO: Iterate over control points, knots, weights etc.. filling in these details */
-
   our_edge_info->control_points = g_new(double, num_control_points * 3);
   our_edge_info->weights =        g_new(double, num_control_points);
   our_edge_info->knots =          g_new(double, num_knots);
@@ -714,7 +723,11 @@ process_bscwk (SDAI_Application_instance *start_entity, edge_ref our_edge, proce
   double dist1 = distance(v1_, &our_edge_info->control_points[0]);
   double dist2 = distance(v2_, &our_edge_info->control_points[(num_control_points - 1)*3]);
 
-  printf ("End point to first control point distances %f and %f\n", dist1, dist2);
+  if (dist1 > 0.01 || dist2 > 0.02)
+    {
+      printf ("Entity #%i end point to first control point distances %f and %f\n", 
+              dist1, dist2);
+    }
 }
 
 static void
@@ -800,8 +813,8 @@ process_edges (GHashTable *edges_hash_set, process_step_info *info) //object3d *
           bool same_sense = ec->same_sense_ ();
 
 #ifdef DEBUG_NOT_IMPLEMENTED
-          if (!same_sense)
-            printf ("XXX: HAVE NOT TESTED THIS CASE.... same_sense is false\n");
+//          if (!same_sense)
+//            printf ("XXX: HAVE NOT TESTED THIS CASE.... same_sense is false\n");
 #endif
 
 #if 0
@@ -852,7 +865,6 @@ process_edges (GHashTable *edges_hash_set, process_step_info *info) //object3d *
                 }
               else
                 {
-                  printf ("URM................\n");
                   edge_info_set_round (edge_info, cx, cy, cz, -nx, -ny, -nz, radius);
                 }
 
@@ -1012,12 +1024,14 @@ process_shape_representation(InstMgr *instance_list, SdaiShape_representation *s
       ry = ((RealNode *)child_axis->ref_direction_ ()->direction_ratios_ ()->GetHead ()->NextNode ())->value;
       rz = ((RealNode *)child_axis->ref_direction_ ()->direction_ratios_ ()->GetHead ()->NextNode ()->NextNode ())->value;
 
+#ifdef DEBUG_TRANSFORMS
       printf ("child axis o: (%f, %f, %f)\n"
               "           a: (%f, %f, %f)\n"
               "           r: (%f, %f, %f)\n",
               ox, oy, oz,
               ax, ay, az,
               rx, ry, rz);
+#endif
 
       /* XXX: Looking only at the target vector.. need to find some examples where the parent transform coordinate system is not unity to get this correct */
       rotate_basis (info->current_transform, ax, ay, az, rx, ry, rz);
@@ -1035,6 +1049,7 @@ process_shape_representation(InstMgr *instance_list, SdaiShape_representation *s
       ry = ((RealNode *)parent_axis->ref_direction_ ()->direction_ratios_ ()->GetHead ()->NextNode ())->value;
       rz = ((RealNode *)parent_axis->ref_direction_ ()->direction_ratios_ ()->GetHead ()->NextNode ()->NextNode ())->value;
 
+#ifdef DEBUG_TRANSFORMS
       printf ("parent axis o: (%f, %f, %f)\n"
               "            a: (%f, %f, %f)\n"
               "            r: (%f, %f, %f)\n",
@@ -1042,6 +1057,7 @@ process_shape_representation(InstMgr *instance_list, SdaiShape_representation *s
               ax, ay, az,
               rx, ry, rz);
       printf ("\n");
+#endif
 
       rotate_basis_inverted (info->current_transform, ax, ay, az, rx, ry, rz);
       translate_origin (info->current_transform, -ox, -oy, -oz);
@@ -1121,12 +1137,12 @@ process_sr_or_subtype(InstMgr *instance_list, SdaiShape_representation *sr, proc
 
   for (msb_list::iterator iter = msb_list.begin (); iter != msb_list.end (); iter++)
     {
-      std::cout << "Found MANIFOLD_SOLID_BREP; processing" << std::endl;
+//      std::cout << "Found MANIFOLD_SOLID_BREP; processing" << std::endl;
       SdaiClosed_shell *cs = (*iter)->outer_ ();
 
       /* XXX: Need to check if msb is actually an instance of BREP_WITH_VOIDS, whereupon we also need to iterate over the void shell(s) */
 
-      std::cout << "Closed shell is " << cs << std::endl;
+//      std::cout << "Closed shell is " << cs << std::endl;
 
       /* NB: NULLs give g_direct_hash and g_direct_equal */
       edges_hash_set = g_hash_table_new (NULL, NULL);
@@ -1349,7 +1365,9 @@ process_sr_or_subtype(InstMgr *instance_list, SdaiShape_representation *sr, proc
 
   for (mi_list::iterator iter = mi_list.begin (); iter != mi_list.end (); iter++)
     {
+#ifdef DEBUG_ASSEMBLY_TRAVERSAL
       std::cout << "Found MAPPED_ITEM; processing" << std::endl;
+#endif
       SdaiMapped_item *mi = (*iter);
 
       SdaiRepresentation_map *rm = dynamic_cast<SdaiRepresentation_map *>(mi->mapping_source_());
@@ -1452,7 +1470,7 @@ step_model_to_shape_master (const char *filename)
   step_model *step_model;
   process_step_info info;
 
-  printf ("step_model_to_shape_master(\"%s\")\n", filename);
+//  printf ("step_model_to_shape_master(\"%s\")\n", filename);
 
   Registry * registry = new Registry (SchemaInit);
   InstMgr * instance_list = new InstMgr (/* ownsInstance = */1);
