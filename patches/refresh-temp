Bottom: e6f29f3897960285a183b5892c2a28afcfa8db4c
Top:    9488e5c13b70834dd090f1b565db63109e502409
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-13 18:31:21 +0000

Refresh of attempt-storing-arc-center

---

diff --git a/src/misc.c b/src/misc.c
index b4babfd..79416c8 100644
--- a/src/misc.c
+++ b/src/misc.c
@@ -362,10 +362,12 @@ SetLineBoundingBox (LineType *Line)
  */
 void
 calc_arc_from_points_and_included_angle (PointType *p1, PointType *p2, Angle included_angle,
-                                         Coord *cx, Coord *cy, Coord *radius,
+                                         double *cx, double *cy, double *radius,
+//                                         Coord *cx, Coord *cy, Coord *radius,
                                          Angle *start_angle, Angle *delta_angle)
 {
-  Coord hx, hy;
+  double hx, hy;
+//  Coord hx, hy;
   double p_to_h_dist;
   double c_to_h_dist;
   double unit_hcx, unit_hcy;
@@ -434,7 +436,8 @@ SetPolygonBoundingBox (PolygonType *Polygon)
     if (point->included_angle != 0)
       {
         BoxType arc_bound;
-        Coord cx, cy, radius;
+        double cx, cy, radius;
+//        Coord cx, cy, radius;
         Angle start_angle, delta_angle;
         PointType *next_point;
 
diff --git a/src/misc.h b/src/misc.h
index 84f62ed..ded72f6 100644
--- a/src/misc.h
+++ b/src/misc.h
@@ -53,7 +53,8 @@ void SetArcEndpoints (ArcType *);
 void SetPointBoundingBox (PointType *);
 void SetPinBoundingBox (PinType *);
 void SetPadBoundingBox (PadType *);
-void calc_arc_from_points_and_included_angle (PointType *p1, PointType *p2, Angle included_angle, Coord *cx, Coord *cy, Coord *radius, Angle *start_angle, Angle *delta_angle);
+void calc_arc_from_points_and_included_angle (PointType *p1, PointType *p2, Angle included_angle, double *cx, double *cy, double *radius, Angle *start_angle, Angle *delta_angle);
+//void calc_arc_from_points_and_included_angle (PointType *p1, PointType *p2, Angle included_angle, Coord *cx, Coord *cy, Coord *radius, Angle *start_angle, Angle *delta_angle);
 void SetPolygonBoundingBox (PolygonType *);
 void SetElementBoundingBox (DataType *, ElementType *, FontType *);
 bool IsDataEmpty (DataType *);
diff --git a/src/polyarea.h b/src/polyarea.h
index c892307..199bc59 100644
--- a/src/polyarea.h
+++ b/src/polyarea.h
@@ -94,8 +94,10 @@ struct VNODE
     double p0; /* Smaller parameter along curve, 0-1 */
     double p1; /* Larger  parameter along curve, 0-1 */
     bool is_round;
-    Coord cx, cy;
-    Coord radius;
+    double cx, cy;
+    double radius;
+//    Coord cx, cy;
+//    Coord radius;
 };
 
 typedef struct PLINE PLINE;
@@ -130,7 +132,8 @@ void poly_PreContour(PLINE * c, BOOLp optimize); /* prepare contour */
 void poly_InvContour(PLINE * c);  /* invert contour */
 
 VNODE *poly_CreateNode(Vector v);
-VNODE *poly_CreateNodeArcApproximation(Vector v, Coord cx, Coord cy, Coord radius);
+VNODE *poly_CreateNodeArcApproximation(Vector v, double cx, double cy, double radius);
+//VNODE *poly_CreateNodeArcApproximation(Vector v, Coord cx, Coord cy, Coord radius);
 
 void poly_InclVertex(VNODE * after, VNODE * node);
 void poly_ExclVertex(VNODE * node);
diff --git a/src/polygon.c b/src/polygon.c
index c04b153..346e3b2 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -293,7 +293,8 @@ ContourToPoly (PLINE * contour)
 }
 
 static void
-degree_circle (PLINE * c, Coord X, Coord Y /* <- Center */, Coord radius, Vector v /* First point */, Angle sweep)
+//degree_circle (PLINE * c, Coord X, Coord Y /* <- Center */, Coord radius, Vector v /* First point */, Angle sweep)
+degree_circle (PLINE * c, double X, double Y /* <- Center */, double radius, Vector v /* First point */, Angle sweep)
 {
   /* We don't re-add a point at v, nor do we add the last point, sweep degrees around from (X,Y)-v */
   double e1, e2, t1;
@@ -393,8 +394,10 @@ original_poly (PolygonType * p)
       if (p->Points[n].included_angle != 0)
         {
           Cardinal next_n;
-          Coord cx, cy;
-          Coord radius;
+          double cx, cy;
+          double radius;
+//          Coord cx, cy;
+//          Coord radius;
 
           next_n = n + 1;
           if (next_n == p->PointN ||
diff --git a/src/polygon1.c b/src/polygon1.c
index df10837..3d0a8f8 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -190,7 +190,8 @@ poly_dump (POLYAREA * p)
 }
 
 static VNODE *
-poly_CreateNodeFull (Vector v, bool is_round, Coord cx, Coord cy, Coord radius)
+poly_CreateNodeFull (Vector v, bool is_round, double cx, double cy, double radius)
+//poly_CreateNodeFull (Vector v, bool is_round, Coord cx, Coord cy, Coord radius)
 {
   VNODE *res;
   Coord *c;
@@ -224,7 +225,8 @@ poly_CreateNode (Vector v)
 }
 
 VNODE *
-poly_CreateNodeArcApproximation (Vector v, Coord cx, Coord cy, Coord radius)
+//poly_CreateNodeArcApproximation (Vector v, Coord cx, Coord cy, Coord radius)
+poly_CreateNodeArcApproximation (Vector v, double cx, double cy, double radius)
 {
 //  return poly_CreateNodeFull (v, false /*true*/, cx, cy, radius);
   return poly_CreateNodeFull (v, true, cx, cy, radius);
