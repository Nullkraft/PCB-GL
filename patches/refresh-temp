Bottom: a0c9ce4bf0d5fb028e6e7a9aa286b85a8840f922
Top:    a6c1485a9eb0f35596d70c474545cd09b2ac1ced
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-13 19:23:48 +0000

Refresh of tag-vnodes-with-details-of

---

diff --git a/src/polygon.c b/src/polygon.c
index 5dc27a5..9fe8cf6 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -111,8 +111,8 @@ dicer output is used for HIDs which cannot render things with holes
 
 //#define UNSUBTRACT_BLOAT MIL_TO_COORD (0.1)
 #define UNSUBTRACT_BLOAT 10
-#define SUBTRACT_PIN_VIA_BATCH_SIZE 100 /*100*/
-#define SUBTRACT_LINE_BATCH_SIZE 20 /*20*/
+#define SUBTRACT_PIN_VIA_BATCH_SIZE 100
+#define SUBTRACT_LINE_BATCH_SIZE 20
 
 static double rotate_circle_seg[4];
 static double bw_rotate_circle_seg[4];
diff --git a/src/polygon1.c b/src/polygon1.c
index ef3447f..5461e2b 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -943,7 +943,6 @@ intersect_impl (jmp_buf * jb, POLYAREA * b, POLYAREA * a, int add)
 
       /* XXX: If a node was inserted due to an intersection, don't assume we're on the a round contour any more */
       task->node_seg->v->is_round = false;
-//      task->node_seg->v->next->is_round = false;
 
       /* Do insersion */
       PREV_VERTEX (task->new_node) = EDGE_BACKWARD_VERTEX (task->node_seg->v);
@@ -1658,25 +1657,10 @@ Gather (VNODE *startv, PLINE **result, J_Rule j_rule, DIRECTION initdir)
   assert (*result == NULL);
   do
     {
-#if 0
-      VNODE *jump_curv_temp = curv;
-      DIRECTION jump_dir_temp = dir;
-
-      /* see where to go next */
-      if (!jump (&jump_curv_temp, &jump_dir_temp, j_rule))
-	break;
-#endif
-
-#if 1
       /* see where to go next */
       if (!jump (&curv, &dir, j_rule))
 	break;
-#endif
       /* add vertex (edge?) to polygon */
-//      if ((newn = poly_CreateNodeFull (curv->point, curv->is_round,
-//                                                    curv->cx,
-//                                                    curv->cy,
-//                                                    curv->radius)) == NULL) /* XXX: DIRECTION - might we need to query the previous point for arc details ?? */
       if ((newn = poly_CreateNodeFull (curv->point, (dir == FORW) ? VERTEX_FORWARD_EDGE (curv)->is_round : VERTEX_BACKWARD_EDGE (curv)->is_round,
                                                     (dir == FORW) ? VERTEX_FORWARD_EDGE (curv)->cx       : VERTEX_BACKWARD_EDGE (curv)->cx,
                                                     (dir == FORW) ? VERTEX_FORWARD_EDGE (curv)->cy       : VERTEX_BACKWARD_EDGE (curv)->cy,
@@ -1695,15 +1679,6 @@ Gather (VNODE *startv, PLINE **result, J_Rule j_rule, DIRECTION initdir)
 #ifdef DEBUG_GATHER
       DEBUGP ("gather vertex at %mm, %mm, Dir=%i\n", curv->point[0], curv->point[1], dir);
 #endif
-#if 0
-      curv = jump_curv_temp;
-      dir = jump_dir_temp;
-#endif
-#if 0
-      /* see where to go next */
-      if (!jump (&cur, &dir, j_rule))
-	break;
-#endif
 
       /* Now mark the edge as included.  */
       newn = (dir == FORW) ? VERTEX_FORWARD_EDGE (curv) : VERTEX_BACKWARD_EDGE (curv);
@@ -1714,11 +1689,6 @@ Gather (VNODE *startv, PLINE **result, J_Rule j_rule, DIRECTION initdir)
 
       /* Advance to the next vertex (edge?).  */
       curv = (dir == FORW) ? NEXT_VERTEX (curv) : PREV_VERTEX (curv);
-#if 0
-      /* see where to go next */
-      if (!jump (&cur, &dir, j_rule))
-	break;
-#endif
     }
   while (1);
   return err_ok;
@@ -2802,12 +2772,6 @@ poly_InvContour (PLINE * c)
 
   /* Stash the first data which will get over-written in the loop */
 
-#if 0
-  bool stash_is_round = c->head.prev->is_round;
-  Coord stash_cx = c->head.prev->cx;
-  Coord stash_cy = c->head.prev->cy;
-  Coord stash_radius = c->head.prev->radius;
-#else
   bool stash_is_round = c->head.is_round;
   Coord stash_cx = c->head.cx;
   Coord stash_cy = c->head.cy;
@@ -2817,7 +2781,6 @@ poly_InvContour (PLINE * c)
   Coord next_cx;
   Coord next_cy;
   Coord next_radius;
-#endif
 
 //  printf ("poly_InvContour\n");
 
@@ -2825,13 +2788,6 @@ poly_InvContour (PLINE * c)
   cur = &c->head;
   do
     {
-#if 0
-      /* Swap the attachement of round contour information */
-      cur->prev->is_round = cur->is_round;
-      cur->prev->cx = cur->cx;
-      cur->prev->cy = cur->cy;
-      cur->prev->radius = cur->radius;
-#else
       /* Swap the attachement of round contour information */
       next_is_round = cur->next->is_round;
       next_cx = cur->next->cx;
@@ -2847,7 +2803,6 @@ poly_InvContour (PLINE * c)
       stash_cx = next_cx;
       stash_cy = next_cy;
       stash_radius = next_radius;
-#endif
 
       next = NEXT_EDGE (cur);
       NEXT_EDGE(cur) = PREV_EDGE (cur);
@@ -2857,17 +2812,6 @@ poly_InvContour (PLINE * c)
     }
   while ((cur = next) != &c->head);
 
-  /* NB: Remember that the list just got reversed.. the last
-   *     entry in the old order got stale data from the wraparound
-   *     Fix that up now.
-   */
-#if 0
-  c->head.next->next->is_round = stash_is_round;
-  c->head.next->next->cx = stash_cx;
-  c->head.next->next->cy = stash_cy;
-  c->head.next->next->radius = stash_radius;
-#endif
-
   c->Flags.orient ^= 1;
   if (c->tree)
     {
