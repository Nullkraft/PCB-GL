Bottom: 2fb0c1e07a075571b1ddd2dd06ccf2f8e1d3d2c2
Top:    ad2d146c9ab3b6d75023609ee1ce68b327e3f5a8
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-13 23:26:16 +0000

Refresh of temp-0

---

diff --git a/src/heap.c b/src/heap.c
index 0a9191f..50b11c0 100644
--- a/src/heap.c
+++ b/src/heap.c
@@ -38,7 +38,6 @@
 
 #include "global.h"
 
-#undef NDEBUG
 #include <assert.h>
 
 #include "heap.h"
@@ -48,7 +47,7 @@
 #endif
 
 /* define this for more thorough self-checking of data structures */
-#define SLOW_ASSERTIONS
+#undef SLOW_ASSERTIONS
 
 /* ---------------------------------------------------------------------------
  * some local prototypes
diff --git a/src/polygon1.c b/src/polygon1.c
index 0986629..48f34b7 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -177,11 +177,9 @@ poly_dump (POLYAREA * p)
 
   do
     {
-      fprintf (stderr, "POLYAREA %p\n", f);
       pl = p->contours;
       do
         {
-          fprintf (stderr, "PLINE %p\n", pl);
           pline_dump (&pl->head);
           fprintf (stderr, "NEXT PLINE\n");
         }
@@ -2740,9 +2738,6 @@ M_B_AREA_Collect (jmp_buf * e, POLYAREA * bfst, POLYAREA ** contours,
 	{
 	  next = &((*cur)->next);
 	  if ((*cur)->Flags.status == ISECTED)
-#if 0
-            continue;
-#else
 	    {
 	      /* Check for missed intersect contours here. These can come from
 	       * cases where contours of A and B touch at a single-vertex, so
@@ -2769,9 +2764,7 @@ M_B_AREA_Collect (jmp_buf * e, POLYAREA * bfst, POLYAREA ** contours,
 		break;
 	      }
 	    }
-	  else 
-#endif
-            if ((*cur)->Flags.status == INSIDE)
+	  else if ((*cur)->Flags.status == INSIDE)
 	    switch (action)
 	      {
 	      case PBO_XOR:
@@ -3373,10 +3366,6 @@ poly_Boolean_free (POLYAREA * ai, POLYAREA * bi, POLYAREA ** res, int action)
       assert (poly_Valid (b));
 #endif
 
-      fprintf (stderr, "DUMPING A\n");
-      poly_dump (a);
-      fprintf (stderr, "DUMPING B\n");
-      poly_dump (b);
       /* intersect needs to make a list of the contours in a and b which are intersected */
       M_POLYAREA_intersect (&e, a, b, TRUE);
