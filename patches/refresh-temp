Bottom: a7c7761df93956fa6c67f93177738f44433c3a41
Top:    3814984b7c789710c2105b9e9caf74307b55be0b
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-21 13:42:00 +0000

Refresh of remove-debug-from-hairline

---

diff --git a/src/polygon1.c b/src/polygon1.c
index 2f2ee7a..19d006e 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -39,7 +39,6 @@
       are marked
 */
 
-#undef NDEBUG
 #include	<assert.h>
 #include	<stdlib.h>
 #include	<stdio.h>
@@ -110,12 +109,12 @@ int vect_inters2 (Vector A, Vector B, Vector C, Vector D, Vector S1,
 
 #define error(code)  longjmp(*(e), code)
 
-#define DEBUG_LABEL
-#define DEBUG_ALL_LABELS
-#define DEBUG_JUMP
-#define DEBUG_GATHER
-#define DEBUG_ANGLE
-#define DEBUG
+#undef DEBUG_LABEL
+#undef DEBUG_ALL_LABELS
+#undef DEBUG_JUMP
+#undef DEBUG_GATHER
+#undef DEBUG_ANGLE
+#undef DEBUG
 #ifdef DEBUG
 #define DEBUGP(...) pcb_fprintf(stderr, ## __VA_ARGS__)
 #else
@@ -481,7 +480,7 @@ edge_label
 static unsigned int
 edge_label (VNODE * pn, int existing_label)
 {
-  CVCList *first_l, *l, *test;
+  CVCList *l, *test;
   char this_poly;
   int region;
   bool shared_edge_case = false;
@@ -2519,47 +2518,6 @@ next_cvc_from_same_poly (CVCList *start)
   return n;
 }
 
-#if 1
-static void
-cvc_list_dump (CVCList *list)
-{
-  VNODE *node;
-  CVCList *iter;
-  int count = 0;
-
-  if (list == NULL)
-    {
-      fprintf (stderr, "CVC list is NULL\n");
-      return;
-    }
-
-  node = list->parent;
-
-  pcb_fprintf (stderr, "Dumping CVC list at (%$mn, %$mn)\n", node->point[0], node->point[1]);
-
-  iter = list;
-  do {
-    count ++;
-#if 1
-    pcb_fprintf (stderr, "%p: angle = %.30e, poly = %c, side = %c, (%mn, %mn)-(%mn, %mn), Vertices: %p-%p Edge: %p\n",
-                 iter,
-                 iter->angle,
-                 iter->poly,
-                 iter->side,
-                 EDGE_BACKWARD_VERTEX (VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side))->point[0],
-                 EDGE_BACKWARD_VERTEX (VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side))->point[1],
-                 EDGE_FORWARD_VERTEX  (VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side))->point[0],
-                 EDGE_FORWARD_VERTEX  (VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side))->point[1],
-                 EDGE_BACKWARD_VERTEX (VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side)),
-                 EDGE_FORWARD_VERTEX  (VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side)),
-                 VERTEX_SIDE_DIR_EDGE (iter->parent, iter->side));
-#endif
-  } while ((iter = iter->next) != list);
-
-  if ((count & 1) != 0)
-    g_critical ("Ended up with odd number of entries in CVC list");
-}
-#endif
 
 static seg *
 find_edge_seg (VNODE *edge, PLINE *contour)
@@ -2655,8 +2613,6 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
       l = first_l;
       do
         {
-          cvc_list_dump (l);
-
           n =  next_cvc_from_same_poly (l);
 
           /* Skip testing if we wrapped around, and only had one pair to test */
@@ -2669,8 +2625,6 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
             {
               g_warning ("Wrapped around and found ourselves in the CVCList.. not quite sure how we managed that\n"
                          "Did we perhaps delete the start descriptor? Odd number of entries in a CVCList??");
-
-              cvc_list_dump (l);
               break;
             }
 #endif
@@ -2691,9 +2645,6 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
 
               if (vect_equal (l_otherend->point, n_otherend->point))
                 {
-                  g_critical ("Finding hairline edge pair");
-
-
                   /* Remove the shared edges from any possibly existing cross-connected node at their other ends.
                    * NB: This doesn't apply to the case below where edge geometry is different, as we insert an
                    *     additional vertex, and can be pretty sure that vertex will not be cross-connected. The
@@ -2701,9 +2652,7 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
                    */
 
                   /* NOTE: 'P' at this node means 'N' at otherend */
-                  fprintf (stderr, "Removing CVC descriptor at %p\n", (l->side == 'P') ? l_otherend->cvc_next : l_otherend->cvc_prev);
                   remove_cvc_list_entry ((l->side == 'P') ? l_otherend->cvc_next : l_otherend->cvc_prev);
-                  fprintf (stderr, "Removing CVC descriptor at %p\n", (n->side == 'P') ? n_otherend->cvc_next : n_otherend->cvc_prev);
                   remove_cvc_list_entry ((n->side == 'P') ? n_otherend->cvc_next : n_otherend->cvc_prev);
 
                   point_v = l_otherend; /* Vertex end where we will ensure descriptors exist */
@@ -2718,21 +2667,6 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
                   char shorter_side;
 //                  seg *node_seg;
 
-                  g_critical ("Check found hairline edge pair (by compare_cvc_nodes), but geometry of each edge is different!");
-                  /* XXX: Not sure how to handle this case... might get away with deleting the vertex in the middle of the
-                   *      two colinear edges, and fixing up any geometry accordingly. If that middle vertex was cross-connected,
-                   *      then - perhaps we just need to un-cross-connect it?
-                   */
-
-                  pcb_fprintf (stderr, "%p (%$mn, %$mn)-(%$mn, %$mn)\n",
-                               VERTEX_SIDE_DIR_EDGE (l->parent, l->side),
-                               l->parent->point[0], l->parent->point[1],
-                               l_otherend->point[0], l_otherend->point[1]);
-                  pcb_fprintf (stderr, "%p (%$mn, %$mn)-(%$mn, %$mn)\n",
-                               VERTEX_SIDE_DIR_EDGE (n->parent, n->side),
-                               n->parent->point[0], n->parent->point[1],
-                               n_otherend->point[0], n_otherend->point[1]);
-
                   /* Pick which edge is longer, to insert into.
                    * NOTE: Should work for arcs less than 180 degrees span
                    */
@@ -2766,8 +2700,6 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
                   g_assert (new_node != NULL);
                   new_node->cvc_prev = new_node->cvc_next = NULL;
 
-                  pcb_fprintf (stderr, "Insertion node is (%$mn, %$mn)\n", point_v->point[0], point_v->point[1]);
-
                   {
                     /* Need a copy of the original longer edge pointer, as
                      * tracking back from longer (one of its vertex ends)
@@ -2814,8 +2746,6 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
 
                 }
 
-              cvc_list_dump (l);
-
               /* Simple approach - just mark the edges as visited, so we don't traverse them!
                * Doing it this way ensures that both pieces of the contour are reachable if
                * the hairline edge pair splits this PLINE into two pieces. Since we will ensure
@@ -2824,16 +2754,10 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
                */
               VERTEX_SIDE_DIR_EDGE (l->parent, l->side)->Flags.mark = true;
               VERTEX_SIDE_DIR_EDGE (n->parent, n->side)->Flags.mark = true;
-              fprintf (stderr, "Marking EDGE %p as visited\n", VERTEX_SIDE_DIR_EDGE (l->parent, l->side));
-              fprintf (stderr, "Marking EDGE %p as visited\n", VERTEX_SIDE_DIR_EDGE (n->parent, n->side));
 
-              fprintf (stderr, "Dumping CVC list prior to adding our new nodes\n");
-              cvc_list_dump (find_cvc_at_point (the_list, point));
               add_dummy_descriptors_at_point (point_v->point, first_l->poly, l, bfst); /* Picking 'l' for an arbitrary start CVCList */
-              fprintf (stderr, "Dumping CVC list after adding our new nodes\n");
-              cvc_list_dump (find_cvc_at_point (the_list, point));
 
-              /* Now remove the vertices from both CVC lists, to avoid complicating the edge labeling code.
+              /* Now mark the vertices from this CVC list, to avoid complicating the edge labeling code.
                * Alternatively - teach the edge labeling code to skip pre-marked edges?
                *
                * NOTE: We are careful not to re-add these marked vertices as we progress further in our
@@ -2841,20 +2765,11 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
                *       cross-connected nodes.
                */
 
-#if 0
-              /* NOTE: 'P' at this node means 'N' at otherend */
-              fprintf (stderr, "Removing CVC descriptor at %p\n", (l->side == 'P') ? l_otherend->cvc_next : l_otherend->cvc_prev);
-              remove_cvc_list_entry ((l->side == 'P') ? l_otherend->cvc_next : l_otherend->cvc_prev);
-              fprintf (stderr, "Removing CVC descriptor at %p\n", (n->side == 'P') ? n_otherend->cvc_next : n_otherend->cvc_prev);
-              remove_cvc_list_entry ((n->side == 'P') ? n_otherend->cvc_next : n_otherend->cvc_prev);
-#endif
-
               /* Find the next eligible edge to start from, since we're about to delete the
                * one we would otherwise have used in the next iteration
                */
               nn =  next_cvc_from_same_poly (n);
 
-              fprintf (stderr, "first_l = %p\n", first_l);
               if (l == first_l)
                 {
                   /* NOTE: Need to advance twice, as we're removing this, AND the next descriptor */
@@ -2863,17 +2778,12 @@ PLINE_check_hairline_edges (CVCList *the_list, PLINE *contour, POLYAREA *bfst)
                   if (l == first_l)
                     terminate_after_this_iteration = true;
                 }
-              fprintf (stderr, "Removing CVC descriptor at %p\n", l);
               remove_cvc_list_entry (l);
-#warning ACTUALLY, THIS IS HIT WHEN WE REMOVE THE FIRST EDGE IN l ABOVE.. NEED TO COPE MORE GRACEFULLY!
               if (n == first_l)
                 {
-                  fprintf (stderr, "NOTE (2)\n");
                   terminate_after_this_iteration = true;
                 }
-              fprintf (stderr, "Removing CVC descriptor at %p\n", n);
               remove_cvc_list_entry (n);
-              cvc_list_dump (find_cvc_at_point (the_list, point));
 
               n = nn;
               // XXX: What if we delete the last cross-connected vertex?? Probably the labelling code fails, as it won't know if the
