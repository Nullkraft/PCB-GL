Bottom: beff762ba29045c7cf2adef387142f226eeea796
Top:    02cedfd79b14aa84bb93eaa490f7cdb891695500
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-05 19:25:09 +0000

Refresh of more-play-with-quad-edge-data

---

diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index 7260fa5..4300818 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -644,7 +644,7 @@ object3d_export_to_step (object3d *object, const char *filename)
 object3d *
 object3d_from_board_outline (void)
 {
-  object3d *board_object;
+  object3d *object;
   appearance *board_appearance;
   appearance *top_bot_appearance;
   POLYAREA *outline;
@@ -687,13 +687,13 @@ object3d_from_board_outline (void)
    * holes = ncontours - 1  (LATER)
    */
 
-  board_object = make_object3d (PCB->Name);
+  object = make_object3d (PCB->Name);
   board_appearance = make_appearance ();
   top_bot_appearance = make_appearance ();
   appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
   appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
 
-  object3d_set_appearance (board_object, board_appearance);
+  object3d_set_appearance (object, board_appearance);
 
   vertices = malloc (sizeof (vertex3d *) * 2 * npoints);
   edges    = malloc (sizeof (edge_ref  ) * 3 * npoints);
@@ -719,22 +719,22 @@ object3d_from_board_outline (void)
     vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS)); /* Bottom */
     vertices[npoints + i] = make_vertex3d (x1, y1, 0);                                   /* Top */
 
-    object3d_add_vertex (board_object, vertices[i]);
-    object3d_add_vertex (board_object, vertices[npoints + i]);
+    object3d_add_vertex (object, vertices[i]);
+    object3d_add_vertex (object, vertices[npoints + i]);
   }
 
   /* Define the edges */
   for (i = 0; i < 3 * npoints; i++) {
     edges[i] = make_edge ();
     UNDIR_DATA (edges[i]) = make_edge_info ();
-    object3d_add_edge (board_object, edges[i]);
+    object3d_add_edge (object, edges[i]);
   }
 
   /* Define the faces */
   for (i = 0; i < npoints; i++) {
     faces[i] = make_face3d ();
 
-    object3d_add_face (board_object, faces[i]);
+    object3d_add_face (object, faces[i]);
     /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
     face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
   }
@@ -744,14 +744,14 @@ object3d_from_board_outline (void)
   faces[npoints]->ny =  0.;
   faces[npoints]->nz = -1.;
   face3d_set_appearance (faces[npoints], top_bot_appearance);
-  object3d_add_face (board_object, faces[npoints]);
+  object3d_add_face (object, faces[npoints]);
 
   faces[npoints + 1] = make_face3d (); /* top_face */
   faces[npoints + 1]->nx = 0.;
   faces[npoints + 1]->ny = 0.;
   faces[npoints + 1]->nz = 1.;
   face3d_set_appearance (faces[npoints + 1], top_bot_appearance);
-  object3d_add_face (board_object, faces[npoints + 1]);
+  object3d_add_face (object, faces[npoints + 1]);
 
   /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
   face3d_add_contour (faces[npoints], make_contour3d (SYM(edges[0])));
@@ -837,7 +837,7 @@ object3d_from_board_outline (void)
 
   poly_Free (&outline);
 
-  return board_object;
+  return object;
 }
 
 void
@@ -853,7 +853,7 @@ object3d_test_board_outline (void)
 object3d *
 object3d_from_tracking (void)
 {
-  object3d *board_object;
+  object3d *object;
   appearance *board_appearance;
   appearance *top_bot_appearance;
   POLYAREA *outline;
@@ -883,13 +883,13 @@ object3d_from_tracking (void)
     ct = ct->next;
   }
 
-  board_object = make_object3d (PCB->Name);
+  object = make_object3d (PCB->Name);
   board_appearance = make_appearance ();
   top_bot_appearance = make_appearance ();
   appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
   appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
 
-  object3d_set_appearance (board_object, board_appearance);
+  object3d_set_appearance (object, board_appearance);
 
   vertices = malloc (sizeof (vertex3d *) * 2 * npoints);
   edges    = malloc (sizeof (edge_ref  ) * 3 * npoints);
@@ -915,22 +915,22 @@ object3d_from_tracking (void)
     vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS)); /* Bottom */
     vertices[npoints + i] = make_vertex3d (x1, y1, 0);                                   /* Top */
 
-    object3d_add_vertex (board_object, vertices[i]);
-    object3d_add_vertex (board_object, vertices[npoints + i]);
+    object3d_add_vertex (object, vertices[i]);
+    object3d_add_vertex (object, vertices[npoints + i]);
   }
 
   /* Define the edges */
   for (i = 0; i < 3 * npoints; i++) {
     edges[i] = make_edge ();
     UNDIR_DATA (edges[i]) = make_edge_info ();
-    object3d_add_edge (board_object, edges[i]);
+    object3d_add_edge (object, edges[i]);
   }
 
   /* Define the faces */
   for (i = 0; i < npoints; i++) {
     faces[i] = make_face3d ();
 
-    object3d_add_face (board_object, faces[i]);
+    object3d_add_face (object, faces[i]);
     /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
     face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
   }
@@ -938,12 +938,12 @@ object3d_from_tracking (void)
   faces[npoints] = make_face3d (); /* bottom_face */
   face3d_set_normal (faces[npoints], 0., 0., -1.);
   face3d_set_appearance (faces[npoints], top_bot_appearance);
-  object3d_add_face (board_object, faces[npoints]);
+  object3d_add_face (object, faces[npoints]);
 
   faces[npoints + 1] = make_face3d (); /* top_face */
   face3d_set_normal (faces[npoints + 1], 0., 0., 1.);
   face3d_set_appearance (faces[npoints + 1], top_bot_appearance);
-  object3d_add_face (board_object, faces[npoints + 1]);
+  object3d_add_face (object, faces[npoints + 1]);
 
   /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
   face3d_add_contour (faces[npoints], make_contour3d (SYM(edges[0])));
@@ -1027,5 +1027,5 @@ object3d_from_tracking (void)
 
   poly_Free (&outline);
 
-  return board_object;
+  return object;
 }
