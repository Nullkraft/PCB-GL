Bottom: 5a7cbeca4d2a1e626ea090ac911de2f566c0782a
Top:    ca9a6bfb84e89e3d9ea4addc5cde48b33db1dd58
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2017-03-17 22:57:52 +0000

Refresh of remove-unplacedtype-and-just

---

diff --git a/src/action.c b/src/action.c
index 924389c..dc68691 100644
--- a/src/action.c
+++ b/src/action.c
@@ -7129,15 +7129,12 @@ ActionElementList (int argc, char **argv, Coord x, Coord y)
       element_cache = NULL;
       number_of_footprints_not_found = 0;
 
-      /* Empty out the unplaced element list */
-      UNPLACED_LOOP (PCB->Data);
-      {
-        FreeUnplacedMemory (unplaced);
-      }
-      END_LOOP;
-      g_list_free_full (PCB->Data->Unplaced, (GDestroyNotify)FreeUnplaced);
-      PCB->Data->Unplaced = NULL;
-      PCB->Data->UnplacedN = 0;
+      /* Empty out the unplaced element list.
+       * NB: FreeDataMemory() leaves the outer structure
+       *     intact, but empty - 0 filled.
+       */
+      FreeDataMemory (PCB->Unplaced);
+      PCB->Unplaced->pcb = PCB;
 
       return 0;
     }
@@ -7191,7 +7188,7 @@ ActionElementList (int argc, char **argv, Coord x, Coord y)
 
   if (!e)
     {
-      UnplacedType *unplaced;
+      ElementType *unplaced_e;
       Coord nx, ny, d;
 
 #ifdef DEBUG
@@ -7234,14 +7231,7 @@ ActionElementList (int argc, char **argv, Coord x, Coord y)
 	SetChangedFlag (true);
 #endif
 
-      unplaced = GetUnplacedMemory (PCB->Data);
-
-      unplaced->Name[NAMEONPCB_INDEX] = strdup (refdes);
-      unplaced->Name[VALUE_INDEX] = strdup (value);
-      unplaced->Name[DESCRIPTION_INDEX] = strdup (footprint);
-      unplaced->footprint = strdup (footprint);
-
-      printf ("Created unplaced entry %p, refdes=%s\n", unplaced, unplaced->Name[NAMEONPCB_INDEX]);
+      printf ("Created unplaced entry refdes=%s\n", refdes);
 
       if (LoadFootprint(argc, args, x, y))
         {
@@ -7255,13 +7245,14 @@ ActionElementList (int argc, char **argv, Coord x, Coord y)
           /* Loaded OK, first element in paste-buffer will be what we want, take it */
           assert (PASTEBUFFER->Data->ElementN == 1);
 
-          unplaced->Element = PASTEBUFFER->Data->Element->data;
-          PASTEBUFFER->Data->Element = NULL;
-          PASTEBUFFER->Data->ElementN = 0;
-          ClearBuffer (PASTEBUFFER);
+          unplaced_e = PASTEBUFFER->Data->Element->data;
+          MoveObjectToBuffer (PCB->Unplaced, PASTEBUFFER->Data, ELEMENT_TYPE, unplaced_e, NULL, NULL);
+//          PASTEBUFFER->Data->Element = NULL;
+//          PASTEBUFFER->Data->ElementN = 0;
+//          ClearBuffer (PASTEBUFFER);
+          e = unplaced_e;
         }
 
-      e = unplaced->Element;
       if (e == NULL)
         printf ("Crap - null e\n");
     }
@@ -7371,12 +7362,11 @@ ActionElementSetAttr (int argc, char **argv, Coord x, Coord y)
   if (e == NULL)
     {
       /* Attempt to find in unplaced elements */
-      UNPLACED_LOOP (PCB->Data);
+      ELEMENT_LOOP (PCB->Unplaced);
       {
-        printf ("Unplaced = %p\n", unplaced);
-        if (NSTRCMP (refdes, unplaced->Name[NAMEONPCB_INDEX]) == 0)
+        if (NSTRCMP (refdes, NAMEONPCB_NAME (element)) == 0)
           {
-            e = unplaced->Element;
+            e = element;
             break;
           }
       }
@@ -7386,7 +7376,9 @@ ActionElementSetAttr (int argc, char **argv, Coord x, Coord y)
   if (!e)
     {
       Message(_("Cannot change attribute of %s - element not found\n"), refdes);
-      /* XXX: We could possibly allow setting attributes on unplaced components, but we need to extend this code below */
+      /* XXX: We could possibly allow setting attributes on unplaced components, but we
+       *      would need to create a placeholder to store the attributes.
+       */
       return 1;
     }
 
diff --git a/src/create.c b/src/create.c
index d41b456..74e15aa 100644
--- a/src/create.c
+++ b/src/create.c
@@ -159,6 +159,10 @@ CreateNewPCB (void)
   ptr->Data->pcb = (PCBType *) ptr;
   ptr->Data->polyClip = 1;
 
+  ptr->Unplaced = CreateNewBuffer ();
+  ptr->Unplaced->pcb = (PCBType *) ptr;
+  ptr->Unplaced->polyClip = 0;
+
   ptr->ThermStyle = 4;
   ptr->IsleArea = 2.e8;
   ptr->SilkActive = false;
diff --git a/src/hid/gtk/gui-library-window.c b/src/hid/gtk/gui-library-window.c
index 6f2367f..207f49b 100644
--- a/src/hid/gtk/gui-library-window.c
+++ b/src/hid/gtk/gui-library-window.c
@@ -998,8 +998,7 @@ enum
   UNPLACED_NAMEONPCB_COLUMN,
   UNPLACED_VALUE_COLUMN,
   UNPLACED_DESCRIPTION_COLUMN,
-  UNPLACED_FOOTPRINT_COLUMN,
-  UNPLACED_ITEM_COLUMN,         /* Pointer to the UnplacedType item */
+  UNPLACED_ITEM_COLUMN,         /* Pointer to the ElementType item */
   N_UNPLACED_COLUMNS
 };
 
@@ -1019,18 +1018,16 @@ create_unplaced_tree_model (GhidLibraryWindow * library_window)
                              G_TYPE_STRING,   /* UNPLACED_NAMEONPCB_COLUM */
                              G_TYPE_STRING,   /* UNPLACED_VALUE_COLUMN */
                              G_TYPE_STRING,   /* UNPLACED_DESCRIPTION_COLUMN */
-                             G_TYPE_STRING,   /* UNPLACED_FOOTPRINT_COLUMN */
                              G_TYPE_POINTER); /* UNPLACED_ITEM_COLUMN */
 
-  UNPLACED_LOOP (PCB->Data);
+  ELEMENT_LOOP (PCB->Unplaced);
   {
     gtk_list_store_append (list, &iter);
     gtk_list_store_set (list, &iter,
-                        UNPLACED_NAMEONPCB_COLUMN,   unplaced->Name[NAMEONPCB_INDEX],
-                        UNPLACED_VALUE_COLUMN,       unplaced->Name[VALUE_INDEX],
-                        UNPLACED_DESCRIPTION_COLUMN, unplaced->Name[DESCRIPTION_INDEX],
-                        UNPLACED_FOOTPRINT_COLUMN,   unplaced->footprint,
-                        UNPLACED_ITEM_COLUMN,        unplaced,
+                        UNPLACED_NAMEONPCB_COLUMN,   NAMEONPCB_NAME(element),
+                        UNPLACED_VALUE_COLUMN,       VALUE_NAME(element),
+                        UNPLACED_DESCRIPTION_COLUMN, DESCRIPTION_NAME(element),
+                        UNPLACED_ITEM_COLUMN,        element,
                         -1);
   }
   END_LOOP;
@@ -1056,54 +1053,28 @@ library_window_callback_unplaced_selection_changed (GtkTreeSelection * selection
   GtkTreeModel *model;
   GtkTreeIter iter;
   GhidLibraryWindow *library_window = (GhidLibraryWindow *) user_data;
-  UnplacedType *unplaced = NULL;
+  ElementType *element = NULL;
   gchar *m4_args;
 
+  /* update the preview with new symbol data */
+  g_object_set (library_window->preview,
+                "element-data", NULL, NULL);
+
   if (!gtk_tree_selection_get_selected (selection, &model, &iter))
     return;
 
-  gtk_tree_model_get (model, &iter, UNPLACED_ITEM_COLUMN, &unplaced, -1);
+  gtk_tree_model_get (model, &iter, UNPLACED_ITEM_COLUMN, &element, -1);
 
-  if (unplaced == NULL)
+  if (element == NULL)
     return;
 
-#if 0
-  /* -1 flags this is an element file part and the file path is in
-     |  entry->AllocateMemory.
-   */
-  if (entry->Template == (char *) -1)
-    {
-      if (LoadElementToBuffer (PASTEBUFFER, entry->AllocatedMemory, true))
-        {
-          SetMode (PASTEBUFFER_MODE);
-          goto out;
-        }
-      return;
-    }
-
-  /* Otherwise, it's a m4 element and we need to create a string of
-     |  macro arguments to be passed to the library command in
-     |  LoadElementToBuffer()
-   */
-  m4_args = g_strdup_printf ("'%s' '%s' '%s'", EMPTY (entry->Template),
-                             EMPTY (entry->Value), EMPTY (entry->Package));
-
-  if (LoadElementToBuffer (PASTEBUFFER, m4_args, false))
-    {
-      SetMode (PASTEBUFFER_MODE);
-      g_free (m4_args);
-      goto out;
-    }
-
-  g_free (m4_args);
-  return;
-
-out:
+  ClearBuffer (PASTEBUFFER);
+  CopyObjectToBuffer (PASTEBUFFER->Data, PCB->Unplaced, ELEMENT_TYPE, element, NULL, NULL);
+  SetMode (PASTEBUFFER_MODE);
 
   /* update the preview with new symbol data */
   g_object_set (library_window->preview,
                 "element-data", PASTEBUFFER->Data->Element->data, NULL);
-#endif
 }
