Bottom: 2ba37e587a52b11cf653d2ecadb689f844be17dc
Top:    7af48c24b370d97f5ae6b48f60ae4b448f0723c7
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-12 17:13:20 +0000

Refresh of fix-some-warnings-due-to

---

diff --git a/src/hid/gtk/ghid-coord-entry.c b/src/hid/gtk/ghid-coord-entry.c
index a49ceca..71183a0 100644
--- a/src/hid/gtk/ghid-coord-entry.c
+++ b/src/hid/gtk/ghid-coord-entry.c
@@ -59,7 +59,9 @@ menu_item_activate_cb (GtkMenuItem *item, GHidCoordEntry *ce)
 
 /*! \brief Callback for context menu creation */
 static void
-ghid_coord_entry_popup_cb (GHidCoordEntry *ce, GtkMenu *menu, gpointer data)
+ghid_coord_entry_popup_cb (GHidCoordEntry *ce,
+                           GtkMenu *menu,
+             G_GNUC_UNUSED gpointer data)
 {
   int i, n;
   const Unit *unit_list;
@@ -92,7 +94,8 @@ ghid_coord_entry_popup_cb (GHidCoordEntry *ce, GtkMenu *menu, gpointer data)
 
 /*! \brief Callback for user output */
 static gboolean
-ghid_coord_entry_output_cb (GHidCoordEntry *ce, gpointer data)
+ghid_coord_entry_output_cb (GHidCoordEntry *ce,
+              G_GNUC_UNUSED gpointer data)
 {
   GtkAdjustment *adj = gtk_spin_button_get_adjustment (GTK_SPIN_BUTTON (ce));
   double value = gtk_adjustment_get_value (adj);
@@ -107,7 +110,8 @@ ghid_coord_entry_output_cb (GHidCoordEntry *ce, gpointer data)
 
 /*! \brief Callback for user input */
 static gboolean
-ghid_coord_text_changed_cb (GHidCoordEntry *entry, gpointer data)
+ghid_coord_text_changed_cb (GHidCoordEntry *entry,
+              G_GNUC_UNUSED gpointer data)
 {
   const char *text;
   char *suffix;
@@ -225,6 +229,7 @@ ghid_coord_entry_get_type (void)
 	sizeof (GHidCoordEntry),
 	0,    /* n_preallocs */
 	(GInstanceInitFunc) ghid_coord_entry_init,
+        NULL  /* value_table */
       };
 
       ce_type = g_type_register_static (GTK_TYPE_SPIN_BUTTON,
diff --git a/src/hid/gtk/ghid-layer-selector.c b/src/hid/gtk/ghid-layer-selector.c
index 7e28028..41b506f 100644
--- a/src/hid/gtk/ghid-layer-selector.c
+++ b/src/hid/gtk/ghid-layer-selector.c
@@ -195,8 +195,9 @@ toggle_visibility (GHidLayerSelector *ls, GtkTreeIter *iter, gboolean emit)
 
 /*! \brief Decide if a GtkListStore entry is a layer or separator */
 static gboolean
-tree_view_separator_func (GtkTreeModel *model, GtkTreeIter *iter,
-                          gpointer data)
+tree_view_separator_func (GtkTreeModel *model,
+                          GtkTreeIter *iter,
+            G_GNUC_UNUSED gpointer data)
 {
   gboolean ret_val;
   gtk_tree_model_get (model, iter, SEPARATOR_COL, &ret_val, -1);
@@ -205,8 +206,11 @@ tree_view_separator_func (GtkTreeModel *model, GtkTreeIter *iter,
 
 /*! \brief Decide if a GtkListStore entry may be selected */
 static gboolean
-tree_selection_func (GtkTreeSelection *selection, GtkTreeModel *model,
-                     GtkTreePath *path, gboolean selected, gpointer data)
+tree_selection_func (G_GNUC_UNUSED GtkTreeSelection *selection,
+                     GtkTreeModel *model,
+                     GtkTreePath *path,
+                     G_GNUC_UNUSED gboolean selected,
+                     G_GNUC_UNUSED gpointer data)
 {
   GtkTreeIter iter;
 
@@ -284,10 +288,10 @@ selection_changed_cb (GtkTreeSelection *selection, GHidLayerSelector *ls)
 
 /*! \brief Callback for when a layer name has been edited  */
 static void
-layer_name_editing_started_cb (GtkCellRenderer *renderer,
-                               GtkCellEditable *editable,
-                               gchar           *path,
-                               gpointer         user_data)
+layer_name_editing_started_cb (G_GNUC_UNUSED GtkCellRenderer *renderer,
+                               G_GNUC_UNUSED GtkCellEditable *editable,
+                               G_GNUC_UNUSED gchar           *path,
+                               G_GNUC_UNUSED gpointer         user_data)
 {
   /* When editing begins, we need to detach PCB's accelerators
    * so they don't steal all the user's keystrokes.
@@ -302,8 +306,8 @@ layer_name_editing_started_cb (GtkCellRenderer *renderer,
 
 /*! \brief Callback for when layer name editing has been canceled */
 static void
-layer_name_editing_canceled_cb (GtkCellRenderer *renderer,
-                                 gpointer         user_data)
+layer_name_editing_canceled_cb (G_GNUC_UNUSED GtkCellRenderer *renderer,
+                                G_GNUC_UNUSED gpointer         user_data)
 {
   /* Put PCB's accelerators back.
    *
@@ -316,7 +320,7 @@ layer_name_editing_canceled_cb (GtkCellRenderer *renderer,
 
 /*! \brief Callback for when a layer name has been edited  */
 static void
-layer_name_edited_cb (GtkCellRendererText *renderer,
+layer_name_edited_cb (G_GNUC_UNUSED GtkCellRendererText *renderer,
                       gchar               *path,
                       gchar               *new_text,
                       gpointer             user_data)
@@ -539,6 +543,7 @@ ghid_layer_selector_get_type (void)
 	sizeof (GHidLayerSelector),
 	0,    /* n_preallocs */
 	(GInstanceInitFunc) ghid_layer_selector_init,
+	NULL  /* value_table */
       };
 
       ls_type = g_type_register_static (GTK_TYPE_TREE_VIEW,
@@ -829,8 +834,10 @@ struct layer_data {
 
 /*! \brief used internally */
 static gboolean
-toggle_foreach_func (GtkTreeModel *model, GtkTreePath *path,
-                     GtkTreeIter *iter, gpointer user_data)
+toggle_foreach_func (GtkTreeModel *model,
+                     G_GNUC_UNUSED GtkTreePath *path,
+                     GtkTreeIter *iter,
+                     gpointer user_data)
 {
   struct layer_data *data = (struct layer_data *) user_data;
   gint id;
