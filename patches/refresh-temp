Bottom: b7c94da2734922fcc6680e5574f94136ce7b5870
Top:    7ec7338f84ad24394a991922d814d58558b38bec
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-06 23:19:35 +0000

Refresh of play-with-quad-edge-data

---

diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index 3b0351f..28fb0fe 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -314,125 +314,128 @@ object3d_from_board_outline (void)
   /* XXX: There can be more than one contour, but for now we restrict ourselves to the first one */
   contour = outline->contours;
 
-  ct = contour;
-  while (ct != NULL)
+  if (1)
     {
-      ncontours ++;
-      npoints += get_contour_npoints (ct);
-      ct = ct->next;
-    }
-
-  object = make_object3d (PCB->Name);
-  board_appearance = make_appearance ();
-  appearance_set_color (board_appearance, 1., 1., 0.);
+      ct = contour;
+      while (ct != NULL)
+        {
+          ncontours ++;
+          npoints += get_contour_npoints (ct);
+          ct = ct->next;
+        }
 
-  object3d_set_appearance (object, board_appearance);
+      object = make_object3d (PCB->Name);
+      board_appearance = make_appearance ();
+      appearance_set_color (board_appearance, 1., 1., 0.);
 
-  vertices = malloc (sizeof (vertex3d *) * 2 * npoints); /* (n-bottom, n-top) */
-  edges    = malloc (sizeof (edge_ref  ) * 3 * npoints); /* (n-bottom, n-top, n-sides) */
-  faces    = malloc (sizeof (face3d *) * (npoints + 2)); /* (n-sides, 1-bottom, 1-top */
+      object3d_set_appearance (object, board_appearance);
 
-  /* Define the vertices */
-  ct = contour;
-  start_of_ct = 0;
-  offset_in_ct = 0;
-  ct_npoints = get_contour_npoints (ct);
+      vertices = malloc (sizeof (vertex3d *) * 2 * npoints); /* (n-bottom, n-top) */
+      edges    = malloc (sizeof (edge_ref  ) * 3 * npoints); /* (n-bottom, n-top, n-sides) */
+      faces    = malloc (sizeof (face3d *) * (npoints + 2)); /* (n-sides, 1-bottom, 1-top */
 
-  for (i = 0; i < npoints; i++, offset_in_ct++)
-    {
-      double x1, y1;
+      /* Define the vertices */
+      ct = contour;
+      start_of_ct = 0;
+      offset_in_ct = 0;
+      ct_npoints = get_contour_npoints (ct);
 
-      /* Update which contour we're looking at */
-      if (offset_in_ct == ct_npoints)
+      for (i = 0; i < npoints; i++, offset_in_ct++)
         {
-          offset_in_ct = 0;
-          ct = ct->next;
-          ct_npoints = get_contour_npoints (ct);
-        }
+          double x1, y1;
 
-      get_contour_coord_n_in_mm (ct, offset_in_ct, &x1, &y1);
-      vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS)); /* Bottom */
-      vertices[npoints + i] = make_vertex3d (x1, y1, 0); /* Top */
+          /* Update which contour we're looking at */
+          if (offset_in_ct == ct_npoints)
+            {
+              offset_in_ct = 0;
+              ct = ct->next;
+              ct_npoints = get_contour_npoints (ct);
+            }
 
-      object3d_add_vertex (object, vertices[i]);
-      object3d_add_vertex (object, vertices[npoints + i]);
-    }
+          get_contour_coord_n_in_mm (ct, offset_in_ct, &x1, &y1);
+          vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS)); /* Bottom */
+          vertices[npoints + i] = make_vertex3d (x1, y1, 0); /* Top */
 
-  /* Define the edges */
-  for (i = 0; i < 3 * npoints; i++)
-    {
-      edges[i] = make_edge ();
-      object3d_add_edge (object, edges[i]);
-    }
+          object3d_add_vertex (object, vertices[i]);
+          object3d_add_vertex (object, vertices[npoints + i]);
+        }
 
-  /* Define the faces */
-  for (i = 0; i < npoints; i++)
-    {
-      faces[i] = make_face3d ();
-      /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
-      face3d_add_contour (faces[i], edges[2 * npoints + i]);
-    }
-  faces[npoints] = make_face3d (); /* bottom_face */
-  faces[npoints + 1] = make_face3d (); /* top_face */
+      /* Define the edges */
+      for (i = 0; i < 3 * npoints; i++)
+        {
+          edges[i] = make_edge ();
+          object3d_add_edge (object, edges[i]);
+        }
 
-  /* Pick the first bottom / top edge which within the bottom / top face outer contour loop, and link it to the face */
-  face3d_add_contour (faces[npoints], edges[0]);
-  face3d_add_contour (faces[npoints + 1], edges[npoints]);
+      /* Define the faces */
+      for (i = 0; i < npoints; i++)
+        {
+          faces[i] = make_face3d ();
+          /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
+          face3d_add_contour (faces[i], edges[2 * npoints + i]);
+        }
+      faces[npoints] = make_face3d (); /* bottom_face */
+      faces[npoints + 1] = make_face3d (); /* top_face */
 
-  ct = contour;
-  start_of_ct = 0;
-  offset_in_ct = 0;
-  ct_npoints = get_contour_npoints (ct);
+      /* Pick the first bottom / top edge which within the bottom / top face outer contour loop, and link it to the face */
+      face3d_add_contour (faces[npoints], edges[0]);
+      face3d_add_contour (faces[npoints + 1], edges[npoints]);
 
-  for (i = 0; i < npoints; i++, offset_in_ct++)
-    {
-      int next_i_around_ct;
-      int prev_i_around_ct;
+      ct = contour;
+      start_of_ct = 0;
+      offset_in_ct = 0;
+      ct_npoints = get_contour_npoints (ct);
 
-      /* Update which contour we're looking at */
-      if (offset_in_ct == ct_npoints)
+      for (i = 0; i < npoints; i++, offset_in_ct++)
         {
-          start_of_ct = i;
-          printf ("start_of_ct = %i\n", start_of_ct);
-          offset_in_ct = 0;
-          ct = ct->next;
-          ct_npoints = get_contour_npoints (ct);
+          int next_i_around_ct;
+          int prev_i_around_ct;
 
-          /* If there is more than one contour, it will be an inner contour of the bottom and top faces. Refer to it here */
-          face3d_add_contour (faces[npoints], edges[i]);
-          face3d_add_contour (faces[npoints + 1], edges[npoints + i]);
-        }
+          /* Update which contour we're looking at */
+          if (offset_in_ct == ct_npoints)
+            {
+              start_of_ct = i;
+              printf ("start_of_ct = %i\n", start_of_ct);
+              offset_in_ct = 0;
+              ct = ct->next;
+              ct_npoints = get_contour_npoints (ct);
+
+              /* If there is more than one contour, it will be an inner contour of the bottom and top faces. Refer to it here */
+              face3d_add_contour (faces[npoints], edges[i]);
+              face3d_add_contour (faces[npoints + 1], edges[npoints + i]);
+            }
 
-      next_i_around_ct = start_of_ct + (offset_in_ct + 1) % ct_npoints;
-      prev_i_around_ct = start_of_ct + (offset_in_ct + ct_npoints - 1) % ct_npoints;
-
-      /* Assign the appropriate vertex geometric data to each edge end */
-      ODATA (edges[              i]) = vertices[i];
-      DDATA (edges[              i]) = vertices[next_i_around_ct];
-      ODATA (edges[1 * npoints + i]) = vertices[1 * npoints + i];
-      DDATA (edges[1 * npoints + i]) = vertices[1 * npoints + next_i_around_ct];
-      ODATA (edges[2 * npoints + i]) = vertices[i];
-      DDATA (edges[2 * npoints + i]) = vertices[1 * npoints + i];
-      LDATA (edges[              i]) = faces[i];
-      RDATA (edges[              i]) = faces[npoints];
-      LDATA (edges[1 * npoints + i]) = faces[npoints + 1];
-      RDATA (edges[1 * npoints + i]) = faces[i];
-      LDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
-      RDATA (edges[2 * npoints + i]) = faces[i];
-
-      /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
-      splice (edges[i], edges[npoints + i]);
-      splice (edges[npoints + i], SYM(edges[next_i_around_ct]));
-
-      /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
-      splice (edges[npoints + i], SYM(edges[npoints + next_i_around_ct]));
-      splice (SYM(edges[npoints + next_i_around_ct]), SYM(edges[2 * npoints + i]));
-
-      if (ct->is_round)
-        {
-          UNDIR_DATA (edges[0 * npoints + i]) = make_edge_info (false, true, COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (ct->radius));
-          UNDIR_DATA (edges[1 * npoints + i]) = make_edge_info (false, true, COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (ct->radius));
-          UNDIR_DATA (edges[2 * npoints + i]) = make_edge_info (true,  true, COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (ct->radius));
+          next_i_around_ct = start_of_ct + (offset_in_ct + 1) % ct_npoints;
+          prev_i_around_ct = start_of_ct + (offset_in_ct + ct_npoints - 1) % ct_npoints;
+
+          /* Assign the appropriate vertex geometric data to each edge end */
+          ODATA (edges[              i]) = vertices[i];
+          DDATA (edges[              i]) = vertices[next_i_around_ct];
+          ODATA (edges[1 * npoints + i]) = vertices[1 * npoints + i];
+          DDATA (edges[1 * npoints + i]) = vertices[1 * npoints + next_i_around_ct];
+          ODATA (edges[2 * npoints + i]) = vertices[i];
+          DDATA (edges[2 * npoints + i]) = vertices[1 * npoints + i];
+          LDATA (edges[              i]) = faces[i];
+          RDATA (edges[              i]) = faces[npoints];
+          LDATA (edges[1 * npoints + i]) = faces[npoints + 1];
+          RDATA (edges[1 * npoints + i]) = faces[i];
+          LDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
+          RDATA (edges[2 * npoints + i]) = faces[i];
+
+          /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
+          splice (edges[i], edges[npoints + i]);
+          splice (edges[npoints + i], SYM(edges[next_i_around_ct]));
+
+          /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
+          splice (edges[npoints + i], SYM(edges[npoints + next_i_around_ct]));
+          splice (SYM(edges[npoints + next_i_around_ct]), SYM(edges[2 * npoints + i]));
+
+          if (ct->is_round)
+            {
+              UNDIR_DATA (edges[0 * npoints + i]) = make_edge_info (false, true, COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (ct->radius));
+              UNDIR_DATA (edges[1 * npoints + i]) = make_edge_info (false, true, COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (ct->radius));
+              UNDIR_DATA (edges[2 * npoints + i]) = make_edge_info (true,  true, COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), COORD_TO_MM (ct->radius));
+            }
         }
     }
