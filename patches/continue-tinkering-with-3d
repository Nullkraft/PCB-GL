Bottom: 74dde53935add978e9732721b575c752515db728
Top:    83ffe7b95b6ed99bd15b809dcc617b56abc67d18
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-03-05 16:25:59 +0000

Continue tinkering with 3D games


---

diff --git a/src/hid/common/face3d.c b/src/hid/common/face3d.c
index 0df8f23..ff20c3f 100644
--- a/src/hid/common/face3d.c
+++ b/src/hid/common/face3d.c
@@ -55,3 +55,9 @@ face3d_set_cylindrical (face3d *face, float cx, float cy, float cz, float ax, fl
   face->az = az;
   face->radius = radius;
 }
+
+void
+face3d_set_surface_orientation_reversed (face3d *face)
+{
+  face->surface_orientation_reversed = true;
+}
diff --git a/src/hid/common/face3d.h b/src/hid/common/face3d.h
index 52be6dc..b3c140d 100644
--- a/src/hid/common/face3d.h
+++ b/src/hid/common/face3d.h
@@ -11,8 +11,8 @@ typedef struct {
   appearance *appear;
 
   /* XXX: STEP specific - breaks encapsulation */
-  int plane_identifier;
-  bool plane_orientation_reversed;
+  int surface_identifier;
+  bool surface_orientation_reversed;
   int face_identifier;
   int face_bound_identifier;
 } face3d;
@@ -23,3 +23,4 @@ void face3d_add_contour (face3d *face, contour3d *contour);
 void face3d_set_appearance (face3d *face, appearance *appear);
 void face3d_set_normal (face3d *face, float nx, float ny, float nz);
 void face3d_set_cylindrical (face3d *face, float cx, float cy, float cz, float ax, float ay, float az, float radius);
+void face3d_set_surface_orientation_reversed (face3d *face);
diff --git a/src/hid/common/object3d.c b/src/hid/common/object3d.c
index 4300818..f2cbfb1 100644
--- a/src/hid/common/object3d.c
+++ b/src/hid/common/object3d.c
@@ -35,7 +35,7 @@
 
 #define HACK_BOARD_THICKNESS MM_TO_COORD(1.6)
 
-static object3d *object3d_test_object = NULL;
+static GList *object3d_test_objects = NULL;
 
 static void
 print_edge_id (edge_ref e)
@@ -61,8 +61,8 @@ debug_print_edge (edge_ref e, void *data)
 void
 object3d_test_init (void)
 {
-  //object3d_test_object = object3d_create_test_cube ();
-  object3d_test_object = object3d_from_board_outline ();
+  //object3d_test_objects = g_list_append (NULL, object3d_create_test_cube ());
+  object3d_test_objects = object3d_from_board_outline ();
   object3d_test_board_outline ();
 }
 
@@ -215,8 +215,8 @@ draw_quad_edge (edge_ref e, void *data)
 
   if (UNDIR_DATA(e) != NULL) {
     edge_info *info = UNDIR_DATA(e);
-    if (info->is_stitch)
-      return;
+//    if (info->is_stitch)
+//      return;
     if (info->is_round) {
       int i;
       glBegin (GL_LINES);
@@ -240,12 +240,19 @@ draw_quad_edge (edge_ref e, void *data)
   glEnd ();
 }
 
+static void
+object3d_draw_debug_single (object3d *object, void *user_data)
+{
+  g_return_if_fail (object->edges != NULL);
+
+//  quad_enum ((edge_ref)object->edges->data, draw_quad_edge, NULL);
+  g_list_foreach (object->edges, (GFunc)draw_quad_edge, NULL);
+}
+
 void
 object3d_draw_debug (void)
 {
-  g_return_if_fail (object3d_test_object->edges != NULL);
-
-  quad_enum ((edge_ref)object3d_test_object->edges->data, draw_quad_edge, NULL);
+  g_list_foreach (object3d_test_objects, (GFunc)object3d_draw_debug_single, NULL);
 }
 
 /*********************************************************************************************************/
@@ -297,6 +304,7 @@ object3d_export_to_step (object3d *object, const char *filename)
   struct tm utc;
   int next_step_identifier;
   int geometric_representation_context_identifier;
+  int shape_representation_identifier;
   int brep_identifier;
   int pcb_shell_identifier;
   int brep_style_identifier;
@@ -367,12 +375,13 @@ object3d_export_to_step (object3d *object, const char *filename)
               "#16 =( NAMED_UNIT ( * ) PLANE_ANGLE_UNIT ( ) SI_UNIT ( $, .RADIAN. ) );\n"
               "#17 =( NAMED_UNIT ( * ) SI_UNIT ( $, .STERADIAN. ) SOLID_ANGLE_UNIT ( ) );\n"
               "#18 =( GEOMETRIC_REPRESENTATION_CONTEXT ( 3 ) GLOBAL_UNCERTAINTY_ASSIGNED_CONTEXT ( ( #14 ) ) GLOBAL_UNIT_ASSIGNED_CONTEXT ( ( #15, #16, #17 ) ) REPRESENTATION_CONTEXT ( 'NONE', 'WORKASPACE' ) );\n");
+  geometric_representation_context_identifier = 18;
 
-  fprintf (f, "#19 = ADVANCED_BREP_SHAPE_REPRESENTATION ( '%s', ( /* Manifold_solid_brep */ #21, #13 ), #18 ) ;\n"
-              "#20 = SHAPE_DEFINITION_REPRESENTATION ( #9, #19 ) ;\n",
-              "test_pcb_absr_name");
+  /* Save a place for the advanced_brep_shape_representation identifier */
+  next_step_identifier = 19;
+  shape_representation_identifier = next_step_identifier++;
 
-  geometric_representation_context_identifier = 18;
+  fprintf (f, "#20 = SHAPE_DEFINITION_REPRESENTATION ( #9, #%i ) ;\n", shape_representation_identifier);
 
   /* Save a place for the brep identifier */
   next_step_identifier = 21;
@@ -420,8 +429,7 @@ object3d_export_to_step (object3d *object, const char *filename)
                    next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
                    next_step_identifier + 4, next_step_identifier + 3, face->radius);
 
-          face->plane_orientation_reversed = true;
-          face->plane_identifier = next_step_identifier + 4;
+          face->surface_identifier = next_step_identifier + 4;
           next_step_identifier = next_step_identifier + 5;
         }
       else
@@ -463,8 +471,7 @@ object3d_export_to_step (object3d *object, const char *filename)
                    next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
                    next_step_identifier + 4, next_step_identifier + 3);
 
-          face->plane_orientation_reversed = false;
-          face->plane_identifier = next_step_identifier + 4;
+          face->surface_identifier = next_step_identifier + 4;
           next_step_identifier = next_step_identifier + 5;
         }
     }
@@ -483,7 +490,8 @@ object3d_export_to_step (object3d *object, const char *filename)
                       "#%i = AXIS2_PLACEMENT_3D ( 'NONE', #%i,  #%i,  #%i ) ; "
                       "#%i = CIRCLE ( 'NONE', #%i, %f ) ;\n",
                    next_step_identifier,     /* Center of the circle   */ info->cx, info->cy, info->cz, // <--- Center of coordinate placement
-                   next_step_identifier + 1, /* Normal of circle?      */ 0.0, 0.0, -1.0, // <--- Z-axis direction of placement             /* XXX: PULL FROM FACE DATA */
+                   next_step_identifier + 1, /* Normal of circle?      */ info->nx, info->ny, info->nz, // <--- Z-axis direction of placement             /* XXX: PULL FROM FACE DATA */
+//                   next_step_identifier + 1, /* Normal of circle?      */ 0.0, 0.0, -1.0, // <--- Z-axis direction of placement             /* XXX: PULL FROM FACE DATA */
                    next_step_identifier + 2, /* ??????                 */ -1.0, 0.0, 0.0, // <--- Approximate X-axis direction of placement /* XXX: PULL FROM FACE DATA */
                    next_step_identifier + 3, next_step_identifier, next_step_identifier + 1, next_step_identifier + 2,
                    next_step_identifier + 4, next_step_identifier + 3, info->radius);
@@ -555,7 +563,6 @@ object3d_export_to_step (object3d *object, const char *filename)
         contour3d *contour = contour_iter->data;
         edge_ref edge;
 
-        /* XXX: FWD / BWD NEEDS TO BE FUDGED IN HERE PERHAPS? */
         fprintf (f, "#%i = EDGE_LOOP ( 'NONE', ", next_step_identifier);
 
         /* Emit the edges.. */
@@ -581,7 +588,7 @@ object3d_export_to_step (object3d *object, const char *filename)
         fprintf (f, "#%i, ", ((contour3d *)contour_iter->data)->face_bound_identifier);
       }
       fprintf (f, "#%i)", ((contour3d *)contour_iter->data)->face_bound_identifier);
-      fprintf (f, ", #%i, %s ) ;\n", face->plane_identifier, face->plane_orientation_reversed ? ".F." : ".T.");
+      fprintf (f, ", #%i, %s ) ;\n", face->surface_identifier, face->surface_orientation_reversed ? ".F." : ".T.");
       face->face_identifier = next_step_identifier;
       next_step_identifier = next_step_identifier + 1;
 
@@ -630,10 +637,12 @@ object3d_export_to_step (object3d *object, const char *filename)
   fprintf (f, ", #%i ) ;\n", geometric_representation_context_identifier);
   next_step_identifier = next_step_identifier + 1;
 
+  fprintf (f, "#%i = ADVANCED_BREP_SHAPE_REPRESENTATION ( '%s', ( #%i, #13 ), #%i ) ;\n",
+           shape_representation_identifier, "test_pcb_absr_name", brep_identifier, geometric_representation_context_identifier);
 
+#undef ORIENTED_EDGE_IDENTIFIER
 #undef FWD
 #undef REV
-#undef ORIENTED_EDGE_IDENTIFIER
 
   fprintf (f, "ENDSEC;\n" );
   fprintf (f, "END-ISO-10303-21;\n" );
@@ -641,13 +650,15 @@ object3d_export_to_step (object3d *object, const char *filename)
   fclose (f);
 }
 
-object3d *
+GList *
 object3d_from_board_outline (void)
 {
+  GList *objects = NULL;
   object3d *object;
   appearance *board_appearance;
   appearance *top_bot_appearance;
-  POLYAREA *outline;
+  POLYAREA *board_outline;
+  POLYAREA *pa;
   PLINE *contour;
   PLINE *ct;
   int ncontours;
@@ -660,372 +671,282 @@ object3d_from_board_outline (void)
   int offset_in_ct;
   int ct_npoints;
 
-  outline = board_outline_poly (true);
-  //outline = board_outline_poly (false); /* (FOR NOW - just the outline, no holes) */
-  ncontours = 0;
-  npoints = 0;
-
-  /* XXX: There can be more than one contour, but for now we restrict ourselves to the first one */
-  contour = outline->contours;
-
-  ct = contour;
-  while (ct != NULL) {
-    ncontours ++;
-    npoints += get_contour_npoints (ct);
-    ct = ct->next;
-  }
-
-  /* We know how many edges and vertices we need now...
-   *
-   * let n = npoints
-   * bodies = 1             (FOR NOW - just the first board outline)
-   * vertices = 2n          (n-top, n-bottom)
-   * edges = 3n             (n-top, n-bottom, n-sides)
-   * faces = 2 + n          (1-top, 1-bottom, n-sides)
-   *
-   * holes = 0              (FOR NOW - just the outline, no holes)
-   * holes = ncontours - 1  (LATER)
-   */
-
-  object = make_object3d (PCB->Name);
-  board_appearance = make_appearance ();
-  top_bot_appearance = make_appearance ();
-  appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
-  appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
-
-  object3d_set_appearance (object, board_appearance);
-
-  vertices = malloc (sizeof (vertex3d *) * 2 * npoints);
-  edges    = malloc (sizeof (edge_ref  ) * 3 * npoints);
-  faces    = malloc (sizeof (face3d *) * (2 + npoints));
-
-  /* Define the vertices */
-  ct = contour;
-  start_of_ct = 0;
-  offset_in_ct = 0;
-  ct_npoints = get_contour_npoints (ct);
-
-  for (i = 0; i < npoints; i++, offset_in_ct++) {
-    double x1, y1;
-
-    /* Update which contour we're looking at */
-    if (offset_in_ct == ct_npoints) {
-      offset_in_ct = 0;
-      ct = ct->next;
-      ct_npoints = get_contour_npoints (ct);
-    }
-
-    get_contour_coord_n_in_mm (ct, offset_in_ct, &x1, &y1);
-    vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS)); /* Bottom */
-    vertices[npoints + i] = make_vertex3d (x1, y1, 0);                                   /* Top */
+  board_outline = board_outline_poly (true);
 
-    object3d_add_vertex (object, vertices[i]);
-    object3d_add_vertex (object, vertices[npoints + i]);
-  }
+  if (board_outline == NULL)
+    return NULL;
 
-  /* Define the edges */
-  for (i = 0; i < 3 * npoints; i++) {
-    edges[i] = make_edge ();
-    UNDIR_DATA (edges[i]) = make_edge_info ();
-    object3d_add_edge (object, edges[i]);
-  }
+  /* Loop over all board outline pieces */
+  pa = board_outline;
+  do {
 
-  /* Define the faces */
-  for (i = 0; i < npoints; i++) {
-    faces[i] = make_face3d ();
+    contour = pa->contours;
+    ncontours = 0;
+    npoints = 0;
 
-    object3d_add_face (object, faces[i]);
-    /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
-    face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
-  }
-
-  faces[npoints] = make_face3d (); /* bottom_face */
-  faces[npoints]->nx =  0.;
-  faces[npoints]->ny =  0.;
-  faces[npoints]->nz = -1.;
-  face3d_set_appearance (faces[npoints], top_bot_appearance);
-  object3d_add_face (object, faces[npoints]);
-
-  faces[npoints + 1] = make_face3d (); /* top_face */
-  faces[npoints + 1]->nx = 0.;
-  faces[npoints + 1]->ny = 0.;
-  faces[npoints + 1]->nz = 1.;
-  face3d_set_appearance (faces[npoints + 1], top_bot_appearance);
-  object3d_add_face (object, faces[npoints + 1]);
-
-  /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
-  face3d_add_contour (faces[npoints], make_contour3d (SYM(edges[0])));
-  face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints]));
-
-  ct = contour;
-  start_of_ct = 0;
-  offset_in_ct = 0;
-  ct_npoints = get_contour_npoints (ct);
-
-  for (i = 0; i < npoints; i++, offset_in_ct++) {
-    int next_i_around_ct;
-    int prev_i_around_ct;
-
-    /* Update which contour we're looking at */
-    if (offset_in_ct == ct_npoints) {
-      start_of_ct = i;
-      offset_in_ct = 0;
+    ct = contour;
+    while (ct != NULL) {
+      ncontours ++;
+      npoints += get_contour_npoints (ct);
       ct = ct->next;
-      ct_npoints = get_contour_npoints (ct);
-
-      /* If there is more than one contour, it will be an inner contour of the bottom and top faces. Refer to it here */
-      face3d_add_contour (faces[npoints], make_contour3d (SYM(edges[i])));
-      face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints + i]));
     }
 
-    next_i_around_ct = start_of_ct + (offset_in_ct + 1) % ct_npoints;
-    prev_i_around_ct = start_of_ct + (offset_in_ct + ct_npoints - 1) % ct_npoints;
-
-    /* Setup the face normals for the edges along the contour extrusion (top and bottom are handled separaetely) */
-    /* Define the (non-normalized) face normal to point to the outside of the contour */
-    faces[i]->nx = vertices[next_i_around_ct]->y - vertices[i]->y;
-    faces[i]->ny = vertices[i]->x - vertices[next_i_around_ct]->x;
-    faces[i]->nz = 0.;
-
-    /* Assign the appropriate vertex geometric data to each edge end */
-    ODATA (edges[              i]) = vertices[0 * npoints + i];
-    DDATA (edges[              i]) = vertices[0 * npoints + next_i_around_ct];
-    ODATA (edges[1 * npoints + i]) = vertices[1 * npoints + i];
-    DDATA (edges[1 * npoints + i]) = vertices[1 * npoints + next_i_around_ct];
-    ODATA (edges[2 * npoints + i]) = vertices[0 * npoints + i];
-    DDATA (edges[2 * npoints + i]) = vertices[1 * npoints + i];
-    LDATA (edges[              i]) = faces[i];
-    RDATA (edges[              i]) = faces[npoints];
-    LDATA (edges[1 * npoints + i]) = faces[npoints + 1];
-    RDATA (edges[1 * npoints + i]) = faces[i];
-    LDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
-    RDATA (edges[2 * npoints + i]) = faces[i];
-
-    /* NB: Contours are counter clockwise in XY plane.
-     *     edges[          0-npoints-1] are the base of the extrusion, following in the counter clockwise order
-     *     edges[1*npoints-2*npoints-1] are the top  of the extrusion, following in the counter clockwise order
-     *     edges[2*npoints-3*npoints-1] are the upright edges, oriented from bottom to top
+    /* We know how many edges and vertices we need now...
+     *
+     * let n = npoints
+     * bodies = 1             (FOR NOW - just the first board outline)
+     * vertices = 2n          (n-top, n-bottom)
+     * edges = 3n             (n-top, n-bottom, n-sides)
+     * faces = 2 + n          (1-top, 1-bottom, n-sides)
+     *
+     * holes = 0              (FOR NOW - just the outline, no holes)
+     * holes = ncontours - 1  (LATER)
      */
 
-    /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
-    splice (edges[i], edges[2 * npoints + i]);
-    splice (edges[2 * npoints + i], SYM(edges[prev_i_around_ct]));
+    object = make_object3d (PCB->Name);
+    board_appearance = make_appearance ();
+    top_bot_appearance = make_appearance ();
+    appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
+    appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
 
-    /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
-    splice (SYM(edges[2 * npoints + i]), edges[npoints + i]);
-    splice (edges[npoints + i], SYM(edges[npoints + prev_i_around_ct]));
+    object3d_set_appearance (object, board_appearance);
 
-    if (ct->is_round) {
+    vertices = malloc (sizeof (vertex3d *) * 2 * npoints);
+    edges    = malloc (sizeof (edge_ref  ) * 3 * npoints);
+    faces    = malloc (sizeof (face3d *) * (2 + npoints));
 
-      face3d_set_cylindrical (faces[i], COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), 0., /* A point on the axis of the cylinder */
-                                        0., 0., 1.,                                     /* Direction of the cylindrical axis */
-                                        COORD_TO_MM (ct->radius));
-      face3d_set_normal (faces[i], 1., 0., 0.);  /* A normal to the axis direction */
-                                /* XXX: ^^^ Could line this up with the direction to the vertex in the corresponding circle edge */
+    /* Define the vertices */
+    ct = contour;
+    start_of_ct = 0;
+    offset_in_ct = 0;
+    ct_npoints = get_contour_npoints (ct);
 
+    for (i = 0; i < npoints; i++, offset_in_ct++) {
+      double x1, y1;
 
-      edge_info_set_round (UNDIR_DATA (edges[i]),
-                           COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), -COORD_TO_MM (HACK_BOARD_THICKNESS), /* Center of circle */
-                           0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius));
-      edge_info_set_round (UNDIR_DATA (edges[npoints + i]),
-                           COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), 0., /* Center of circle */
-                           0., 0., -1., /* Normal */ COORD_TO_MM (ct->radius));
-      edge_info_set_stitch (UNDIR_DATA (edges[2 * npoints + i]));
-    }
-
-  }
+      /* Update which contour we're looking at */
+      if (offset_in_ct == ct_npoints) {
+        offset_in_ct = 0;
+        ct = ct->next;
+        ct_npoints = get_contour_npoints (ct);
+      }
 
-  poly_Free (&outline);
+      get_contour_coord_n_in_mm (ct, offset_in_ct, &x1, &y1);
+      vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS)); /* Bottom */
+      vertices[npoints + i] = make_vertex3d (x1, y1, 0);                                   /* Top */
 
-  return object;
-}
+      object3d_add_vertex (object, vertices[i]);
+      object3d_add_vertex (object, vertices[npoints + i]);
+    }
 
-void
-object3d_test_board_outline (void)
-{
-  object3d *board_outline;
+    /* Define the edges */
+    for (i = 0; i < 3 * npoints; i++) {
+      edges[i] = make_edge ();
+      UNDIR_DATA (edges[i]) = make_edge_info ();
+      object3d_add_edge (object, edges[i]);
+    }
 
-  board_outline = object3d_from_board_outline ();
-  object3d_export_to_step (board_outline, "object3d_test.step");
-  destroy_object3d (board_outline);
-}
+    /* Define the faces */
+    for (i = 0; i < npoints; i++) {
+      faces[i] = make_face3d ();
 
-object3d *
-object3d_from_tracking (void)
-{
-  object3d *object;
-  appearance *board_appearance;
-  appearance *top_bot_appearance;
-  POLYAREA *outline;
-  PLINE *contour;
-  PLINE *ct;
-  int ncontours;
-  int npoints;
-  int i;
-  vertex3d **vertices;
-  edge_ref *edges;
-  face3d **faces;
-  int start_of_ct;
-  int offset_in_ct;
-  int ct_npoints;
+      object3d_add_face (object, faces[i]);
+      /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
+      face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
+    }
 
-  outline = board_outline_poly (true);
-  ncontours = 0;
-  npoints = 0;
+    faces[npoints] = make_face3d (); /* bottom_face */
+    face3d_set_normal (faces[npoints], 0., 0., -1.);
+    face3d_set_appearance (faces[npoints], top_bot_appearance);
+    object3d_add_face (object, faces[npoints]);
+
+    faces[npoints + 1] = make_face3d (); /* top_face */
+    face3d_set_normal (faces[npoints + 1], 0., 0., 1.);
+    face3d_set_appearance (faces[npoints + 1], top_bot_appearance);
+    object3d_add_face (object, faces[npoints + 1]);
+
+    /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
+    face3d_add_contour (faces[npoints], make_contour3d (SYM(edges[0])));
+    face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints]));
+
+    ct = contour;
+    start_of_ct = 0;
+    offset_in_ct = 0;
+    ct_npoints = get_contour_npoints (ct);
+
+    for (i = 0; i < npoints; i++, offset_in_ct++) {
+      int next_i_around_ct;
+      int prev_i_around_ct;
+
+      /* Update which contour we're looking at */
+      if (offset_in_ct == ct_npoints) {
+        start_of_ct = i;
+        offset_in_ct = 0;
+        ct = ct->next;
+        ct_npoints = get_contour_npoints (ct);
+
+        /* If there is more than one contour, it will be an inner contour of the bottom and top faces. Refer to it here */
+        face3d_add_contour (faces[npoints], make_contour3d (SYM(edges[i])));
+        face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints + i]));
+      }
 
-  /* XXX: There can be more than one contour, but for now we restrict ourselves to the first one */
-  contour = outline->contours;
+      next_i_around_ct = start_of_ct + (offset_in_ct + 1) % ct_npoints;
+      prev_i_around_ct = start_of_ct + (offset_in_ct + ct_npoints - 1) % ct_npoints;
+
+      /* Setup the face normals for the edges along the contour extrusion (top and bottom are handled separaetely) */
+      /* Define the (non-normalized) face normal to point to the outside of the contour */
+      face3d_set_normal (faces[i], (vertices[next_i_around_ct]->y - vertices[i]->y),
+                                  -(vertices[next_i_around_ct]->x - vertices[i]->x), 0.);
+
+      /* Assign the appropriate vertex geometric data to each edge end */
+      ODATA (edges[              i]) = vertices[0 * npoints + i];
+      DDATA (edges[              i]) = vertices[0 * npoints + next_i_around_ct];
+      ODATA (edges[1 * npoints + i]) = vertices[1 * npoints + i];
+      DDATA (edges[1 * npoints + i]) = vertices[1 * npoints + next_i_around_ct];
+      ODATA (edges[2 * npoints + i]) = vertices[0 * npoints + i];
+      DDATA (edges[2 * npoints + i]) = vertices[1 * npoints + i];
+      LDATA (edges[              i]) = faces[i];
+      RDATA (edges[              i]) = faces[npoints];
+      LDATA (edges[1 * npoints + i]) = faces[npoints + 1];
+      RDATA (edges[1 * npoints + i]) = faces[i];
+      LDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
+      RDATA (edges[2 * npoints + i]) = faces[i];
+
+      /* NB: Contours are counter clockwise in XY plane.
+       *     edges[          0-npoints-1] are the base of the extrusion, following in the counter clockwise order
+       *     edges[1*npoints-2*npoints-1] are the top  of the extrusion, following in the counter clockwise order
+       *     edges[2*npoints-3*npoints-1] are the upright edges, oriented from bottom to top
+       */
 
-  ct = contour;
-  while (ct != NULL) {
-    ncontours ++;
-    npoints += get_contour_npoints (ct);
-    ct = ct->next;
-  }
+      /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
+      splice (edges[i], edges[2 * npoints + i]);
+      splice (edges[2 * npoints + i], SYM(edges[prev_i_around_ct]));
 
-  object = make_object3d (PCB->Name);
-  board_appearance = make_appearance ();
-  top_bot_appearance = make_appearance ();
-  appearance_set_color (board_appearance,   1.0, 1.0, 0.6);
-  appearance_set_color (top_bot_appearance, 0.2, 0.8, 0.2);
+      /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
+      splice (SYM(edges[2 * npoints + i]), edges[npoints + i]);
+      splice (edges[npoints + i], SYM(edges[npoints + prev_i_around_ct]));
 
-  object3d_set_appearance (object, board_appearance);
+      if (ct->is_round) {
 
-  vertices = malloc (sizeof (vertex3d *) * 2 * npoints);
-  edges    = malloc (sizeof (edge_ref  ) * 3 * npoints);
-  faces    = malloc (sizeof (face3d *) * (2 + npoints));
+        face3d_set_cylindrical (faces[i], COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), 0., /* A point on the axis of the cylinder */
+                                          0., 0., 1.,                                     /* Direction of the cylindrical axis */
+                                          COORD_TO_MM (ct->radius));
+        face3d_set_surface_orientation_reversed (faces[i]); /* XXX: Assuming this is a hole, the cylindrical surface normal points in the wrong direction - INCORRECT IF THIS IS THE OUTER CONTOUR!*/
+        face3d_set_normal (faces[i], 1., 0., 0.);  /* A normal to the axis direction */
+                                  /* XXX: ^^^ Could line this up with the direction to the vertex in the corresponding circle edge */
 
-  /* Define the vertices */
-  ct = contour;
-  start_of_ct = 0;
-  offset_in_ct = 0;
-  ct_npoints = get_contour_npoints (ct);
 
-  for (i = 0; i < npoints; i++, offset_in_ct++) {
-    double x1, y1;
+        edge_info_set_round (UNDIR_DATA (edges[i]),
+                             COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), -COORD_TO_MM (HACK_BOARD_THICKNESS), /* Center of circle */
+                             0., 0., -1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
+        edge_info_set_round (UNDIR_DATA (edges[npoints + i]),
+                             COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), 0., /* Center of circle */
+                             0., 0., -1., /* Normal */ COORD_TO_MM (ct->radius)); /* NORMAL POINTING TO -VE Z MAKES CIRCLE CLOCKWISE */
+        edge_info_set_stitch (UNDIR_DATA (edges[2 * npoints + i]));
+      }
 
-    /* Update which contour we're looking at */
-    if (offset_in_ct == ct_npoints) {
-      offset_in_ct = 0;
-      ct = ct->next;
-      ct_npoints = get_contour_npoints (ct);
     }
 
-    get_contour_coord_n_in_mm (ct, offset_in_ct, &x1, &y1);
-    vertices[i]           = make_vertex3d (x1, y1, -COORD_TO_MM (HACK_BOARD_THICKNESS)); /* Bottom */
-    vertices[npoints + i] = make_vertex3d (x1, y1, 0);                                   /* Top */
+    if (1) {
+      /* Cylinder centers on 45x45mm, stitch vertex is at 40x45mm. Radius is thus 5mm */
+
+      edge_ref cylinder_edges[3];
+      vertex3d *cylinder_vertices[2];
+      face3d *cylinder_faces[2];
+
+      /* Edge on top of board */
+      cylinder_edges[0] = make_edge ();
+      UNDIR_DATA (cylinder_edges[0]) = make_edge_info ();
+      edge_info_set_round (UNDIR_DATA (cylinder_edges[0]),
+                           45., 45., 0., /* Center of circle */
+                            0.,  0., 1., /* Normal */
+                            5.);         /* Radius */
+      object3d_add_edge (object, cylinder_edges[0]);
+
+      /* Edge on top of cylinder */
+      cylinder_edges[1] = make_edge ();
+      UNDIR_DATA (cylinder_edges[1]) = make_edge_info ();
+      edge_info_set_round (UNDIR_DATA (cylinder_edges[1]),
+                           45., 45., 10., /* Center of circle */
+                            0.,  0., 1.,  /* Normal */
+                            5.);          /* Radius */
+      object3d_add_edge (object, cylinder_edges[1]);
+
+      /* Edge stitching cylinder */
+      cylinder_edges[2] = make_edge ();
+      UNDIR_DATA (cylinder_edges[2]) = make_edge_info ();
+      edge_info_set_stitch (UNDIR_DATA (cylinder_edges[2]));
+      object3d_add_edge (object, cylinder_edges[2]);
+
+      /* Vertex on board top surface */
+      cylinder_vertices[0] = make_vertex3d (40., 45., 0.); /* Bottom */
+      object3d_add_vertex (object, cylinder_vertices[0]);
+
+      /* Vertex on cylinder top surface */
+      cylinder_vertices[1] = make_vertex3d (40., 45., 10.); /* Top */
+      object3d_add_vertex (object, cylinder_vertices[1]);
+
+      /* Cylindrical face */
+      cylinder_faces[0] = make_face3d ();
+      face3d_set_cylindrical (cylinder_faces[0], 45., 45., 0., /* A point on the axis of the cylinder */
+                                        0., 0., 1.,            /* Direction of the cylindrical axis */
+                                        5.);                   /* Radius of cylinder */
+      face3d_set_normal (cylinder_faces[0], 1., 0., 0.);       /* A normal to the axis direction */
+                                   /* XXX: ^^^ Could line this up with the direction to the vertex in the corresponding circle edge */
+      object3d_add_face (object, cylinder_faces[0]);
+      face3d_add_contour (cylinder_faces[0], make_contour3d (cylinder_edges[0]));
+
+      /* Top face of cylinder */
+      cylinder_faces[1] = make_face3d (); /* top face of cylinder */
+      face3d_set_normal (cylinder_faces[1], 0., 0., 1.);
+      face3d_set_appearance (cylinder_faces[1], top_bot_appearance);
+      object3d_add_face (object, cylinder_faces[1]);
+      face3d_add_contour (cylinder_faces[1], make_contour3d (cylinder_edges[1]));
+
+      /* Splice onto board */
+      face3d_add_contour (faces[npoints + 1], make_contour3d (SYM(cylinder_edges[0])));
+
+      /* Assign the appropriate vertex geometric data to each edge end */
+      ODATA (cylinder_edges[0]) = cylinder_vertices[0];
+      DDATA (cylinder_edges[0]) = cylinder_vertices[0];
+      ODATA (cylinder_edges[1]) = cylinder_vertices[1];
+      DDATA (cylinder_edges[1]) = cylinder_vertices[1];
+      ODATA (cylinder_edges[2]) = cylinder_vertices[0];
+      DDATA (cylinder_edges[2]) = cylinder_vertices[1];
+      LDATA (cylinder_edges[0]) = cylinder_faces[0];
+      RDATA (cylinder_edges[0]) = faces[npoints + 1]; /* TOP OF BOARD FACE */
+      LDATA (cylinder_edges[1]) = cylinder_faces[1];
+      RDATA (cylinder_edges[1]) = cylinder_faces[0];
+      LDATA (cylinder_edges[2]) = cylinder_faces[0];
+      RDATA (cylinder_edges[2]) = cylinder_faces[0];
+
+      /* Splice things together.... */
+
+      /* Link edges orbiting the cylinder bottom vertex */
+      splice (cylinder_edges[0], cylinder_edges[2]);
+      splice (cylinder_edges[2], SYM(cylinder_edges[0]));
+
+      /* Link edges orbiting the cylinder top vertex */
+      splice (SYM(cylinder_edges[2]), cylinder_edges[1]);
+      splice (cylinder_edges[1], SYM(cylinder_edges[1]));
+    }
 
-    object3d_add_vertex (object, vertices[i]);
-    object3d_add_vertex (object, vertices[npoints + i]);
-  }
+    objects = g_list_append (objects, object);
 
-  /* Define the edges */
-  for (i = 0; i < 3 * npoints; i++) {
-    edges[i] = make_edge ();
-    UNDIR_DATA (edges[i]) = make_edge_info ();
-    object3d_add_edge (object, edges[i]);
-  }
+  } while (pa = pa->f, pa != board_outline);
 
-  /* Define the faces */
-  for (i = 0; i < npoints; i++) {
-    faces[i] = make_face3d ();
+  poly_Free (&board_outline);
 
-    object3d_add_face (object, faces[i]);
-    /* Pick one of the upright edges which is within this face outer contour loop, and link it to the face */
-    face3d_add_contour (faces[i], make_contour3d (SYM(edges[2 * npoints + i])));
-  }
-
-  faces[npoints] = make_face3d (); /* bottom_face */
-  face3d_set_normal (faces[npoints], 0., 0., -1.);
-  face3d_set_appearance (faces[npoints], top_bot_appearance);
-  object3d_add_face (object, faces[npoints]);
-
-  faces[npoints + 1] = make_face3d (); /* top_face */
-  face3d_set_normal (faces[npoints + 1], 0., 0., 1.);
-  face3d_set_appearance (faces[npoints + 1], top_bot_appearance);
-  object3d_add_face (object, faces[npoints + 1]);
-
-  /* Pick the first bottom / top edge within the bottom / top face outer contour loop, and link it to the face */
-  face3d_add_contour (faces[npoints], make_contour3d (SYM(edges[0])));
-  face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints]));
-
-  ct = contour;
-  start_of_ct = 0;
-  offset_in_ct = 0;
-  ct_npoints = get_contour_npoints (ct);
-
-  for (i = 0; i < npoints; i++, offset_in_ct++) {
-    int next_i_around_ct;
-    int prev_i_around_ct;
-
-    /* Update which contour we're looking at */
-    if (offset_in_ct == ct_npoints) {
-      start_of_ct = i;
-      offset_in_ct = 0;
-      ct = ct->next;
-      ct_npoints = get_contour_npoints (ct);
-
-      /* If there is more than one contour, it will be an inner contour of the bottom and top faces. Refer to it here */
-      face3d_add_contour (faces[npoints], make_contour3d (SYM(edges[i])));
-      face3d_add_contour (faces[npoints + 1], make_contour3d (edges[npoints + i]));
-    }
-
-    next_i_around_ct = start_of_ct + (offset_in_ct + 1) % ct_npoints;
-    prev_i_around_ct = start_of_ct + (offset_in_ct + ct_npoints - 1) % ct_npoints;
-
-    /* Setup the face normals for the edges along the contour extrusion (top and bottom are handled separaetely) */
-    /* Define the (non-normalized) face normal to point to the outside of the contour */
-    face3d_set_normal (faces[i], (vertices[next_i_around_ct]->y - vertices[i]->y),
-                                -(vertices[next_i_around_ct]->x - vertices[i]->x), 0.);
-
-    /* Assign the appropriate vertex geometric data to each edge end */
-    ODATA (edges[              i]) = vertices[0 * npoints + i];
-    DDATA (edges[              i]) = vertices[0 * npoints + next_i_around_ct];
-    ODATA (edges[1 * npoints + i]) = vertices[1 * npoints + i];
-    DDATA (edges[1 * npoints + i]) = vertices[1 * npoints + next_i_around_ct];
-    ODATA (edges[2 * npoints + i]) = vertices[0 * npoints + i];
-    DDATA (edges[2 * npoints + i]) = vertices[1 * npoints + i];
-    LDATA (edges[              i]) = faces[i];
-    RDATA (edges[              i]) = faces[npoints];
-    LDATA (edges[1 * npoints + i]) = faces[npoints + 1];
-    RDATA (edges[1 * npoints + i]) = faces[i];
-    LDATA (edges[2 * npoints + i]) = faces[prev_i_around_ct];
-    RDATA (edges[2 * npoints + i]) = faces[i];
-
-    /* NB: Contours are counter clockwise in XY plane.
-     *     edges[          0-npoints-1] are the base of the extrusion, following in the counter clockwise order
-     *     edges[1*npoints-2*npoints-1] are the top  of the extrusion, following in the counter clockwise order
-     *     edges[2*npoints-3*npoints-1] are the upright edges, oriented from bottom to top
-     */
-
-    /* Link edges orbiting around each bottom vertex i (0 <= i < npoints) */
-    splice (edges[i], edges[2 * npoints + i]);
-    splice (edges[2 * npoints + i], SYM(edges[prev_i_around_ct]));
-
-    /* Link edges orbiting around each top vertex (npoints + i) (0 <= i < npoints) */
-    splice (SYM(edges[2 * npoints + i]), edges[npoints + i]);
-    splice (edges[npoints + i], SYM(edges[npoints + prev_i_around_ct]));
-
-    if (ct->is_round) {
-
-      face3d_set_cylindrical (faces[i], COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), 0., /* A point on the axis of the cylinder */
-                                        0., 0., 1.,                                     /* Direction of the cylindrical axis */
-                                        COORD_TO_MM (ct->radius));
-      face3d_set_normal (faces[i], 1., 0., 0.);  /* A normal to the axis direction */
-                                /* XXX: ^^^ Could line this up with the direction to the vertex in the corresponding circle edge */
-
-      edge_info_set_round (UNDIR_DATA (edges[i]),
-                           COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), -COORD_TO_MM (HACK_BOARD_THICKNESS), /* Center of circle */
-                           0., 0., 1., /* Normal */ COORD_TO_MM (ct->radius));
-      edge_info_set_round (UNDIR_DATA (edges[npoints + i]),
-                           COORD_TO_MM (ct->cx), COORD_TO_MM (ct->cy), 0., /* Center of circle */
-                           0., 0., -1., /* Normal */ COORD_TO_MM (ct->radius));
-      edge_info_set_stitch (UNDIR_DATA (edges[2 * npoints + i]));
-    }
+  return objects;
+}
 
-  }
+void
+object3d_test_board_outline (void)
+{
+  GList *board_outlines;
 
-  poly_Free (&outline);
+  board_outlines = object3d_from_board_outline ();
+  object3d_export_to_step (board_outlines->data, "object3d_test.step");
 
-  return object;
+  g_list_free_full (board_outlines, (GDestroyNotify)destroy_object3d);
 }
diff --git a/src/hid/common/object3d.h b/src/hid/common/object3d.h
index 9a34fa8..f396295 100644
--- a/src/hid/common/object3d.h
+++ b/src/hid/common/object3d.h
@@ -16,6 +16,6 @@ void object3d_add_edge (object3d *object, edge_ref edge);
 void object3d_add_vertex (object3d *object, vertex3d *vertex);
 void object3d_add_face (object3d *object, face3d *face);
 object3d *object3d_create_test_cube (void);
-object3d *object3d_from_board_outline (void);
+GList *object3d_from_board_outline (void);
 void object3d_export_to_step (object3d *object, const char *filename);
 void object3d_test_board_outline (void);
