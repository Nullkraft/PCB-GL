Bottom: 2edf7052d62fde47848031e476050572168dae9d
Top:    8ed09141b3428276f37b157b83cc615a7e48d5d5
Author: Peter Clifton <peter@clifton-electronics.co.uk>
Date:   2016-02-13 18:29:00 +0000

Attempt storing arc center calcultations in floating point...


---

diff --git a/src/misc.c b/src/misc.c
index 54f1b83..3f5cd07 100644
--- a/src/misc.c
+++ b/src/misc.c
@@ -362,10 +362,12 @@ SetLineBoundingBox (LineType *Line)
  */
 void
 calc_arc_from_points_and_included_angle (PointType *p1, PointType *p2, Angle included_angle,
-                                         Coord *cx, Coord *cy, Coord *radius,
+                                         double *cx, double *cy, double *radius,
+//                                         Coord *cx, Coord *cy, Coord *radius,
                                          Angle *start_angle, Angle *delta_angle)
 {
-  Coord hx, hy;
+  double hx, hy;
+//  Coord hx, hy;
   double p_to_h_dist;
   double c_to_h_dist;
   double unit_hcx, unit_hcy;
@@ -434,7 +436,8 @@ SetPolygonBoundingBox (PolygonType *Polygon)
     if (point->included_angle != 0)
       {
         BoxType arc_bound;
-        Coord cx, cy, radius;
+        double cx, cy, radius;
+//        Coord cx, cy, radius;
         Angle start_angle, delta_angle;
         PointType *next_point;
 
diff --git a/src/misc.h b/src/misc.h
index 84f62ed..ded72f6 100644
--- a/src/misc.h
+++ b/src/misc.h
@@ -53,7 +53,8 @@ void SetArcEndpoints (ArcType *);
 void SetPointBoundingBox (PointType *);
 void SetPinBoundingBox (PinType *);
 void SetPadBoundingBox (PadType *);
-void calc_arc_from_points_and_included_angle (PointType *p1, PointType *p2, Angle included_angle, Coord *cx, Coord *cy, Coord *radius, Angle *start_angle, Angle *delta_angle);
+void calc_arc_from_points_and_included_angle (PointType *p1, PointType *p2, Angle included_angle, double *cx, double *cy, double *radius, Angle *start_angle, Angle *delta_angle);
+//void calc_arc_from_points_and_included_angle (PointType *p1, PointType *p2, Angle included_angle, Coord *cx, Coord *cy, Coord *radius, Angle *start_angle, Angle *delta_angle);
 void SetPolygonBoundingBox (PolygonType *);
 void SetElementBoundingBox (DataType *, ElementType *, FontType *);
 bool IsDataEmpty (DataType *);
diff --git a/src/polyarea.h b/src/polyarea.h
index c892307..199bc59 100644
--- a/src/polyarea.h
+++ b/src/polyarea.h
@@ -94,8 +94,10 @@ struct VNODE
     double p0; /* Smaller parameter along curve, 0-1 */
     double p1; /* Larger  parameter along curve, 0-1 */
     bool is_round;
-    Coord cx, cy;
-    Coord radius;
+    double cx, cy;
+    double radius;
+//    Coord cx, cy;
+//    Coord radius;
 };
 
 typedef struct PLINE PLINE;
@@ -130,7 +132,8 @@ void poly_PreContour(PLINE * c, BOOLp optimize); /* prepare contour */
 void poly_InvContour(PLINE * c);  /* invert contour */
 
 VNODE *poly_CreateNode(Vector v);
-VNODE *poly_CreateNodeArcApproximation(Vector v, Coord cx, Coord cy, Coord radius);
+VNODE *poly_CreateNodeArcApproximation(Vector v, double cx, double cy, double radius);
+//VNODE *poly_CreateNodeArcApproximation(Vector v, Coord cx, Coord cy, Coord radius);
 
 void poly_InclVertex(VNODE * after, VNODE * node);
 void poly_ExclVertex(VNODE * node);
diff --git a/src/polygon.c b/src/polygon.c
index 53e91f1..2fc09df 100644
--- a/src/polygon.c
+++ b/src/polygon.c
@@ -293,7 +293,8 @@ ContourToPoly (PLINE * contour)
 }
 
 static void
-degree_circle (PLINE * c, Coord X, Coord Y /* <- Center */, Coord radius, Vector v /* First point */, Angle sweep)
+//degree_circle (PLINE * c, Coord X, Coord Y /* <- Center */, Coord radius, Vector v /* First point */, Angle sweep)
+degree_circle (PLINE * c, double X, double Y /* <- Center */, double radius, Vector v /* First point */, Angle sweep)
 {
   /* We don't re-add a point at v, nor do we add the last point, sweep degrees around from (X,Y)-v */
   double e1, e2, t1;
@@ -393,8 +394,10 @@ original_poly (PolygonType * p)
       if (p->Points[n].included_angle != 0)
         {
           Cardinal next_n;
-          Coord cx, cy;
-          Coord radius;
+          double cx, cy;
+          double radius;
+//          Coord cx, cy;
+//          Coord radius;
 
           next_n = n + 1;
           if (next_n == p->PointN ||
diff --git a/src/polygon1.c b/src/polygon1.c
index 8360df6..cc4419b 100644
--- a/src/polygon1.c
+++ b/src/polygon1.c
@@ -39,6 +39,7 @@
       are marked
 */
 
+#undef NDEBUG
 #include	<assert.h>
 #include	<stdlib.h>
 #include	<stdio.h>
@@ -194,7 +195,8 @@ poly_dump (POLYAREA * p)
 }
 
 static VNODE *
-poly_CreateNodeFull (Vector v, bool is_round, Coord cx, Coord cy, Coord radius)
+poly_CreateNodeFull (Vector v, bool is_round, double cx, double cy, double radius)
+//poly_CreateNodeFull (Vector v, bool is_round, Coord cx, Coord cy, Coord radius)
 {
   VNODE *res;
   Coord *c;
@@ -228,7 +230,8 @@ poly_CreateNode (Vector v)
 }
 
 VNODE *
-poly_CreateNodeArcApproximation (Vector v, Coord cx, Coord cy, Coord radius)
+//poly_CreateNodeArcApproximation (Vector v, Coord cx, Coord cy, Coord radius)
+poly_CreateNodeArcApproximation (Vector v, double cx, double cy, double radius)
 {
 //  return poly_CreateNodeFull (v, false /*true*/, cx, cy, radius);
   return poly_CreateNodeFull (v, true, cx, cy, radius);
@@ -936,6 +939,7 @@ insert_vertex_in_seg (struct info *i, struct seg *s, Vector v, double param)
   DEBUGP ("new intersection on segment \"i\" at %#mD\n", v[0], v[1]);
 #endif
   i->node_insert_list = prepend_insert_node_task (i->node_insert_list, s, new_node, param);
+  assert (!s->intersected);
   s->intersected = 1;
   return true;
 }
@@ -1290,6 +1294,8 @@ seg_in_seg_arc_arc (struct info *i, struct seg *s1, struct seg *s2)
       s1->v->radius == s2->v->radius)
     {
       printf ("Cop-out for co-circular arcs for now - they will be better handled by their line approximations. <<<<<<<<<<\n");
+      s1->v->is_round = false;
+      s2->v->is_round = false;
       return seg_in_seg_line_line (i, s1, s2);
     }
 #endif
@@ -1937,7 +1943,7 @@ print_labels (PLINE * a)
 
   do
     {
-      DEBUGP ("(%mn, %mn)->(%mn, %mn) labeled %s  is_round=%i radius=%li cvc_next=%p cvc_prev=%p\n",
+      DEBUGP ("(%mn, %mn)->(%mn, %mn) labeled %s  is_round=%i radius=%f cvc_next=%p cvc_prev=%p\n",
               EDGE_BACKWARD_VERTEX (e)->point[0], EDGE_BACKWARD_VERTEX (e)->point[1],
                EDGE_FORWARD_VERTEX (e)->point[0],  EDGE_FORWARD_VERTEX (e)->point[1], theState (e),
               e->is_round, e->radius, EDGE_BACKWARD_VERTEX (e)->cvc_next, EDGE_BACKWARD_VERTEX (e)->cvc_prev);
@@ -4641,10 +4647,10 @@ vect_inters2 (Vector p1, Vector p2, double s1, double s2,
       Vector q1_trimmed;
       Vector q2_trimmed;
 
-      double sq1;
-      double sq2;
-      double tp1;
-      double tp2;
+//      double sq1;
+//      double sq2;
+//      double tp1;
+//      double tp2;
 
       p1_trimmed[0] = p1[0] + ROUND (s1 * rpx);
       p1_trimmed[1] = p1[1] + ROUND (s1 * rpy);
@@ -4657,10 +4663,10 @@ vect_inters2 (Vector p1, Vector p2, double s1, double s2,
       q2_trimmed[1] = q1[1] + ROUND (t2 * rqy);
 
       /* Calculate the parameter values on each line (p1-p2 has s param, q1-q2 has t param), of the end-points of the other line */
-      sq1 = calculate_line_point_intersection (p1, p2, q1_trimmed);
-      sq2 = calculate_line_point_intersection (p1, p2, q2_trimmed);
-      tp1 = calculate_line_point_intersection (q1, q2, p1_trimmed);
-      tp2 = calculate_line_point_intersection (q1, q2, p2_trimmed);
+//      sq1 = calculate_line_point_intersection (p1, p2, q1_trimmed);
+//      sq2 = calculate_line_point_intersection (p1, p2, q2_trimmed);
+//      tp1 = calculate_line_point_intersection (q1, q2, p1_trimmed);
+//      tp2 = calculate_line_point_intersection (q1, q2, p2_trimmed);
 
       {
       double dc1, dc2, d1, d2, h;	/* Check to see whether p1-p2 and q1-q2 are on the same line */
